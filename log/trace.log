2021-04-16 00:00:10.531 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:00:10.531 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:00:10.542 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:00:10.542 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:00:10.542 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:00:10.542 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:00:10.542 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:00:10.543 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:00:10.543 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:00:10.543 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:00:10.545 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:00:10.545 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<blockquote>争做国内使用体验最好的开源 Web 富文本编辑器！</blockquote><h1>为何选择 wangEditor</h1><ul><li>简洁、轻量级、<a href=\"https://doc.wangeditor.com/\">文档</a>齐全</li><li>万星项目&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/releases\">Github Star 1w+</a></li><li>npm 周下载量 1w+</li><li>CDN 月下载量百万+（来自&nbsp;<a href=\"https://www.jsdelivr.com/package/npm/wangeditor\">jsdelivr</a>）</li><li>QQ 群及时答疑</li><li><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">开源团队</a>维护，非个人单兵作战</li></ul><h1>初见</h1><p>npm 安装&nbsp;<code>npm i wangeditor --save</code>&nbsp;，几行代码即可创建一个编辑器。</p><pre><code>import E from 'wangeditor'\nconst editor = new E('#div1')\neditor.create()</code></pre><p>更多使用配置，请阅读<a href=\"https://doc.wangeditor.com/\">使用文档</a>。</p><h1>demo</h1><p>在线体验 demo 可到&nbsp;<a href=\"https://codepen.io/collection/DNmPQV\">codepen.io/collection/DNmPQV</a>&nbsp;。</p><p>注意，如果打不开，可以去查看&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/tree/master/examples\">github examples</a>&nbsp;的源码。</p><h1>浏览器兼容性</h1><ul><li>兼容主流 PC 浏览器，IE11+</li><li>不支持移动端和 ipad</li></ul><h1>遇到问题</h1><ul><li>加入 QQ 群：164999061(人已满)，710646022(人已满)，901247714</li><li><a href=\"https://github.com/wangeditor-team/wangEditor/issues\" target=\"_blank\">提交问题和建议</a></li></ul><h1>贡献代码</h1><p>欢迎非团队成员贡献代码，提交 Pull Request，请一定参考<a href=\"https://github.com/wangeditor-team/wangEditor/blob/master/docs/contribution.md\" target=\"_blank\">贡献代码流程</a>。</p><h1>谁在维护</h1><p>wangEditor 现有一个开源团队在维护，团队可以保证答疑、bug 修复和迭代效率。</p><p><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">查看开发团队，或想加入开发团队</a></p><h1>为我们点赞</h1><p>如果你感觉有收获，欢迎给我打赏，以激励我们更多输出优质开源内容。</p><p><img src=\"https://www.wangeditor.com/imgs/ali-pay.jpeg\"/>&nbsp;<img src=\"https://www.wangeditor.com/imgs/wechat-pay.jpeg\"/></p><p><br/></p>","success":true}
2021-04-16 00:00:10.545 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：14 ms -------------
2021-04-16 00:00:10.545 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：14 ms -------------
2021-04-16 00:00:15.566 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:00:15.566 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:00:15.566 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:00:15.566 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:00:15.566 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:00:15.566 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:00:15.566 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:00:15.566 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:00:15.566 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:00:15.566 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:00:15.569 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:00:15.569 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:00:15.569 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<blockquote>争做国内使用体验最好的开源 Web 富文本编辑器！</blockquote><h1>为何选择 wangEditor</h1><ul><li>简洁、轻量级、<a href=\"https://doc.wangeditor.com/\">文档</a>齐全</li><li>万星项目&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/releases\">Github Star 1w+</a></li><li>npm 周下载量 1w+</li><li>CDN 月下载量百万+（来自&nbsp;<a href=\"https://www.jsdelivr.com/package/npm/wangeditor\">jsdelivr</a>）</li><li>QQ 群及时答疑</li><li><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">开源团队</a>维护，非个人单兵作战</li></ul><h1>初见</h1><p>npm 安装&nbsp;<code>npm i wangeditor --save</code>&nbsp;，几行代码即可创建一个编辑器。</p><pre><code>import E from 'wangeditor'\nconst editor = new E('#div1')\neditor.create()</code></pre><p>更多使用配置，请阅读<a href=\"https://doc.wangeditor.com/\">使用文档</a>。</p><h1>demo</h1><p>在线体验 demo 可到&nbsp;<a href=\"https://codepen.io/collection/DNmPQV\">codepen.io/collection/DNmPQV</a>&nbsp;。</p><p>注意，如果打不开，可以去查看&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/tree/master/examples\">github examples</a>&nbsp;的源码。</p><h1>浏览器兼容性</h1><ul><li>兼容主流 PC 浏览器，IE11+</li><li>不支持移动端和 ipad</li></ul><h1>遇到问题</h1><ul><li>加入 QQ 群：164999061(人已满)，710646022(人已满)，901247714</li><li><a href=\"https://github.com/wangeditor-team/wangEditor/issues\" target=\"_blank\">提交问题和建议</a></li></ul><h1>贡献代码</h1><p>欢迎非团队成员贡献代码，提交 Pull Request，请一定参考<a href=\"https://github.com/wangeditor-team/wangEditor/blob/master/docs/contribution.md\" target=\"_blank\">贡献代码流程</a>。</p><h1>谁在维护</h1><p>wangEditor 现有一个开源团队在维护，团队可以保证答疑、bug 修复和迭代效率。</p><p><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">查看开发团队，或想加入开发团队</a></p><h1>为我们点赞</h1><p>如果你感觉有收获，欢迎给我打赏，以激励我们更多输出优质开源内容。</p><p><img src=\"https://www.wangeditor.com/imgs/ali-pay.jpeg\"/>&nbsp;<img src=\"https://www.wangeditor.com/imgs/wechat-pay.jpeg\"/></p><p><br/></p>","success":true}
2021-04-16 00:00:15.570 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:00:33.125 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:00:33.340 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:05:33.426 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:05:33.485 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:10:33.526 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:10:33.635 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:15:33.752 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:15:33.831 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:19:20.367 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:19:20.367 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:19:20.372 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:19:20.372 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:19:20.372 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:19:20.372 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:19:20.372 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:19:20.372 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:19:20.373 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:19:20.373 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:19:20.493 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<blockquote>争做国内使用体验最好的开源 Web 富文本编辑器！</blockquote><h1>为何选择 wangEditor</h1><ul><li>简洁、轻量级、<a href=\"https://doc.wangeditor.com/\">文档</a>齐全</li><li>万星项目&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/releases\">Github Star 1w+</a></li><li>npm 周下载量 1w+</li><li>CDN 月下载量百万+（来自&nbsp;<a href=\"https://www.jsdelivr.com/package/npm/wangeditor\">jsdelivr</a>）</li><li>QQ 群及时答疑</li><li><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">开源团队</a>维护，非个人单兵作战</li></ul><h1>初见</h1><p>npm 安装&nbsp;<code>npm i wangeditor --save</code>&nbsp;，几行代码即可创建一个编辑器。</p><pre><code>import E from 'wangeditor'\nconst editor = new E('#div1')\neditor.create()</code></pre><p>更多使用配置，请阅读<a href=\"https://doc.wangeditor.com/\">使用文档</a>。</p><h1>demo</h1><p>在线体验 demo 可到&nbsp;<a href=\"https://codepen.io/collection/DNmPQV\">codepen.io/collection/DNmPQV</a>&nbsp;。</p><p>注意，如果打不开，可以去查看&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/tree/master/examples\">github examples</a>&nbsp;的源码。</p><h1>浏览器兼容性</h1><ul><li>兼容主流 PC 浏览器，IE11+</li><li>不支持移动端和 ipad</li></ul><h1>遇到问题</h1><ul><li>加入 QQ 群：164999061(人已满)，710646022(人已满)，901247714</li><li><a href=\"https://github.com/wangeditor-team/wangEditor/issues\" target=\"_blank\">提交问题和建议</a></li></ul><h1>贡献代码</h1><p>欢迎非团队成员贡献代码，提交 Pull Request，请一定参考<a href=\"https://github.com/wangeditor-team/wangEditor/blob/master/docs/contribution.md\" target=\"_blank\">贡献代码流程</a>。</p><h1>谁在维护</h1><p>wangEditor 现有一个开源团队在维护，团队可以保证答疑、bug 修复和迭代效率。</p><p><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">查看开发团队，或想加入开发团队</a></p><h1>为我们点赞</h1><p>如果你感觉有收获，欢迎给我打赏，以激励我们更多输出优质开源内容。</p><p><img src=\"https://www.wangeditor.com/imgs/ali-pay.jpeg\"/>&nbsp;<img src=\"https://www.wangeditor.com/imgs/wechat-pay.jpeg\"/></p><p><br/></p>","success":true}
2021-04-16 00:19:20.493 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：127 ms -------------
2021-04-16 00:19:20.494 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:19:20.494 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：128 ms -------------
2021-04-16 00:19:56.040 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:19:56.040 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:19:56.040 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:19:56.040 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:19:56.041 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:19:56.041 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:19:56.041 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:19:56.041 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:19:56.041 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:19:56.041 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:19:56.045 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<blockquote>争做国内使用体验最好的开源 Web 富文本编辑器！</blockquote><h1>为何选择 wangEditor</h1><ul><li>简洁、轻量级、<a href=\"https://doc.wangeditor.com/\">文档</a>齐全</li><li>万星项目&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/releases\">Github Star 1w+</a></li><li>npm 周下载量 1w+</li><li>CDN 月下载量百万+（来自&nbsp;<a href=\"https://www.jsdelivr.com/package/npm/wangeditor\">jsdelivr</a>）</li><li>QQ 群及时答疑</li><li><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">开源团队</a>维护，非个人单兵作战</li></ul><h1>初见</h1><p>npm 安装&nbsp;<code>npm i wangeditor --save</code>&nbsp;，几行代码即可创建一个编辑器。</p><pre><code>import E from 'wangeditor'\nconst editor = new E('#div1')\neditor.create()</code></pre><p>更多使用配置，请阅读<a href=\"https://doc.wangeditor.com/\">使用文档</a>。</p><h1>demo</h1><p>在线体验 demo 可到&nbsp;<a href=\"https://codepen.io/collection/DNmPQV\">codepen.io/collection/DNmPQV</a>&nbsp;。</p><p>注意，如果打不开，可以去查看&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/tree/master/examples\">github examples</a>&nbsp;的源码。</p><h1>浏览器兼容性</h1><ul><li>兼容主流 PC 浏览器，IE11+</li><li>不支持移动端和 ipad</li></ul><h1>遇到问题</h1><ul><li>加入 QQ 群：164999061(人已满)，710646022(人已满)，901247714</li><li><a href=\"https://github.com/wangeditor-team/wangEditor/issues\" target=\"_blank\">提交问题和建议</a></li></ul><h1>贡献代码</h1><p>欢迎非团队成员贡献代码，提交 Pull Request，请一定参考<a href=\"https://github.com/wangeditor-team/wangEditor/blob/master/docs/contribution.md\" target=\"_blank\">贡献代码流程</a>。</p><h1>谁在维护</h1><p>wangEditor 现有一个开源团队在维护，团队可以保证答疑、bug 修复和迭代效率。</p><p><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">查看开发团队，或想加入开发团队</a></p><h1>为我们点赞</h1><p>如果你感觉有收获，欢迎给我打赏，以激励我们更多输出优质开源内容。</p><p><img src=\"https://www.wangeditor.com/imgs/ali-pay.jpeg\"/>&nbsp;<img src=\"https://www.wangeditor.com/imgs/wechat-pay.jpeg\"/></p><p><br/></p>","success":true}
2021-04-16 00:19:56.045 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:19:56.063 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:19:56.063 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：23 ms -------------
2021-04-16 00:20:33.954 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:20:34.112 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:23:16.949 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:16.951 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:23:16.951 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:23:16.952 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:16.952 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:23:16.973 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:23:16.973 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：24 ms -------------
2021-04-16 00:23:27.426 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:27.426 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 00:23:27.426 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 00:23:27.427 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:27.427 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 00:23:27.435 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 00:23:27.435 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：9 ms -------------
2021-04-16 00:23:27.626 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:27.626 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 00:23:27.626 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 00:23:27.626 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:27.626 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 00:23:27.630 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 00:23:27.630 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:23:28.434 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:28.435 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:23:28.436 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:23:28.436 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:28.436 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:23:28.447 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:23:28.447 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：13 ms -------------
2021-04-16 00:23:28.661 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:28.662 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:23:28.662 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:23:28.662 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:28.662 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:23:28.666 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:23:28.666 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:23:30.477 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:30.477 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:23:30.478 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:23:30.479 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:30.479 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":2,"size":5}]
2021-04-16 00:23:30.485 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},{"description":" python,2天就够了","docCount":0,"id":36776384114331648,"name":"2天学会python","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:23:30.485 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:23:31.790 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:31.791 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:23:31.791 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:23:31.791 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:31.791 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:23:31.795 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:23:31.796 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:23:33.752 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:33.752 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/logout/37918735939538944 GET
2021-04-16 00:23:33.753 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.logout
2021-04-16 00:23:33.753 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:33.753 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: ["37918735939538944"]
2021-04-16 00:23:33.793 INFO  blog.controller.UserController                    :155  [32m                  [0;39m 从 redis 中删除 TOKEN
2021-04-16 00:23:33.794 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"success":true}
2021-04-16 00:23:33.794 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：42 ms -------------
2021-04-16 00:23:37.625 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:37.626 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:23:37.626 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:23:37.626 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:37.626 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:23:37.633 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:23:37.633 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:23:38.791 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:38.791 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 00:23:38.791 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 00:23:38.792 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:38.792 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 00:23:38.797 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 00:23:38.797 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:23:39.025 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:39.025 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 00:23:39.026 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 00:23:39.026 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:39.026 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 00:23:39.034 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 00:23:39.034 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：9 ms -------------
2021-04-16 00:23:49.703 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:49.703 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 00:23:49.704 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 00:23:49.704 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:49.704 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 00:23:49.709 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 00:23:49.710 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 00:23:50.137 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:50.138 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 00:23:50.138 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 00:23:50.138 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:50.138 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 00:23:50.141 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 00:23:50.141 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:23:51.349 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:51.350 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:23:51.350 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:23:51.351 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:51.351 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:23:51.358 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:23:51.358 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：9 ms -------------
2021-04-16 00:23:51.608 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:51.608 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:23:51.608 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:23:51.609 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:51.609 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:23:51.612 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:23:51.612 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:23:53.772 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:53.773 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:23:53.773 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:23:53.774 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:53.774 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:23:53.783 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:23:53.783 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：11 ms -------------
2021-04-16 00:23:54.009 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:23:54.009 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:23:54.009 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:23:54.009 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:23:54.010 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:23:54.013 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:23:54.014 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:28:33.855 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:28:34.140 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:33:34.283 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:33:34.357 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:35:21.201 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:35:21.204 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:35:21.204 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:35:21.204 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:35:21.205 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:35:21.222 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:35:21.222 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：21 ms -------------
2021-04-16 00:35:21.709 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:35:21.709 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:35:21.710 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:35:21.710 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:35:21.710 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:35:21.714 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:35:21.714 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:35:24.813 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:35:24.814 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:35:24.814 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:35:24.814 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:35:24.814 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":2,"size":4}]
2021-04-16 00:35:24.819 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0},{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},{"description":" python,2天就够了","docCount":0,"id":36776384114331648,"name":"2天学会python","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:35:24.819 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:35:26.088 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:35:26.088 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:35:26.089 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:35:26.089 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:35:26.089 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:35:26.089 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:35:26.089 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:35:26.089 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:35:26.089 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:35:26.089 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:35:26.092 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:35:26.092 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是<font color=\"blue\">不满足区分函数重载的条件</font>，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:35:26.092 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:35:26.092 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:36:30.966 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:36:30.966 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:36:30.967 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:36:30.967 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:36:30.967 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:36:30.967 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:36:30.968 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:36:30.968 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:36:30.968 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:36:30.968 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:36:30.973 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:36:30.973 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是<font color=\"blue\">不满足区分函数重载的条件</font>，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:36:30.973 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 00:36:30.973 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 00:36:36.353 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:36:36.353 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:36:36.354 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:36:36.354 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:36:36.354 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:36:36.354 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:36:36.354 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:36:36.354 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:36:36.355 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:36:36.355 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:36:36.357 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:36:36.357 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是<font color=\"blue\">不满足区分函数重载的条件</font>，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:36:36.358 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:36:36.358 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:37:01.025 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:37:01.025 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:37:01.025 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:37:01.025 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:37:01.025 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:37:01.026 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:37:01.026 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:37:01.026 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:37:01.026 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:37:01.026 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:37:01.028 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:37:01.029 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:37:01.029 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是<font color=\"blue\">不满足区分函数重载的条件</font>，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:37:01.029 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:38:34.331 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:38:34.331 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:38:34.332 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:38:34.332 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:38:34.332 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:38:34.339 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:38:34.339 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:38:34.384 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:38:34.639 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:38:36.771 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:38:36.772 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:38:36.772 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:38:36.772 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:38:36.772 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:38:36.772 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:38:36.772 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:38:36.772 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:38:36.772 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:38:36.772 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:38:36.774 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:38:36.774 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：2 ms -------------
2021-04-16 00:38:36.776 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<blockquote>争做国内使用体验最好的开源 Web 富文本编辑器！</blockquote><h1>为何选择 wangEditor</h1><ul><li>简洁、轻量级、<a href=\"https://doc.wangeditor.com/\">文档</a>齐全</li><li>万星项目&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/releases\">Github Star 1w+</a></li><li>npm 周下载量 1w+</li><li>CDN 月下载量百万+（来自&nbsp;<a href=\"https://www.jsdelivr.com/package/npm/wangeditor\">jsdelivr</a>）</li><li>QQ 群及时答疑</li><li><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">开源团队</a>维护，非个人单兵作战</li></ul><h1>初见</h1><p>npm 安装&nbsp;<code>npm i wangeditor --save</code>&nbsp;，几行代码即可创建一个编辑器。</p><pre><code>import E from 'wangeditor'\nconst editor = new E('#div1')\neditor.create()</code></pre><p>更多使用配置，请阅读<a href=\"https://doc.wangeditor.com/\">使用文档</a>。</p><h1>demo</h1><p>在线体验 demo 可到&nbsp;<a href=\"https://codepen.io/collection/DNmPQV\">codepen.io/collection/DNmPQV</a>&nbsp;。</p><p>注意，如果打不开，可以去查看&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/tree/master/examples\">github examples</a>&nbsp;的源码。</p><h1>浏览器兼容性</h1><ul><li>兼容主流 PC 浏览器，IE11+</li><li>不支持移动端和 ipad</li></ul><h1>遇到问题</h1><ul><li>加入 QQ 群：164999061(人已满)，710646022(人已满)，901247714</li><li><a href=\"https://github.com/wangeditor-team/wangEditor/issues\" target=\"_blank\">提交问题和建议</a></li></ul><h1>贡献代码</h1><p>欢迎非团队成员贡献代码，提交 Pull Request，请一定参考<a href=\"https://github.com/wangeditor-team/wangEditor/blob/master/docs/contribution.md\" target=\"_blank\">贡献代码流程</a>。</p><h1>谁在维护</h1><p>wangEditor 现有一个开源团队在维护，团队可以保证答疑、bug 修复和迭代效率。</p><p><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">查看开发团队，或想加入开发团队</a></p><h1>为我们点赞</h1><p>如果你感觉有收获，欢迎给我打赏，以激励我们更多输出优质开源内容。</p><p><img src=\"https://www.wangeditor.com/imgs/ali-pay.jpeg\"/>&nbsp;<img src=\"https://www.wangeditor.com/imgs/wechat-pay.jpeg\"/></p><p><br/></p>","success":true}
2021-04-16 00:38:36.776 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:38:39.181 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:38:39.182 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:38:39.182 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:38:39.182 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:38:39.182 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:38:39.189 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:38:39.190 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：9 ms -------------
2021-04-16 00:38:39.625 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:38:39.625 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:38:39.626 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:38:39.626 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:38:39.626 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:38:39.631 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:38:39.631 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:38:42.278 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:38:42.278 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:38:42.278 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:38:42.279 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:38:42.279 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":2,"size":4}]
2021-04-16 00:38:42.284 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0},{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},{"description":" python,2天就够了","docCount":0,"id":36776384114331648,"name":"2天学会python","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:38:42.285 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 00:38:43.545 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:38:43.547 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:38:43.566 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:38:43.567 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:38:43.568 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:38:43.568 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:38:43.568 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:38:43.568 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:38:43.569 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:38:43.569 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:38:43.571 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:38:43.571 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是<font color=\"blue\">不满足区分函数重载的条件</font>，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:38:43.572 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：27 ms -------------
2021-04-16 00:38:43.572 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：25 ms -------------
2021-04-16 00:40:21.106 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:40:21.106 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:40:21.114 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:40:21.114 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:40:21.115 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:40:21.115 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:40:21.115 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:40:21.115 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:40:21.115 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:40:21.115 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:40:21.137 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是<font color=\"blue\">不满足区分函数重载的条件</font>，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:40:21.137 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：31 ms -------------
2021-04-16 00:40:21.137 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:40:21.137 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：31 ms -------------
2021-04-16 00:41:11.472 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:41:11.472 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:41:11.472 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:41:11.472 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:41:11.472 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:41:11.472 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:41:11.473 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:41:11.473 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:41:11.473 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:41:11.473 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:41:11.475 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:41:11.475 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是<font color=\"blue\">不满足区分函数重载的条件</font>，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:41:11.475 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:41:11.475 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:41:33.558 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:41:33.558 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:41:33.559 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:41:33.559 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:41:33.559 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:41:33.559 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:41:33.559 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:41:33.559 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:41:33.559 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:41:33.559 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:41:33.561 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:41:33.561 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:41:33.568 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是<font color=\"blue\">不满足区分函数重载的条件</font>，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:41:33.569 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：11 ms -------------
2021-04-16 00:42:46.438 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:42:46.438 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:42:46.438 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:42:46.438 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:42:46.438 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:42:46.438 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:42:46.439 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:42:46.439 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:42:46.439 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:42:46.439 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:42:46.441 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:42:46.441 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:42:46.442 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是==不满足区分函数重载的条件==，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:42:46.442 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:43:23.150 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:23.151 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:43:23.151 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:43:23.151 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:23.152 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:43:23.169 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:43:23.169 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：19 ms -------------
2021-04-16 00:43:23.673 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:23.673 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:43:23.673 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:43:23.673 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:23.674 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:43:23.677 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:43:23.678 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:43:25.121 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:25.121 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:25.121 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/2 GET
2021-04-16 00:43:25.121 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/2 GET
2021-04-16 00:43:25.121 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:43:25.121 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:43:25.122 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:25.122 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:25.122 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [2]
2021-04-16 00:43:25.122 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [2]
2021-04-16 00:43:25.124 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:43:25.125 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:43:25.128 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<p><span style=\"font-size: 2em;\">第二章 物理层</span><br/></p><h2>2.1 物理层与物理协议的基本概念</h2><h3>2.1.1 物理层的基本服务功能</h3><ul><li><p>设置物理层的目的： P59</p><blockquote><p>屏蔽物理层采用的传输介质（所以传输介质，如双绞线，不是物理层） 、通信设备与通信技术的差异性，使数据链路层只需要考虑数据链路层的服务，二不需要考虑物理层的功能的具体是使用了那种传输介质、通信设备与技术实现。</p><p>物理层屏蔽硬件，提供接口，所以物理层类似于OS，而不是硬件层面</p><h3>2.1.2 物理层协议的类型</h3><p>。。。</p><h3>2.1.3 物理层向数据链路层提供的服务</h3><p>物理层传输的是比特</p><p>但是要注意</p><p><strong>传输介质</strong>不可能传输比特😂，传输的是电信号</p><p>物理层传输的单位和传输介质中传输的东西，不是同一个东西</p><p><br/></p></blockquote></li></ul><h2>2.2 数据通信的基本概念</h2><p>这里先把后面要讲的东西做一个概述：</p><blockquote><p>数字信号、模拟信号  以及传输方式：(重要)</p><p><img alt=\"image-20200923104828592\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923104828592.png\"/></p><p><img alt=\"image-20200923105354030\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923105354030.png\"/></p></blockquote><h3>2.2.1 信息、数据与信号</h3><ul><li><p>信息、数据、信号基本概念：</p><blockquote><p>信息：数据，图像，声音...</p><p>数据：信息转换成的二进制代码</p><p>信号：数据的二进制代码转换成的电平或频率变化的信号</p></blockquote><h3>2.2.2 数据通信的方式</h3><p>P62</p><h3>2.2.3 传输介质类型与特性</h3><p>P66</p><h3>2.2.4 数据编码分类</h3><p>p73</p><p>数据与数据编码方式：</p><blockquote><p><img alt=\"image-20200923091601118\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923091601118.png\"/></p></blockquote></li></ul><h2>2.3 频带传输技术</h2><h3>2.3.2 模拟信号编码方式</h3><ul><li><p>模拟数据信号的编码方式：数字信道在模拟信道上传输的方式</p><blockquote><p><img alt=\"image-20200923092206526\" src=\"file:///Users/faro_z/Library/Application Support/typora-user-images/image-20200923092206526.png?lastModify=1618289237\"/></p><p>相对编码方式比绝对编码方式 抗干扰能力更强，因为：</p></blockquote><h3>2.3.3 波特率的定义</h3><p>定义：P76</p><blockquote><p>调制速率 （用B表示）</p><p>波特率描述的是码元传输的速率</p><p>波特率与比特率(S) 的关系：S=log<sub>2</sub>k * B 会考</p><p><br/></p><h2>2.4 基带传输技术（数字信号数字信道传输）</h2><h3>2.4.1 基带传输的定义</h3><p>数字信号在数字信道的传输，（与上面频带传输区分开来，频带传输是数字信道在模拟信道上传输的方式）</p><p><br/></p><h3>2.4.2 数字数据编码方式</h3><p>P77</p><p>非归零码：</p><p>曼彻斯特编码：P77 (绝对位移)</p><blockquote><p><img alt=\"image-20200923101107175\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923101107175.png\"/></p></blockquote><p>差分曼彻斯特编码：P78（相对位移）</p><blockquote><p>![image-20200923101759678](https://gitee.com/faro/images/raw/master/img/image-20200923101759678.png)</p></blockquote><p>差分曼彻斯特编码可靠的原因：</p><blockquote><p><strong>因为其将 同步信号 从 编码信号(0 1) 中分离出来</strong>(基本原因)</p></blockquote><h3>2.4.3 脉冲编码调制方式（模拟信号数字信道传输）</h3><ul><li><p>调制器，曼彻斯特编码器与PCM编码器比较</p><blockquote><p><img src=\"https://gitee.com/faro/images/raw/master/img/image-20200923105354030.png\"/></p></blockquote></li></ul><p><br/></p><h3>2.4.4 比特率的定义</h3><p>。。。P80</p><p><br/></p><h3>2.4.5 ..</h3><p><br/></p><p><br/></p><h3>2.4.5 奈奎斯特准则和香浓定理</h3><p>P81</p><ul><li><p>奈奎斯特：</p></li></ul><blockquote><p><br/></p></blockquote><h2>2.5 多路复用技术</h2><ul><li><p>同步时分多路复用</p><blockquote><p><img alt=\"image-20200927081943218\" src=\"file:///Users/faro_z/Library/Application Support/typora-user-images/image-20200927081943218.png?lastModify=1618289237\"/></p></blockquote></li></ul></blockquote></li></ul>","success":true}
2021-04-16 00:43:25.129 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:43:27.701 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:27.701 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:27.702 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/2 GET
2021-04-16 00:43:27.702 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/2 GET
2021-04-16 00:43:27.702 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:43:27.702 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:43:27.702 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:27.702 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:27.703 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [2]
2021-04-16 00:43:27.703 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [2]
2021-04-16 00:43:27.704 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:43:27.704 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<p><span style=\"font-size: 2em;\">第二章 物理层</span><br/></p><h2>2.1 物理层与物理协议的基本概念</h2><h3>2.1.1 物理层的基本服务功能</h3><ul><li><p>设置物理层的目的： P59</p><blockquote><p>屏蔽物理层采用的传输介质（所以传输介质，如双绞线，不是物理层） 、通信设备与通信技术的差异性，使数据链路层只需要考虑数据链路层的服务，二不需要考虑物理层的功能的具体是使用了那种传输介质、通信设备与技术实现。</p><p>物理层屏蔽硬件，提供接口，所以物理层类似于OS，而不是硬件层面</p><h3>2.1.2 物理层协议的类型</h3><p>。。。</p><h3>2.1.3 物理层向数据链路层提供的服务</h3><p>物理层传输的是比特</p><p>但是要注意</p><p><strong>传输介质</strong>不可能传输比特😂，传输的是电信号</p><p>物理层传输的单位和传输介质中传输的东西，不是同一个东西</p><p><br/></p></blockquote></li></ul><h2>2.2 数据通信的基本概念</h2><p>这里先把后面要讲的东西做一个概述：</p><blockquote><p>数字信号、模拟信号  以及传输方式：(重要)</p><p><img alt=\"image-20200923104828592\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923104828592.png\"/></p><p><img alt=\"image-20200923105354030\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923105354030.png\"/></p></blockquote><h3>2.2.1 信息、数据与信号</h3><ul><li><p>信息、数据、信号基本概念：</p><blockquote><p>信息：数据，图像，声音...</p><p>数据：信息转换成的二进制代码</p><p>信号：数据的二进制代码转换成的电平或频率变化的信号</p></blockquote><h3>2.2.2 数据通信的方式</h3><p>P62</p><h3>2.2.3 传输介质类型与特性</h3><p>P66</p><h3>2.2.4 数据编码分类</h3><p>p73</p><p>数据与数据编码方式：</p><blockquote><p><img alt=\"image-20200923091601118\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923091601118.png\"/></p></blockquote></li></ul><h2>2.3 频带传输技术</h2><h3>2.3.2 模拟信号编码方式</h3><ul><li><p>模拟数据信号的编码方式：数字信道在模拟信道上传输的方式</p><blockquote><p><img alt=\"image-20200923092206526\" src=\"file:///Users/faro_z/Library/Application Support/typora-user-images/image-20200923092206526.png?lastModify=1618289237\"/></p><p>相对编码方式比绝对编码方式 抗干扰能力更强，因为：</p></blockquote><h3>2.3.3 波特率的定义</h3><p>定义：P76</p><blockquote><p>调制速率 （用B表示）</p><p>波特率描述的是码元传输的速率</p><p>波特率与比特率(S) 的关系：S=log<sub>2</sub>k * B 会考</p><p><br/></p><h2>2.4 基带传输技术（数字信号数字信道传输）</h2><h3>2.4.1 基带传输的定义</h3><p>数字信号在数字信道的传输，（与上面频带传输区分开来，频带传输是数字信道在模拟信道上传输的方式）</p><p><br/></p><h3>2.4.2 数字数据编码方式</h3><p>P77</p><p>非归零码：</p><p>曼彻斯特编码：P77 (绝对位移)</p><blockquote><p><img alt=\"image-20200923101107175\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923101107175.png\"/></p></blockquote><p>差分曼彻斯特编码：P78（相对位移）</p><blockquote><p>![image-20200923101759678](https://gitee.com/faro/images/raw/master/img/image-20200923101759678.png)</p></blockquote><p>差分曼彻斯特编码可靠的原因：</p><blockquote><p><strong>因为其将 同步信号 从 编码信号(0 1) 中分离出来</strong>(基本原因)</p></blockquote><h3>2.4.3 脉冲编码调制方式（模拟信号数字信道传输）</h3><ul><li><p>调制器，曼彻斯特编码器与PCM编码器比较</p><blockquote><p><img src=\"https://gitee.com/faro/images/raw/master/img/image-20200923105354030.png\"/></p></blockquote></li></ul><p><br/></p><h3>2.4.4 比特率的定义</h3><p>。。。P80</p><p><br/></p><h3>2.4.5 ..</h3><p><br/></p><p><br/></p><h3>2.4.5 奈奎斯特准则和香浓定理</h3><p>P81</p><ul><li><p>奈奎斯特：</p></li></ul><blockquote><p><br/></p></blockquote><h2>2.5 多路复用技术</h2><ul><li><p>同步时分多路复用</p><blockquote><p><img alt=\"image-20200927081943218\" src=\"file:///Users/faro_z/Library/Application Support/typora-user-images/image-20200927081943218.png?lastModify=1618289237\"/></p></blockquote></li></ul></blockquote></li></ul>","success":true}
2021-04-16 00:43:27.704 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:43:27.705 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:43:34.684 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:43:34.870 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:43:40.077 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:40.078 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:43:40.079 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:43:40.079 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:40.080 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:43:40.091 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:43:40.091 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：14 ms -------------
2021-04-16 00:43:40.610 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:40.610 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:43:40.610 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:43:40.610 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:40.611 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:43:40.614 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:43:40.614 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:43:41.791 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:41.791 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:41.791 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/2 GET
2021-04-16 00:43:41.792 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/2 GET
2021-04-16 00:43:41.792 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:43:41.792 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:43:41.792 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:41.792 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:41.792 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [2]
2021-04-16 00:43:41.792 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [2]
2021-04-16 00:43:41.794 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:43:41.794 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<p><span style=\"font-size: 2em;\">第二章 物理层</span><br/></p><h2>2.1 物理层与物理协议的基本概念</h2><h3>2.1.1 物理层的基本服务功能</h3><ul><li><p>设置物理层的目的： P59</p><blockquote><p>屏蔽物理层采用的传输介质（所以传输介质，如双绞线，不是物理层） 、通信设备与通信技术的差异性，使数据链路层只需要考虑数据链路层的服务，二不需要考虑物理层的功能的具体是使用了那种传输介质、通信设备与技术实现。</p><p>物理层屏蔽硬件，提供接口，所以物理层类似于OS，而不是硬件层面</p><h3>2.1.2 物理层协议的类型</h3><p>。。。</p><h3>2.1.3 物理层向数据链路层提供的服务</h3><p>物理层传输的是比特</p><p>但是要注意</p><p><strong>传输介质</strong>不可能传输比特😂，传输的是电信号</p><p>物理层传输的单位和传输介质中传输的东西，不是同一个东西</p><p><br/></p></blockquote></li></ul><h2>2.2 数据通信的基本概念</h2><p>这里先把后面要讲的东西做一个概述：</p><blockquote><p>数字信号、模拟信号  以及传输方式：(重要)</p><p><img alt=\"image-20200923104828592\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923104828592.png\"/></p><p><img alt=\"image-20200923105354030\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923105354030.png\"/></p></blockquote><h3>2.2.1 信息、数据与信号</h3><ul><li><p>信息、数据、信号基本概念：</p><blockquote><p>信息：数据，图像，声音...</p><p>数据：信息转换成的二进制代码</p><p>信号：数据的二进制代码转换成的电平或频率变化的信号</p></blockquote><h3>2.2.2 数据通信的方式</h3><p>P62</p><h3>2.2.3 传输介质类型与特性</h3><p>P66</p><h3>2.2.4 数据编码分类</h3><p>p73</p><p>数据与数据编码方式：</p><blockquote><p><img alt=\"image-20200923091601118\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923091601118.png\"/></p></blockquote></li></ul><h2>2.3 频带传输技术</h2><h3>2.3.2 模拟信号编码方式</h3><ul><li><p>模拟数据信号的编码方式：数字信道在模拟信道上传输的方式</p><blockquote><p><img alt=\"image-20200923092206526\" src=\"file:///Users/faro_z/Library/Application Support/typora-user-images/image-20200923092206526.png?lastModify=1618289237\"/></p><p>相对编码方式比绝对编码方式 抗干扰能力更强，因为：</p></blockquote><h3>2.3.3 波特率的定义</h3><p>定义：P76</p><blockquote><p>调制速率 （用B表示）</p><p>波特率描述的是码元传输的速率</p><p>波特率与比特率(S) 的关系：S=log<sub>2</sub>k * B 会考</p><p><br/></p><h2>2.4 基带传输技术（数字信号数字信道传输）</h2><h3>2.4.1 基带传输的定义</h3><p>数字信号在数字信道的传输，（与上面频带传输区分开来，频带传输是数字信道在模拟信道上传输的方式）</p><p><br/></p><h3>2.4.2 数字数据编码方式</h3><p>P77</p><p>非归零码：</p><p>曼彻斯特编码：P77 (绝对位移)</p><blockquote><p><img alt=\"image-20200923101107175\" src=\"https://gitee.com/faro/images/raw/master/img/image-20200923101107175.png\"/></p></blockquote><p>差分曼彻斯特编码：P78（相对位移）</p><blockquote><p>![image-20200923101759678](https://gitee.com/faro/images/raw/master/img/image-20200923101759678.png)</p></blockquote><p>差分曼彻斯特编码可靠的原因：</p><blockquote><p><strong>因为其将 同步信号 从 编码信号(0 1) 中分离出来</strong>(基本原因)</p></blockquote><h3>2.4.3 脉冲编码调制方式（模拟信号数字信道传输）</h3><ul><li><p>调制器，曼彻斯特编码器与PCM编码器比较</p><blockquote><p><img src=\"https://gitee.com/faro/images/raw/master/img/image-20200923105354030.png\"/></p></blockquote></li></ul><p><br/></p><h3>2.4.4 比特率的定义</h3><p>。。。P80</p><p><br/></p><h3>2.4.5 ..</h3><p><br/></p><p><br/></p><h3>2.4.5 奈奎斯特准则和香浓定理</h3><p>P81</p><ul><li><p>奈奎斯特：</p></li></ul><blockquote><p><br/></p></blockquote><h2>2.5 多路复用技术</h2><ul><li><p>同步时分多路复用</p><blockquote><p><img alt=\"image-20200927081943218\" src=\"file:///Users/faro_z/Library/Application Support/typora-user-images/image-20200927081943218.png?lastModify=1618289237\"/></p></blockquote></li></ul></blockquote></li></ul>","success":true}
2021-04-16 00:43:41.794 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:43:41.794 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:43:43.216 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:43.225 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:43:43.226 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:43:43.226 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:43.227 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:43:43.230 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:43:43.231 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：15 ms -------------
2021-04-16 00:43:44.675 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:44.675 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:44.675 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:43:44.675 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:43:44.675 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:43:44.675 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:43:44.675 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:44.675 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:44.675 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:43:44.676 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:43:44.677 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:43:44.677 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<blockquote>争做国内使用体验最好的开源 Web 富文本编辑器！</blockquote><h1>为何选择 wangEditor</h1><ul><li>简洁、轻量级、<a href=\"https://doc.wangeditor.com/\">文档</a>齐全</li><li>万星项目&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/releases\">Github Star 1w+</a></li><li>npm 周下载量 1w+</li><li>CDN 月下载量百万+（来自&nbsp;<a href=\"https://www.jsdelivr.com/package/npm/wangeditor\">jsdelivr</a>）</li><li>QQ 群及时答疑</li><li><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">开源团队</a>维护，非个人单兵作战</li></ul><h1>初见</h1><p>npm 安装&nbsp;<code>npm i wangeditor --save</code>&nbsp;，几行代码即可创建一个编辑器。</p><pre><code>import E from 'wangeditor'\nconst editor = new E('#div1')\neditor.create()</code></pre><p>更多使用配置，请阅读<a href=\"https://doc.wangeditor.com/\">使用文档</a>。</p><h1>demo</h1><p>在线体验 demo 可到&nbsp;<a href=\"https://codepen.io/collection/DNmPQV\">codepen.io/collection/DNmPQV</a>&nbsp;。</p><p>注意，如果打不开，可以去查看&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/tree/master/examples\">github examples</a>&nbsp;的源码。</p><h1>浏览器兼容性</h1><ul><li>兼容主流 PC 浏览器，IE11+</li><li>不支持移动端和 ipad</li></ul><h1>遇到问题</h1><ul><li>加入 QQ 群：164999061(人已满)，710646022(人已满)，901247714</li><li><a href=\"https://github.com/wangeditor-team/wangEditor/issues\" target=\"_blank\">提交问题和建议</a></li></ul><h1>贡献代码</h1><p>欢迎非团队成员贡献代码，提交 Pull Request，请一定参考<a href=\"https://github.com/wangeditor-team/wangEditor/blob/master/docs/contribution.md\" target=\"_blank\">贡献代码流程</a>。</p><h1>谁在维护</h1><p>wangEditor 现有一个开源团队在维护，团队可以保证答疑、bug 修复和迭代效率。</p><p><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">查看开发团队，或想加入开发团队</a></p><h1>为我们点赞</h1><p>如果你感觉有收获，欢迎给我打赏，以激励我们更多输出优质开源内容。</p><p><img src=\"https://www.wangeditor.com/imgs/ali-pay.jpeg\"/>&nbsp;<img src=\"https://www.wangeditor.com/imgs/wechat-pay.jpeg\"/></p><p><br/></p>","success":true}
2021-04-16 00:43:44.677 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：2 ms -------------
2021-04-16 00:43:44.677 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：2 ms -------------
2021-04-16 00:43:46.820 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:46.821 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:46.821 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:43:46.821 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:43:46.822 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:43:46.822 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:43:46.822 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:46.822 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:46.822 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:43:46.822 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:43:46.824 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<blockquote>争做国内使用体验最好的开源 Web 富文本编辑器！</blockquote><h1>为何选择 wangEditor</h1><ul><li>简洁、轻量级、<a href=\"https://doc.wangeditor.com/\">文档</a>齐全</li><li>万星项目&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/releases\">Github Star 1w+</a></li><li>npm 周下载量 1w+</li><li>CDN 月下载量百万+（来自&nbsp;<a href=\"https://www.jsdelivr.com/package/npm/wangeditor\">jsdelivr</a>）</li><li>QQ 群及时答疑</li><li><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">开源团队</a>维护，非个人单兵作战</li></ul><h1>初见</h1><p>npm 安装&nbsp;<code>npm i wangeditor --save</code>&nbsp;，几行代码即可创建一个编辑器。</p><pre><code>import E from 'wangeditor'\nconst editor = new E('#div1')\neditor.create()</code></pre><p>更多使用配置，请阅读<a href=\"https://doc.wangeditor.com/\">使用文档</a>。</p><h1>demo</h1><p>在线体验 demo 可到&nbsp;<a href=\"https://codepen.io/collection/DNmPQV\">codepen.io/collection/DNmPQV</a>&nbsp;。</p><p>注意，如果打不开，可以去查看&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/tree/master/examples\">github examples</a>&nbsp;的源码。</p><h1>浏览器兼容性</h1><ul><li>兼容主流 PC 浏览器，IE11+</li><li>不支持移动端和 ipad</li></ul><h1>遇到问题</h1><ul><li>加入 QQ 群：164999061(人已满)，710646022(人已满)，901247714</li><li><a href=\"https://github.com/wangeditor-team/wangEditor/issues\" target=\"_blank\">提交问题和建议</a></li></ul><h1>贡献代码</h1><p>欢迎非团队成员贡献代码，提交 Pull Request，请一定参考<a href=\"https://github.com/wangeditor-team/wangEditor/blob/master/docs/contribution.md\" target=\"_blank\">贡献代码流程</a>。</p><h1>谁在维护</h1><p>wangEditor 现有一个开源团队在维护，团队可以保证答疑、bug 修复和迭代效率。</p><p><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">查看开发团队，或想加入开发团队</a></p><h1>为我们点赞</h1><p>如果你感觉有收获，欢迎给我打赏，以激励我们更多输出优质开源内容。</p><p><img src=\"https://www.wangeditor.com/imgs/ali-pay.jpeg\"/>&nbsp;<img src=\"https://www.wangeditor.com/imgs/wechat-pay.jpeg\"/></p><p><br/></p>","success":true}
2021-04-16 00:43:46.824 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:43:46.825 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:43:46.825 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:43:47.881 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:47.881 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:43:47.881 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:43:47.881 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:47.882 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:43:47.889 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:43:47.889 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:43:51.001 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:51.002 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:43:51.003 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:43:51.004 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:51.004 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":2,"size":4}]
2021-04-16 00:43:51.008 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0},{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},{"description":" python,2天就够了","docCount":0,"id":36776384114331648,"name":"2天学会python","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:43:51.009 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:43:52.099 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:52.099 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:43:52.100 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:43:52.100 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:43:52.100 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:52.100 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:43:52.100 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:43:52.100 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:43:52.100 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:43:52.100 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:43:52.102 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:43:52.102 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是==不满足区分函数重载的条件==，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:43:52.102 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:43:52.102 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：2 ms -------------
2021-04-16 00:44:01.308 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:44:01.308 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:44:01.308 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:44:01.309 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:44:01.309 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:44:01.317 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:44:01.318 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：10 ms -------------
2021-04-16 00:44:03.050 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:44:03.051 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:44:03.052 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:44:03.052 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:44:03.052 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:44:03.052 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:44:03.052 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:44:03.052 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:44:03.053 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:44:03.053 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:44:03.054 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:44:03.054 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:44:03.055 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<blockquote>争做国内使用体验最好的开源 Web 富文本编辑器！</blockquote><h1>为何选择 wangEditor</h1><ul><li>简洁、轻量级、<a href=\"https://doc.wangeditor.com/\">文档</a>齐全</li><li>万星项目&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/releases\">Github Star 1w+</a></li><li>npm 周下载量 1w+</li><li>CDN 月下载量百万+（来自&nbsp;<a href=\"https://www.jsdelivr.com/package/npm/wangeditor\">jsdelivr</a>）</li><li>QQ 群及时答疑</li><li><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">开源团队</a>维护，非个人单兵作战</li></ul><h1>初见</h1><p>npm 安装&nbsp;<code>npm i wangeditor --save</code>&nbsp;，几行代码即可创建一个编辑器。</p><pre><code>import E from 'wangeditor'\nconst editor = new E('#div1')\neditor.create()</code></pre><p>更多使用配置，请阅读<a href=\"https://doc.wangeditor.com/\">使用文档</a>。</p><h1>demo</h1><p>在线体验 demo 可到&nbsp;<a href=\"https://codepen.io/collection/DNmPQV\">codepen.io/collection/DNmPQV</a>&nbsp;。</p><p>注意，如果打不开，可以去查看&nbsp;<a href=\"https://github.com/wangeditor-team/wangEditor/tree/master/examples\">github examples</a>&nbsp;的源码。</p><h1>浏览器兼容性</h1><ul><li>兼容主流 PC 浏览器，IE11+</li><li>不支持移动端和 ipad</li></ul><h1>遇到问题</h1><ul><li>加入 QQ 群：164999061(人已满)，710646022(人已满)，901247714</li><li><a href=\"https://github.com/wangeditor-team/wangEditor/issues\" target=\"_blank\">提交问题和建议</a></li></ul><h1>贡献代码</h1><p>欢迎非团队成员贡献代码，提交 Pull Request，请一定参考<a href=\"https://github.com/wangeditor-team/wangEditor/blob/master/docs/contribution.md\" target=\"_blank\">贡献代码流程</a>。</p><h1>谁在维护</h1><p>wangEditor 现有一个开源团队在维护，团队可以保证答疑、bug 修复和迭代效率。</p><p><a href=\"https://doc.wangeditor.com/#%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98\">查看开发团队，或想加入开发团队</a></p><h1>为我们点赞</h1><p>如果你感觉有收获，欢迎给我打赏，以激励我们更多输出优质开源内容。</p><p><img src=\"https://www.wangeditor.com/imgs/ali-pay.jpeg\"/>&nbsp;<img src=\"https://www.wangeditor.com/imgs/wechat-pay.jpeg\"/></p><p><br/></p>","success":true}
2021-04-16 00:44:03.055 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:45:06.961 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:45:06.962 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:45:06.962 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:45:06.962 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:45:06.962 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:45:06.962 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:45:06.963 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:45:06.963 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:45:06.963 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:45:06.963 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:45:06.965 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:45:06.965 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:45:06.969 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程\n\n虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。\n\n这次将创建的整个流程记录下来，方便以后的项目搭建。\n\n要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==\n\n如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了\n\n\n\n## 数据库\n\n一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限\n\n\n\n### 1. **连接 admin**\n\n只有 admin 有所有权限\n\n我的数据库 admin 的账户名和密码是：\n\n**账户：**admin\n\n**密码：**123\n\n![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)\n\n\n\n### 2. **新建数据库**\n\n其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号\n\n![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)\n\n### 3. **为这个数据库，专门建一个用户**\n\n开发环境中，就将密码和用户名设置成一样的，这样不会忘记\n\nhost 设置为 localhost\n\n![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)\n\n\n\n### 4. **为这个用户，授予对应数据库的全部权限**\n\n![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)\n\n![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)\n\n### 5. **对当前用户，建立连接**\n\n![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)\n\n\n\n\n\n## 后端\n\n关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。\n\n### 1. 新建 SpringBoot 项目\n\n* 点击 `SpringInitiallizr`，新建项目\n\n![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)\n\n* 选择默认依赖的包\n\n![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)\n\n![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)\n\n![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)\n\n* 选择存放路径\n\n![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)\n\n* 新建完成后，项目目录如下\n\n![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)\n\n\n\n### 2. 更改启动类位置\n\n* 新建 config 包，将启动类放进去\n\n![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)\n\n\n\n* 为启动类添加注解\n\n注解内的信息，是项目名称\n\n```java\n@ComponentScan(\"weixindemo\")\n```\n\n![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)\n\n\n\n### 3. IDEA 数据库配置\n\n* IDEA 连接数据库\n\n![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)\n\n![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)\n\n\n\n* 添加 sql 脚本\n\n新建 sql 文件夹，建立`all.sql`文件\n\n![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)\n\n\n\n我们在 sql 脚本中添加测试用数据，并执行\n\n```sql\n\n# 测试表\ndrop table if exists `test`;\ncreate table `test` (\n  `id` bigint not null comment 'id',\n  `name` varchar(50) comment '名称',\n  `password` varchar(50) comment '密码',\n  primary key (`id`)\n) engine=innodb default charset=utf8mb4 comment='测试';\n\ninsert into `test` (id, name, password) values (1, '测试', 'password');       \n```\n\n可以看到，数据库已建立\n\n![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)\n\n\n\n### 4. 配置 MyBatis\n\n* 在 `resource`文件夹下，新建 `mapper`文件夹\n\n这是用来存放 MyBatis 的实现的\n\n![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)\n\n\n\n* 新建 pojo 包\n\npojo 包用来存放实体类\n\n![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)\n\n\n\n* 在项目下，新建 mapper 包，用来存放接口\n\n![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)\n\n\n\n* 将配置文件后缀改为`.yml`\n\n我个人习惯使用`.yml`进行位置\n\n![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)\n\n\n\n* 添加 `Mybatis`配置\n\n这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&characterEncoding=utf-8\n    username: weixindemo\n    password: weixindemo\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    \n    \n# 整合Mybatis\nmybatis:\n  # ** 表示在mapper下不管有多少文件夹，都可以全部识别\n  mapper-locations: classpath:/mapper/**/*.xml\n  type-aliases-package: weixindemo.pojo\n  #  打印sql相关的日志信息\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)\n\n\n\n* 添加端口配置\n\n因为 vue 也是用的8080端口，我们不能和它重了\n\n```yml\nserver:\n  port: 8880\n```\n\n\n\n* 启动类添加`mapper`接口扫描路径\n\n```java\n@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描\n```\n\n![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)\n\n\n\n### 5. MVC 包建立\n\n我们还要建立 ==service==，==util==，==controller==包\n\n![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)\n\n![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)\n\n\n\n### 5. 测试 Mybatis 配置\n\n配置到这一步，要对之前的配置，进行一个测试\n\n* pojo 中，新建 Test 实体类\n\n![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Test {\n    private Integer id;\n    private String name;\n}\n```\n\n\n\n* mapper 包中，新建 TestMapper 接口\n\n![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)\n\n```java\n@Repository\n@Mapper\npublic interface TestMapper {\n    List<Test> getList();\n}\n```\n\n\n\n* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现\n\n  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)\n\n具体内容，要根据实际项目修改\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace要和接口的位置和名字对应-->\n<mapper namespace=\"weixindemo.mapper.TestMapper\">\n\n    <select id=\"getList\" resultType=\"weixindemo.pojo.Test\">\n        select * from test\n    </select>\n\n</mapper>\n```\n\n![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)\n\n\n\n* 在 service 包下，新建 TestService\n\n![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)\n\n别忘了加上 @Service 注解\n\n```java\n@Service\npublic class TestService {\n\n    @Autowired\n    private TestMapper mapper;\n\n    public List<Test> getList() {\n        return mapper.getList();\n    }\n}\n```\n\n\n\n* 在 controller包下，新建 TestController\n\n![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)\n\n```java\n@RestController\npublic class TestController {\n\n    @Autowired\n    private TestService testService;\n    \n\n    @RequestMapping(\"/test/list\")\n    public List<Test> list() {\n        return testService.getList();\n    }\n\n}\n```\n\n\n\n* 重启项目\n\n\n\n* 新建 http 文件，编写 http 测试脚本，执行\n\n![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)\n\n```http\nGET http://localhost:8880/test/list\nAccept: application/json\n\n###\n```\n\n\n\n最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作\n\n![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)\n\n\n\n### 6. MyBatis 代码生成器\n\n我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的\n\n\n\n* 导入 Maven 依赖\n\n注意，==是放在`plugiuns`下面的==\n\n```xml\n<!-- mybatis generator 自动生成代码插件 -->\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.4.0</version>\n                <configuration>\n                    <configurationFile>src/main/resources/generator/generator-config.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>8.0.22</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n\n\n* 建立代生成器位置\n\npom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`\n\n```xml\n<configurationFile>\n  src/main/resources/generator/generator-config.xml\n</configurationFile>\n```\n\n![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)\n\n\n\n* 代码生成器代码\n\n从`jdbcConnection`开始，别忘了==根据项目进行修改==\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n\n        <!-- 自动检查关键字，为关键字增加反引号 -->\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!--覆盖生成XML文件-->\n        <plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" />\n        <!-- 生成的实体类添加toString()方法 -->\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/>\n\n        <!-- 不生成注释 -->\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"\n                        userId=\"wiki\"\n                        password=\"123456\">\n        </jdbcConnection>\n\n        <!-- domain类的位置 -->\n        <javaModelGenerator targetProject=\"src/main/java\"\n                            targetPackage=\"top.faroz.pojo\"/>\n\n        <!-- mapper xml的位置 -->\n        <sqlMapGenerator targetProject=\"src/main/resources\"\n                         targetPackage=\"mapper\"/>\n\n        <!-- mapper类的位置 -->\n        <javaClientGenerator targetProject=\"src/main/java\"\n                             targetPackage=\"top.faroz.mapper\"\n                             type=\"XMLMAPPER\"/>\n\n        <table tableName=\"demo\" domainObjectName=\"Demo\"/>\n        <!--<table tableName=\"ebook\"/>-->\n        <!--<table tableName=\"category\"/>-->\n        <!--<table tableName=\"doc\"/>-->\n        <!--<table tableName=\"content\"/>-->\n        <!--<table tableName=\"user\"/>-->\n        <!--<table tableName=\"ebook_snapshot\"/>-->\n    </context>\n</generatorConfiguration>\n```\n\n\n\n* 新建一个maven启动项\n\n![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)\n\n![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)\n\n```bash\nmybatis-generator:generate -e\n```\n\n![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)\n\n\n\n### 7. 测试代码生成器\n\n代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表\n\n\n\n* all.sql 添加 demo 表的增加 SQL 语句，并执行\n\n```sql\n# demo列表\ndrop table if exists `demo`;\ncreate table `demo` (\n    `id` bigint not null comment 'id',\n    `name` varchar(50) comment '名称',\n    primary key (`id`)\n) engine=innodb default charset =utf8mb4 comment '测试';\n\ninsert into `demo` (id,name) values(2,'测试2');\n```\n\n\n\n* 在代码生成器最后的部分，填上要生成的表名\n\n![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)\n\n\n\n* 执行\n\n![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)\n\n\n\n* 执行成功，会生成 4 个新文件\n\n![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)\n\n\n\n* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码\n\n```java\n@RestController\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"/demo/list\")\n    public List<Demo> list() {\n        return demoService.getList();\n    }\n}\n```\n\n```java\n@Service\npublic class DemoService {\n\n    @Resource\n    private DemoMapper demoMapper;\n\n    public List<Demo> getList() {\n        List<Demo> list = demoMapper.selectByExample(null);\n        return list;\n    }\n}\n```\n\n\n\n* 添加 demo 的 http 测试脚本\n\n```http\nGET http://localhost:8880/demo/list\nAccept: application/json\n\n###\n```\n\n测试成功，说明我们用代码生成器生成的代码没有问题\n\n![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)\n\n\n\n### 8. 解决前后端跨域问题\n\n虽然现在还没有构建前端项目，但是后面，会出现跨域问题\n\n\n\n* 新建 CorsConfig 类\n\n![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)\n\n\n\n* 代码如下\n\n不用改动，直接用，别忘了加上==@Configuration==注解\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedHeaders(CorsConfiguration.ALL)\n                .allowedMethods(CorsConfiguration.ALL)\n                .allowCredentials(true)\n                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）\n    }\n}\n```\n\n\n\n### 9. 添加雪花算法工具类\n\n雪花算法，用来生成唯一 ID\n\n\n\n* 新建 SnowFlake 工具类\n\n![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)\n\n\n\n* 代码如下\n\n别忘了加上 @Component 注解\n\n```java\n@Component\npublic class SnowFlake {\n    /**\n     * 起始的时间戳\n     */\n    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00\n\n    /**\n     * 每一部分占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12; //序列号占用的位数\n    private final static long MACHINE_BIT = 5;   //机器标识占用的位数\n    private final static long DATACENTER_BIT = 5;//数据中心占用的位数\n\n    /**\n     * 每一部分的最大值\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * 每一部分向左的位移\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId = 1;  //数据中心\n    private long machineId = 1;     //机器标识\n    private long sequence = 0L; //序列号\n    private long lastStmp = -1L;//上一次时间戳\n\n    public SnowFlake() {\n    }\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * 产生下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");\n        }\n\n        if (currStmp == lastStmp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分\n                | datacenterId << DATACENTER_LEFT       //数据中心部分\n                | machineId << MACHINE_LEFT             //机器标识部分\n                | sequence;                             //序列号部分\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    // public static void main(String[] args) throws ParseException {\n    //     // 时间戳\n    //     // System.out.println(System.currentTimeMillis());\n    //     // System.out.println(new Date().getTime());\n    //     //\n    //     // String dateTime = \"2021-01-01 08:00:00\";\n    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n    //     // System.out.println(sdf.parse(dateTime).getTime());\n    //\n    //     SnowFlake snowFlake = new SnowFlake(1, 1);\n    //\n    //     long start = System.currentTimeMillis();\n    //     for (int i = 0; i < 10; i++) {\n    //         System.out.println(snowFlake.nextId());\n    //         System.out.println(System.currentTimeMillis() - start);\n    //     }\n    // }\n\n}\n```\n\n\n\n\n\n### 10. 添加 AOP\n\nAOP 用来打印接口日志，方便后期调试\n\n\n\n* Maven 中引入 fastjson，因为 我们的类中要用\n\n```xml\n <!--fastjson-->\n<dependency>\n  <groupId>com.alibaba</groupId>\n  <artifactId>fastjson</artifactId>\n  <version>1.2.70</version>\n</dependency>\n```\n\n\n\n* Maven 引入 AOP\n\n```xml\n<!--导入aop-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n\n\n* 添加 RequestContext 工具类\n\n这个是后期为了打印 WebSocket 日志的\n\n![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)\n\n```java\npublic class RequestContext implements Serializable {\n    private static ThreadLocal<String> remoteAddr = new ThreadLocal<>();\n\n    public static String getRemoteAddr() {\n        return remoteAddr.get();\n    }\n\n    public static void setRemoteAddr(String remoteAddr) {\n        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);\n    }\n}\n```\n\n\n\n* 新建 aspect 包，并新建 LogAspect 类\n\n![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)\n\n\n\n**LogAspect 代码如下:**\n\n切点的代码，我们要依据项目修改\n\n![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)\n\n```java\n@Aspect\n@Component\npublic class LogAspect {\n    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);\n\n    @Resource\n    private SnowFlake snowFlake;\n\n    /** 定义一个切点 */\n    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")\n    public void controllerPointcut() {}\n\n    // @Resource\n    // private SnowFlake snowFlake;\n\n    @Before(\"controllerPointcut()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n\n        // 增加日志流水号\n        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));\n\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Signature signature = joinPoint.getSignature();\n        String name = signature.getName();\n\n        // 打印请求信息\n        LOG.info(\"------------- 开始 -------------\");\n        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());\n        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);\n        LOG.info(\"远程地址: {}\", request.getRemoteAddr());\n\n        RequestContext.setRemoteAddr(getRemoteIp(request));\n\n        // 拿到所有的参数\n        Object[] args = joinPoint.getArgs();\n        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));\n\n        Object[] arguments  = new Object[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof ServletRequest\n                    || args[i] instanceof ServletResponse\n                    || args[i] instanceof MultipartFile) {\n                continue;\n            }\n            arguments[i] = args[i];\n        }\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));\n    }\n\n    @Around(\"controllerPointcut()\")\n    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = proceedingJoinPoint.proceed();\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));\n        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);\n        return result;\n    }\n\n    /**\n     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP\n     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突\n     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径\n     * @param request\n     * @return\n     */\n    public String getRemoteIp(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n```\n\n\n\n### 11. 解决前后端 Long 精度丢失问题\n\n我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失\n\n\n\n* 配置文件新增 JacksonConfig 类\n\n![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)\n\n\n\n* 代码如下\n\n```java\n@Configuration\npublic class JacksonConfig {\n\n    @Bean\n    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {\n        ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n        SimpleModule simpleModule = new SimpleModule();\n        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        objectMapper.registerModule(simpleModule);\n        return objectMapper;\n    }\n}\n```\n\n\n\n### 12. 新建 req resp 包\n\n我们要将请求与返回包装\n\n![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)\n\n\n\n### 13. CommonResp\n\n为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp\n\n![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)\n\n**代码如下：**\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommonResp<T> {\n    /**\n     * 返回是否成功\n     */\n    private boolean isSuccess=true;\n\n    /**\n     * 返回失败时，返回的错误信息\n     */\n    private String message;\n\n    /**\n     * 返回成功的时候，返回的内容\n     */\n    private T content;\n}\n```\n\n\n\n### 14. 自定义异常\n\n* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`\n\n![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)\n\n\n\n* `BusinessException`代码\n\n```java\npublic class BusinessException extends RuntimeException{\n    private BusinessExceptionCode code;\n\n    public BusinessException (BusinessExceptionCode code) {\n        /**\n         * 父类有个成员变量  private String desc\n         * 需要为这个成员变量赋值\n         */\n        super(code.getDesc());\n        this.code = code;\n    }\n\n    public BusinessExceptionCode getCode() {\n        return code;\n    }\n\n    public void setCode(BusinessExceptionCode code) {\n        this.code = code;\n    }\n\n    /**\n     * 不写入堆栈信息，提高性能\n     */\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n}\n```\n\n\n\n* `BusinessExceptionCode`代码\n\n```java\npublic enum BusinessExceptionCode {\n    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),\n    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),\n    VOTE_REPEAT(\"您已点赞过\"),\n    ;\n\n    private String desc;\n\n    BusinessExceptionCode(String desc) {\n        this.desc = desc;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n}\n```\n\n\n\n\n\n### 13. 统一异常处理\n\n我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp\n\n\n\n* 新建 ControllerExceptionHandler 类\n\n![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)\n\n\n\n* 代码如下\n\nlogger 要根据项目改一下\n\n```java\n/**\n * 统一异常处理、数据预处理等\n * 该类用于捕获系统弹出的异常\n * 将异常包装成一个 CommonResp\n * 从而方便前端调用，显示错误信息\n */\n@ControllerAdvice\npublic class ControllerExceptionHandler {\n    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BindException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BindException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BusinessException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BusinessException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getCode().getDesc());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(Exception e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.error(\"系统异常：\", e);\n        commonResp.setSuccess(false);\n        commonResp.setMessage(\"系统出现异常，请联系管理员\");\n        return commonResp;\n    }\n}\n```\n\n\n\n### 14. 添加日志记录 logback\n\n* 在 resource 下，新建logback-spring.xml 文件\n\n![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)\n\n* 写入内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <!-- 修改一下路径-->\n    <property name=\"PATH\" value=\"./log\"></property>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n</Pattern>\n            <!--<Pattern>%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n</Pattern>-->\n        </encoder>\n    </appender>\n\n    <appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/trace.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/trace.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n\n    <root level=\"TRACE\">\n        <appender-ref ref=\"TRACE_FILE\" />\n    </root>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n\n```\n\n\n\n### 15. 自定义 banner\n\nresources 下新建 banner.txt\n\n![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)\n\n\n\n里面放上自定义 banner\n\n```txt\n ********     **     *******     *******         ********\n/**/////     ****   /**////**   **/////**       //////** \n/**         **//**  /**   /**  **     //**           **  \n/*******   **  //** /*******  /**      /**          **   \n/**////   **********/**///**  /**      /**         **    \n/**      /**//////**/**  //** //**     **         **     \n/**      /**     /**/**   //** //*******   ***** ********\n//       //      // //     //   ///////   ///// //////// \n```\n\n\n\n\n","success":true}
2021-04-16 00:45:06.970 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:46:17.163 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:46:17.164 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:46:17.164 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:46:17.164 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:46:17.164 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:46:17.177 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:46:17.177 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：14 ms -------------
2021-04-16 00:46:17.645 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:46:17.645 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:46:17.645 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:46:17.645 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:46:17.646 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:46:17.649 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:46:17.650 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:46:20.597 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:46:20.597 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:46:20.598 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:46:20.598 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:46:20.599 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":2,"size":4}]
2021-04-16 00:46:20.603 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0},{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},{"description":" python,2天就够了","docCount":0,"id":36776384114331648,"name":"2天学会python","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:46:20.604 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 00:46:21.702 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:46:21.702 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:46:21.702 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:46:21.702 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:46:21.702 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:46:21.702 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:46:21.703 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:46:21.703 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:46:21.703 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:46:21.703 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:46:21.707 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:46:21.707 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是==不满足区分函数重载的条件==，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:46:21.708 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:46:21.708 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:46:30.534 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:46:30.535 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:46:30.536 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:46:30.536 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:46:30.537 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:46:30.545 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:46:30.546 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：12 ms -------------
2021-04-16 00:46:31.049 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:46:31.049 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:46:31.049 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:46:31.049 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:46:31.049 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:46:31.053 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:46:31.053 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:46:32.704 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:46:32.704 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:46:32.705 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:46:32.705 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:46:32.705 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:46:32.705 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:46:32.705 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:46:32.705 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:46:32.705 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:46:32.705 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:46:32.709 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:46:32.709 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:46:32.711 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程\n\n虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。\n\n这次将创建的整个流程记录下来，方便以后的项目搭建。\n\n要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==\n\n如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了\n\n\n\n## 数据库\n\n一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限\n\n\n\n### 1. **连接 admin**\n\n只有 admin 有所有权限\n\n我的数据库 admin 的账户名和密码是：\n\n**账户：**admin\n\n**密码：**123\n\n![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)\n\n\n\n### 2. **新建数据库**\n\n其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号\n\n![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)\n\n### 3. **为这个数据库，专门建一个用户**\n\n开发环境中，就将密码和用户名设置成一样的，这样不会忘记\n\nhost 设置为 localhost\n\n![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)\n\n\n\n### 4. **为这个用户，授予对应数据库的全部权限**\n\n![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)\n\n![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)\n\n### 5. **对当前用户，建立连接**\n\n![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)\n\n\n\n\n\n## 后端\n\n关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。\n\n### 1. 新建 SpringBoot 项目\n\n* 点击 `SpringInitiallizr`，新建项目\n\n![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)\n\n* 选择默认依赖的包\n\n![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)\n\n![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)\n\n![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)\n\n* 选择存放路径\n\n![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)\n\n* 新建完成后，项目目录如下\n\n![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)\n\n\n\n### 2. 更改启动类位置\n\n* 新建 config 包，将启动类放进去\n\n![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)\n\n\n\n* 为启动类添加注解\n\n注解内的信息，是项目名称\n\n```java\n@ComponentScan(\"weixindemo\")\n```\n\n![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)\n\n\n\n### 3. IDEA 数据库配置\n\n* IDEA 连接数据库\n\n![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)\n\n![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)\n\n\n\n* 添加 sql 脚本\n\n新建 sql 文件夹，建立`all.sql`文件\n\n![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)\n\n\n\n我们在 sql 脚本中添加测试用数据，并执行\n\n```sql\n\n# 测试表\ndrop table if exists `test`;\ncreate table `test` (\n  `id` bigint not null comment 'id',\n  `name` varchar(50) comment '名称',\n  `password` varchar(50) comment '密码',\n  primary key (`id`)\n) engine=innodb default charset=utf8mb4 comment='测试';\n\ninsert into `test` (id, name, password) values (1, '测试', 'password');       \n```\n\n可以看到，数据库已建立\n\n![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)\n\n\n\n### 4. 配置 MyBatis\n\n* 在 `resource`文件夹下，新建 `mapper`文件夹\n\n这是用来存放 MyBatis 的实现的\n\n![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)\n\n\n\n* 新建 pojo 包\n\npojo 包用来存放实体类\n\n![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)\n\n\n\n* 在项目下，新建 mapper 包，用来存放接口\n\n![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)\n\n\n\n* 将配置文件后缀改为`.yml`\n\n我个人习惯使用`.yml`进行位置\n\n![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)\n\n\n\n* 添加 `Mybatis`配置\n\n这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&characterEncoding=utf-8\n    username: weixindemo\n    password: weixindemo\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    \n    \n# 整合Mybatis\nmybatis:\n  # ** 表示在mapper下不管有多少文件夹，都可以全部识别\n  mapper-locations: classpath:/mapper/**/*.xml\n  type-aliases-package: weixindemo.pojo\n  #  打印sql相关的日志信息\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)\n\n\n\n* 添加端口配置\n\n因为 vue 也是用的8080端口，我们不能和它重了\n\n```yml\nserver:\n  port: 8880\n```\n\n\n\n* 启动类添加`mapper`接口扫描路径\n\n```java\n@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描\n```\n\n![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)\n\n\n\n### 5. MVC 包建立\n\n我们还要建立 ==service==，==util==，==controller==包\n\n![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)\n\n![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)\n\n\n\n### 5. 测试 Mybatis 配置\n\n配置到这一步，要对之前的配置，进行一个测试\n\n* pojo 中，新建 Test 实体类\n\n![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Test {\n    private Integer id;\n    private String name;\n}\n```\n\n\n\n* mapper 包中，新建 TestMapper 接口\n\n![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)\n\n```java\n@Repository\n@Mapper\npublic interface TestMapper {\n    List<Test> getList();\n}\n```\n\n\n\n* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现\n\n  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)\n\n具体内容，要根据实际项目修改\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace要和接口的位置和名字对应-->\n<mapper namespace=\"weixindemo.mapper.TestMapper\">\n\n    <select id=\"getList\" resultType=\"weixindemo.pojo.Test\">\n        select * from test\n    </select>\n\n</mapper>\n```\n\n![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)\n\n\n\n* 在 service 包下，新建 TestService\n\n![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)\n\n别忘了加上 @Service 注解\n\n```java\n@Service\npublic class TestService {\n\n    @Autowired\n    private TestMapper mapper;\n\n    public List<Test> getList() {\n        return mapper.getList();\n    }\n}\n```\n\n\n\n* 在 controller包下，新建 TestController\n\n![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)\n\n```java\n@RestController\npublic class TestController {\n\n    @Autowired\n    private TestService testService;\n    \n\n    @RequestMapping(\"/test/list\")\n    public List<Test> list() {\n        return testService.getList();\n    }\n\n}\n```\n\n\n\n* 重启项目\n\n\n\n* 新建 http 文件，编写 http 测试脚本，执行\n\n![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)\n\n```http\nGET http://localhost:8880/test/list\nAccept: application/json\n\n###\n```\n\n\n\n最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作\n\n![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)\n\n\n\n### 6. MyBatis 代码生成器\n\n我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的\n\n\n\n* 导入 Maven 依赖\n\n注意，==是放在`plugiuns`下面的==\n\n```xml\n<!-- mybatis generator 自动生成代码插件 -->\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.4.0</version>\n                <configuration>\n                    <configurationFile>src/main/resources/generator/generator-config.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>8.0.22</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n\n\n* 建立代生成器位置\n\npom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`\n\n```xml\n<configurationFile>\n  src/main/resources/generator/generator-config.xml\n</configurationFile>\n```\n\n![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)\n\n\n\n* 代码生成器代码\n\n从`jdbcConnection`开始，别忘了==根据项目进行修改==\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n\n        <!-- 自动检查关键字，为关键字增加反引号 -->\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!--覆盖生成XML文件-->\n        <plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" />\n        <!-- 生成的实体类添加toString()方法 -->\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/>\n\n        <!-- 不生成注释 -->\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"\n                        userId=\"wiki\"\n                        password=\"123456\">\n        </jdbcConnection>\n\n        <!-- domain类的位置 -->\n        <javaModelGenerator targetProject=\"src/main/java\"\n                            targetPackage=\"top.faroz.pojo\"/>\n\n        <!-- mapper xml的位置 -->\n        <sqlMapGenerator targetProject=\"src/main/resources\"\n                         targetPackage=\"mapper\"/>\n\n        <!-- mapper类的位置 -->\n        <javaClientGenerator targetProject=\"src/main/java\"\n                             targetPackage=\"top.faroz.mapper\"\n                             type=\"XMLMAPPER\"/>\n\n        <table tableName=\"demo\" domainObjectName=\"Demo\"/>\n        <!--<table tableName=\"ebook\"/>-->\n        <!--<table tableName=\"category\"/>-->\n        <!--<table tableName=\"doc\"/>-->\n        <!--<table tableName=\"content\"/>-->\n        <!--<table tableName=\"user\"/>-->\n        <!--<table tableName=\"ebook_snapshot\"/>-->\n    </context>\n</generatorConfiguration>\n```\n\n\n\n* 新建一个maven启动项\n\n![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)\n\n![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)\n\n```bash\nmybatis-generator:generate -e\n```\n\n![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)\n\n\n\n### 7. 测试代码生成器\n\n代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表\n\n\n\n* all.sql 添加 demo 表的增加 SQL 语句，并执行\n\n```sql\n# demo列表\ndrop table if exists `demo`;\ncreate table `demo` (\n    `id` bigint not null comment 'id',\n    `name` varchar(50) comment '名称',\n    primary key (`id`)\n) engine=innodb default charset =utf8mb4 comment '测试';\n\ninsert into `demo` (id,name) values(2,'测试2');\n```\n\n\n\n* 在代码生成器最后的部分，填上要生成的表名\n\n![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)\n\n\n\n* 执行\n\n![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)\n\n\n\n* 执行成功，会生成 4 个新文件\n\n![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)\n\n\n\n* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码\n\n```java\n@RestController\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"/demo/list\")\n    public List<Demo> list() {\n        return demoService.getList();\n    }\n}\n```\n\n```java\n@Service\npublic class DemoService {\n\n    @Resource\n    private DemoMapper demoMapper;\n\n    public List<Demo> getList() {\n        List<Demo> list = demoMapper.selectByExample(null);\n        return list;\n    }\n}\n```\n\n\n\n* 添加 demo 的 http 测试脚本\n\n```http\nGET http://localhost:8880/demo/list\nAccept: application/json\n\n###\n```\n\n测试成功，说明我们用代码生成器生成的代码没有问题\n\n![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)\n\n\n\n### 8. 解决前后端跨域问题\n\n虽然现在还没有构建前端项目，但是后面，会出现跨域问题\n\n\n\n* 新建 CorsConfig 类\n\n![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)\n\n\n\n* 代码如下\n\n不用改动，直接用，别忘了加上==@Configuration==注解\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedHeaders(CorsConfiguration.ALL)\n                .allowedMethods(CorsConfiguration.ALL)\n                .allowCredentials(true)\n                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）\n    }\n}\n```\n\n\n\n### 9. 添加雪花算法工具类\n\n雪花算法，用来生成唯一 ID\n\n\n\n* 新建 SnowFlake 工具类\n\n![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)\n\n\n\n* 代码如下\n\n别忘了加上 @Component 注解\n\n```java\n@Component\npublic class SnowFlake {\n    /**\n     * 起始的时间戳\n     */\n    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00\n\n    /**\n     * 每一部分占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12; //序列号占用的位数\n    private final static long MACHINE_BIT = 5;   //机器标识占用的位数\n    private final static long DATACENTER_BIT = 5;//数据中心占用的位数\n\n    /**\n     * 每一部分的最大值\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * 每一部分向左的位移\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId = 1;  //数据中心\n    private long machineId = 1;     //机器标识\n    private long sequence = 0L; //序列号\n    private long lastStmp = -1L;//上一次时间戳\n\n    public SnowFlake() {\n    }\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * 产生下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");\n        }\n\n        if (currStmp == lastStmp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分\n                | datacenterId << DATACENTER_LEFT       //数据中心部分\n                | machineId << MACHINE_LEFT             //机器标识部分\n                | sequence;                             //序列号部分\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    // public static void main(String[] args) throws ParseException {\n    //     // 时间戳\n    //     // System.out.println(System.currentTimeMillis());\n    //     // System.out.println(new Date().getTime());\n    //     //\n    //     // String dateTime = \"2021-01-01 08:00:00\";\n    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n    //     // System.out.println(sdf.parse(dateTime).getTime());\n    //\n    //     SnowFlake snowFlake = new SnowFlake(1, 1);\n    //\n    //     long start = System.currentTimeMillis();\n    //     for (int i = 0; i < 10; i++) {\n    //         System.out.println(snowFlake.nextId());\n    //         System.out.println(System.currentTimeMillis() - start);\n    //     }\n    // }\n\n}\n```\n\n\n\n\n\n### 10. 添加 AOP\n\nAOP 用来打印接口日志，方便后期调试\n\n\n\n* Maven 中引入 fastjson，因为 我们的类中要用\n\n```xml\n <!--fastjson-->\n<dependency>\n  <groupId>com.alibaba</groupId>\n  <artifactId>fastjson</artifactId>\n  <version>1.2.70</version>\n</dependency>\n```\n\n\n\n* Maven 引入 AOP\n\n```xml\n<!--导入aop-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n\n\n* 添加 RequestContext 工具类\n\n这个是后期为了打印 WebSocket 日志的\n\n![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)\n\n```java\npublic class RequestContext implements Serializable {\n    private static ThreadLocal<String> remoteAddr = new ThreadLocal<>();\n\n    public static String getRemoteAddr() {\n        return remoteAddr.get();\n    }\n\n    public static void setRemoteAddr(String remoteAddr) {\n        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);\n    }\n}\n```\n\n\n\n* 新建 aspect 包，并新建 LogAspect 类\n\n![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)\n\n\n\n**LogAspect 代码如下:**\n\n切点的代码，我们要依据项目修改\n\n![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)\n\n```java\n@Aspect\n@Component\npublic class LogAspect {\n    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);\n\n    @Resource\n    private SnowFlake snowFlake;\n\n    /** 定义一个切点 */\n    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")\n    public void controllerPointcut() {}\n\n    // @Resource\n    // private SnowFlake snowFlake;\n\n    @Before(\"controllerPointcut()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n\n        // 增加日志流水号\n        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));\n\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Signature signature = joinPoint.getSignature();\n        String name = signature.getName();\n\n        // 打印请求信息\n        LOG.info(\"------------- 开始 -------------\");\n        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());\n        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);\n        LOG.info(\"远程地址: {}\", request.getRemoteAddr());\n\n        RequestContext.setRemoteAddr(getRemoteIp(request));\n\n        // 拿到所有的参数\n        Object[] args = joinPoint.getArgs();\n        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));\n\n        Object[] arguments  = new Object[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof ServletRequest\n                    || args[i] instanceof ServletResponse\n                    || args[i] instanceof MultipartFile) {\n                continue;\n            }\n            arguments[i] = args[i];\n        }\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));\n    }\n\n    @Around(\"controllerPointcut()\")\n    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = proceedingJoinPoint.proceed();\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));\n        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);\n        return result;\n    }\n\n    /**\n     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP\n     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突\n     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径\n     * @param request\n     * @return\n     */\n    public String getRemoteIp(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n```\n\n\n\n### 11. 解决前后端 Long 精度丢失问题\n\n我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失\n\n\n\n* 配置文件新增 JacksonConfig 类\n\n![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)\n\n\n\n* 代码如下\n\n```java\n@Configuration\npublic class JacksonConfig {\n\n    @Bean\n    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {\n        ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n        SimpleModule simpleModule = new SimpleModule();\n        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        objectMapper.registerModule(simpleModule);\n        return objectMapper;\n    }\n}\n```\n\n\n\n### 12. 新建 req resp 包\n\n我们要将请求与返回包装\n\n![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)\n\n\n\n### 13. CommonResp\n\n为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp\n\n![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)\n\n**代码如下：**\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommonResp<T> {\n    /**\n     * 返回是否成功\n     */\n    private boolean isSuccess=true;\n\n    /**\n     * 返回失败时，返回的错误信息\n     */\n    private String message;\n\n    /**\n     * 返回成功的时候，返回的内容\n     */\n    private T content;\n}\n```\n\n\n\n### 14. 自定义异常\n\n* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`\n\n![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)\n\n\n\n* `BusinessException`代码\n\n```java\npublic class BusinessException extends RuntimeException{\n    private BusinessExceptionCode code;\n\n    public BusinessException (BusinessExceptionCode code) {\n        /**\n         * 父类有个成员变量  private String desc\n         * 需要为这个成员变量赋值\n         */\n        super(code.getDesc());\n        this.code = code;\n    }\n\n    public BusinessExceptionCode getCode() {\n        return code;\n    }\n\n    public void setCode(BusinessExceptionCode code) {\n        this.code = code;\n    }\n\n    /**\n     * 不写入堆栈信息，提高性能\n     */\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n}\n```\n\n\n\n* `BusinessExceptionCode`代码\n\n```java\npublic enum BusinessExceptionCode {\n    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),\n    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),\n    VOTE_REPEAT(\"您已点赞过\"),\n    ;\n\n    private String desc;\n\n    BusinessExceptionCode(String desc) {\n        this.desc = desc;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n}\n```\n\n\n\n\n\n### 13. 统一异常处理\n\n我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp\n\n\n\n* 新建 ControllerExceptionHandler 类\n\n![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)\n\n\n\n* 代码如下\n\nlogger 要根据项目改一下\n\n```java\n/**\n * 统一异常处理、数据预处理等\n * 该类用于捕获系统弹出的异常\n * 将异常包装成一个 CommonResp\n * 从而方便前端调用，显示错误信息\n */\n@ControllerAdvice\npublic class ControllerExceptionHandler {\n    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BindException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BindException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BusinessException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BusinessException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getCode().getDesc());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(Exception e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.error(\"系统异常：\", e);\n        commonResp.setSuccess(false);\n        commonResp.setMessage(\"系统出现异常，请联系管理员\");\n        return commonResp;\n    }\n}\n```\n\n\n\n### 14. 添加日志记录 logback\n\n* 在 resource 下，新建logback-spring.xml 文件\n\n![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)\n\n* 写入内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <!-- 修改一下路径-->\n    <property name=\"PATH\" value=\"./log\"></property>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n</Pattern>\n            <!--<Pattern>%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n</Pattern>-->\n        </encoder>\n    </appender>\n\n    <appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/trace.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/trace.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n\n    <root level=\"TRACE\">\n        <appender-ref ref=\"TRACE_FILE\" />\n    </root>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n\n```\n\n\n\n### 15. 自定义 banner\n\nresources 下新建 banner.txt\n\n![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)\n\n\n\n里面放上自定义 banner\n\n```txt\n ********     **     *******     *******         ********\n/**/////     ****   /**////**   **/////**       //////** \n/**         **//**  /**   /**  **     //**           **  \n/*******   **  //** /*******  /**      /**          **   \n/**////   **********/**///**  /**      /**         **    \n/**      /**//////**/**  //** //**     **         **     \n/**      /**     /**/**   //** //*******   ***** ********\n//       //      // //     //   ///////   ///// //////// \n```\n\n\n\n\n","success":true}
2021-04-16 00:46:32.712 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:47:50.654 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:47:50.654 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:47:50.658 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:47:50.658 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:47:50.658 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:47:50.658 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:47:50.658 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:47:50.658 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:47:50.659 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:47:50.659 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:47:50.671 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:47:50.671 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：17 ms -------------
2021-04-16 00:47:50.672 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程\n\n虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。\n\n这次将创建的整个流程记录下来，方便以后的项目搭建。\n\n要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==\n\n如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了\n\n\n\n## 数据库\n\n一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限\n\n\n\n### 1. **连接 admin**\n\n只有 admin 有所有权限\n\n我的数据库 admin 的账户名和密码是：\n\n**账户：**admin\n\n**密码：**123\n\n![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)\n\n\n\n### 2. **新建数据库**\n\n其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号\n\n![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)\n\n### 3. **为这个数据库，专门建一个用户**\n\n开发环境中，就将密码和用户名设置成一样的，这样不会忘记\n\nhost 设置为 localhost\n\n![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)\n\n\n\n### 4. **为这个用户，授予对应数据库的全部权限**\n\n![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)\n\n![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)\n\n### 5. **对当前用户，建立连接**\n\n![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)\n\n\n\n\n\n## 后端\n\n关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。\n\n### 1. 新建 SpringBoot 项目\n\n* 点击 `SpringInitiallizr`，新建项目\n\n![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)\n\n* 选择默认依赖的包\n\n![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)\n\n![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)\n\n![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)\n\n* 选择存放路径\n\n![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)\n\n* 新建完成后，项目目录如下\n\n![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)\n\n\n\n### 2. 更改启动类位置\n\n* 新建 config 包，将启动类放进去\n\n![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)\n\n\n\n* 为启动类添加注解\n\n注解内的信息，是项目名称\n\n```java\n@ComponentScan(\"weixindemo\")\n```\n\n![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)\n\n\n\n### 3. IDEA 数据库配置\n\n* IDEA 连接数据库\n\n![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)\n\n![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)\n\n\n\n* 添加 sql 脚本\n\n新建 sql 文件夹，建立`all.sql`文件\n\n![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)\n\n\n\n我们在 sql 脚本中添加测试用数据，并执行\n\n```sql\n\n# 测试表\ndrop table if exists `test`;\ncreate table `test` (\n  `id` bigint not null comment 'id',\n  `name` varchar(50) comment '名称',\n  `password` varchar(50) comment '密码',\n  primary key (`id`)\n) engine=innodb default charset=utf8mb4 comment='测试';\n\ninsert into `test` (id, name, password) values (1, '测试', 'password');       \n```\n\n可以看到，数据库已建立\n\n![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)\n\n\n\n### 4. 配置 MyBatis\n\n* 在 `resource`文件夹下，新建 `mapper`文件夹\n\n这是用来存放 MyBatis 的实现的\n\n![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)\n\n\n\n* 新建 pojo 包\n\npojo 包用来存放实体类\n\n![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)\n\n\n\n* 在项目下，新建 mapper 包，用来存放接口\n\n![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)\n\n\n\n* 将配置文件后缀改为`.yml`\n\n我个人习惯使用`.yml`进行位置\n\n![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)\n\n\n\n* 添加 `Mybatis`配置\n\n这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&characterEncoding=utf-8\n    username: weixindemo\n    password: weixindemo\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    \n    \n# 整合Mybatis\nmybatis:\n  # ** 表示在mapper下不管有多少文件夹，都可以全部识别\n  mapper-locations: classpath:/mapper/**/*.xml\n  type-aliases-package: weixindemo.pojo\n  #  打印sql相关的日志信息\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)\n\n\n\n* 添加端口配置\n\n因为 vue 也是用的8080端口，我们不能和它重了\n\n```yml\nserver:\n  port: 8880\n```\n\n\n\n* 启动类添加`mapper`接口扫描路径\n\n```java\n@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描\n```\n\n![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)\n\n\n\n### 5. MVC 包建立\n\n我们还要建立 ==service==，==util==，==controller==包\n\n![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)\n\n![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)\n\n\n\n### 5. 测试 Mybatis 配置\n\n配置到这一步，要对之前的配置，进行一个测试\n\n* pojo 中，新建 Test 实体类\n\n![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Test {\n    private Integer id;\n    private String name;\n}\n```\n\n\n\n* mapper 包中，新建 TestMapper 接口\n\n![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)\n\n```java\n@Repository\n@Mapper\npublic interface TestMapper {\n    List<Test> getList();\n}\n```\n\n\n\n* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现\n\n  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)\n\n具体内容，要根据实际项目修改\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace要和接口的位置和名字对应-->\n<mapper namespace=\"weixindemo.mapper.TestMapper\">\n\n    <select id=\"getList\" resultType=\"weixindemo.pojo.Test\">\n        select * from test\n    </select>\n\n</mapper>\n```\n\n![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)\n\n\n\n* 在 service 包下，新建 TestService\n\n![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)\n\n别忘了加上 @Service 注解\n\n```java\n@Service\npublic class TestService {\n\n    @Autowired\n    private TestMapper mapper;\n\n    public List<Test> getList() {\n        return mapper.getList();\n    }\n}\n```\n\n\n\n* 在 controller包下，新建 TestController\n\n![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)\n\n```java\n@RestController\npublic class TestController {\n\n    @Autowired\n    private TestService testService;\n    \n\n    @RequestMapping(\"/test/list\")\n    public List<Test> list() {\n        return testService.getList();\n    }\n\n}\n```\n\n\n\n* 重启项目\n\n\n\n* 新建 http 文件，编写 http 测试脚本，执行\n\n![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)\n\n```http\nGET http://localhost:8880/test/list\nAccept: application/json\n\n###\n```\n\n\n\n最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作\n\n![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)\n\n\n\n### 6. MyBatis 代码生成器\n\n我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的\n\n\n\n* 导入 Maven 依赖\n\n注意，==是放在`plugiuns`下面的==\n\n```xml\n<!-- mybatis generator 自动生成代码插件 -->\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.4.0</version>\n                <configuration>\n                    <configurationFile>src/main/resources/generator/generator-config.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>8.0.22</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n\n\n* 建立代生成器位置\n\npom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`\n\n```xml\n<configurationFile>\n  src/main/resources/generator/generator-config.xml\n</configurationFile>\n```\n\n![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)\n\n\n\n* 代码生成器代码\n\n从`jdbcConnection`开始，别忘了==根据项目进行修改==\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n\n        <!-- 自动检查关键字，为关键字增加反引号 -->\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!--覆盖生成XML文件-->\n        <plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" />\n        <!-- 生成的实体类添加toString()方法 -->\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/>\n\n        <!-- 不生成注释 -->\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"\n                        userId=\"wiki\"\n                        password=\"123456\">\n        </jdbcConnection>\n\n        <!-- domain类的位置 -->\n        <javaModelGenerator targetProject=\"src/main/java\"\n                            targetPackage=\"top.faroz.pojo\"/>\n\n        <!-- mapper xml的位置 -->\n        <sqlMapGenerator targetProject=\"src/main/resources\"\n                         targetPackage=\"mapper\"/>\n\n        <!-- mapper类的位置 -->\n        <javaClientGenerator targetProject=\"src/main/java\"\n                             targetPackage=\"top.faroz.mapper\"\n                             type=\"XMLMAPPER\"/>\n\n        <table tableName=\"demo\" domainObjectName=\"Demo\"/>\n        <!--<table tableName=\"ebook\"/>-->\n        <!--<table tableName=\"category\"/>-->\n        <!--<table tableName=\"doc\"/>-->\n        <!--<table tableName=\"content\"/>-->\n        <!--<table tableName=\"user\"/>-->\n        <!--<table tableName=\"ebook_snapshot\"/>-->\n    </context>\n</generatorConfiguration>\n```\n\n\n\n* 新建一个maven启动项\n\n![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)\n\n![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)\n\n```bash\nmybatis-generator:generate -e\n```\n\n![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)\n\n\n\n### 7. 测试代码生成器\n\n代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表\n\n\n\n* all.sql 添加 demo 表的增加 SQL 语句，并执行\n\n```sql\n# demo列表\ndrop table if exists `demo`;\ncreate table `demo` (\n    `id` bigint not null comment 'id',\n    `name` varchar(50) comment '名称',\n    primary key (`id`)\n) engine=innodb default charset =utf8mb4 comment '测试';\n\ninsert into `demo` (id,name) values(2,'测试2');\n```\n\n\n\n* 在代码生成器最后的部分，填上要生成的表名\n\n![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)\n\n\n\n* 执行\n\n![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)\n\n\n\n* 执行成功，会生成 4 个新文件\n\n![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)\n\n\n\n* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码\n\n```java\n@RestController\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"/demo/list\")\n    public List<Demo> list() {\n        return demoService.getList();\n    }\n}\n```\n\n```java\n@Service\npublic class DemoService {\n\n    @Resource\n    private DemoMapper demoMapper;\n\n    public List<Demo> getList() {\n        List<Demo> list = demoMapper.selectByExample(null);\n        return list;\n    }\n}\n```\n\n\n\n* 添加 demo 的 http 测试脚本\n\n```http\nGET http://localhost:8880/demo/list\nAccept: application/json\n\n###\n```\n\n测试成功，说明我们用代码生成器生成的代码没有问题\n\n![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)\n\n\n\n### 8. 解决前后端跨域问题\n\n虽然现在还没有构建前端项目，但是后面，会出现跨域问题\n\n\n\n* 新建 CorsConfig 类\n\n![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)\n\n\n\n* 代码如下\n\n不用改动，直接用，别忘了加上==@Configuration==注解\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedHeaders(CorsConfiguration.ALL)\n                .allowedMethods(CorsConfiguration.ALL)\n                .allowCredentials(true)\n                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）\n    }\n}\n```\n\n\n\n### 9. 添加雪花算法工具类\n\n雪花算法，用来生成唯一 ID\n\n\n\n* 新建 SnowFlake 工具类\n\n![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)\n\n\n\n* 代码如下\n\n别忘了加上 @Component 注解\n\n```java\n@Component\npublic class SnowFlake {\n    /**\n     * 起始的时间戳\n     */\n    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00\n\n    /**\n     * 每一部分占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12; //序列号占用的位数\n    private final static long MACHINE_BIT = 5;   //机器标识占用的位数\n    private final static long DATACENTER_BIT = 5;//数据中心占用的位数\n\n    /**\n     * 每一部分的最大值\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * 每一部分向左的位移\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId = 1;  //数据中心\n    private long machineId = 1;     //机器标识\n    private long sequence = 0L; //序列号\n    private long lastStmp = -1L;//上一次时间戳\n\n    public SnowFlake() {\n    }\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * 产生下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");\n        }\n\n        if (currStmp == lastStmp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分\n                | datacenterId << DATACENTER_LEFT       //数据中心部分\n                | machineId << MACHINE_LEFT             //机器标识部分\n                | sequence;                             //序列号部分\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    // public static void main(String[] args) throws ParseException {\n    //     // 时间戳\n    //     // System.out.println(System.currentTimeMillis());\n    //     // System.out.println(new Date().getTime());\n    //     //\n    //     // String dateTime = \"2021-01-01 08:00:00\";\n    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n    //     // System.out.println(sdf.parse(dateTime).getTime());\n    //\n    //     SnowFlake snowFlake = new SnowFlake(1, 1);\n    //\n    //     long start = System.currentTimeMillis();\n    //     for (int i = 0; i < 10; i++) {\n    //         System.out.println(snowFlake.nextId());\n    //         System.out.println(System.currentTimeMillis() - start);\n    //     }\n    // }\n\n}\n```\n\n\n\n\n\n### 10. 添加 AOP\n\nAOP 用来打印接口日志，方便后期调试\n\n\n\n* Maven 中引入 fastjson，因为 我们的类中要用\n\n```xml\n <!--fastjson-->\n<dependency>\n  <groupId>com.alibaba</groupId>\n  <artifactId>fastjson</artifactId>\n  <version>1.2.70</version>\n</dependency>\n```\n\n\n\n* Maven 引入 AOP\n\n```xml\n<!--导入aop-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n\n\n* 添加 RequestContext 工具类\n\n这个是后期为了打印 WebSocket 日志的\n\n![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)\n\n```java\npublic class RequestContext implements Serializable {\n    private static ThreadLocal<String> remoteAddr = new ThreadLocal<>();\n\n    public static String getRemoteAddr() {\n        return remoteAddr.get();\n    }\n\n    public static void setRemoteAddr(String remoteAddr) {\n        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);\n    }\n}\n```\n\n\n\n* 新建 aspect 包，并新建 LogAspect 类\n\n![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)\n\n\n\n**LogAspect 代码如下:**\n\n切点的代码，我们要依据项目修改\n\n![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)\n\n```java\n@Aspect\n@Component\npublic class LogAspect {\n    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);\n\n    @Resource\n    private SnowFlake snowFlake;\n\n    /** 定义一个切点 */\n    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")\n    public void controllerPointcut() {}\n\n    // @Resource\n    // private SnowFlake snowFlake;\n\n    @Before(\"controllerPointcut()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n\n        // 增加日志流水号\n        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));\n\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Signature signature = joinPoint.getSignature();\n        String name = signature.getName();\n\n        // 打印请求信息\n        LOG.info(\"------------- 开始 -------------\");\n        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());\n        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);\n        LOG.info(\"远程地址: {}\", request.getRemoteAddr());\n\n        RequestContext.setRemoteAddr(getRemoteIp(request));\n\n        // 拿到所有的参数\n        Object[] args = joinPoint.getArgs();\n        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));\n\n        Object[] arguments  = new Object[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof ServletRequest\n                    || args[i] instanceof ServletResponse\n                    || args[i] instanceof MultipartFile) {\n                continue;\n            }\n            arguments[i] = args[i];\n        }\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));\n    }\n\n    @Around(\"controllerPointcut()\")\n    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = proceedingJoinPoint.proceed();\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));\n        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);\n        return result;\n    }\n\n    /**\n     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP\n     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突\n     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径\n     * @param request\n     * @return\n     */\n    public String getRemoteIp(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n```\n\n\n\n### 11. 解决前后端 Long 精度丢失问题\n\n我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失\n\n\n\n* 配置文件新增 JacksonConfig 类\n\n![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)\n\n\n\n* 代码如下\n\n```java\n@Configuration\npublic class JacksonConfig {\n\n    @Bean\n    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {\n        ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n        SimpleModule simpleModule = new SimpleModule();\n        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        objectMapper.registerModule(simpleModule);\n        return objectMapper;\n    }\n}\n```\n\n\n\n### 12. 新建 req resp 包\n\n我们要将请求与返回包装\n\n![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)\n\n\n\n### 13. CommonResp\n\n为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp\n\n![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)\n\n**代码如下：**\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommonResp<T> {\n    /**\n     * 返回是否成功\n     */\n    private boolean isSuccess=true;\n\n    /**\n     * 返回失败时，返回的错误信息\n     */\n    private String message;\n\n    /**\n     * 返回成功的时候，返回的内容\n     */\n    private T content;\n}\n```\n\n\n\n### 14. 自定义异常\n\n* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`\n\n![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)\n\n\n\n* `BusinessException`代码\n\n```java\npublic class BusinessException extends RuntimeException{\n    private BusinessExceptionCode code;\n\n    public BusinessException (BusinessExceptionCode code) {\n        /**\n         * 父类有个成员变量  private String desc\n         * 需要为这个成员变量赋值\n         */\n        super(code.getDesc());\n        this.code = code;\n    }\n\n    public BusinessExceptionCode getCode() {\n        return code;\n    }\n\n    public void setCode(BusinessExceptionCode code) {\n        this.code = code;\n    }\n\n    /**\n     * 不写入堆栈信息，提高性能\n     */\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n}\n```\n\n\n\n* `BusinessExceptionCode`代码\n\n```java\npublic enum BusinessExceptionCode {\n    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),\n    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),\n    VOTE_REPEAT(\"您已点赞过\"),\n    ;\n\n    private String desc;\n\n    BusinessExceptionCode(String desc) {\n        this.desc = desc;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n}\n```\n\n\n\n\n\n### 13. 统一异常处理\n\n我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp\n\n\n\n* 新建 ControllerExceptionHandler 类\n\n![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)\n\n\n\n* 代码如下\n\nlogger 要根据项目改一下\n\n```java\n/**\n * 统一异常处理、数据预处理等\n * 该类用于捕获系统弹出的异常\n * 将异常包装成一个 CommonResp\n * 从而方便前端调用，显示错误信息\n */\n@ControllerAdvice\npublic class ControllerExceptionHandler {\n    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BindException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BindException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BusinessException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BusinessException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getCode().getDesc());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(Exception e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.error(\"系统异常：\", e);\n        commonResp.setSuccess(false);\n        commonResp.setMessage(\"系统出现异常，请联系管理员\");\n        return commonResp;\n    }\n}\n```\n\n\n\n### 14. 添加日志记录 logback\n\n* 在 resource 下，新建logback-spring.xml 文件\n\n![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)\n\n* 写入内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <!-- 修改一下路径-->\n    <property name=\"PATH\" value=\"./log\"></property>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n</Pattern>\n            <!--<Pattern>%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n</Pattern>-->\n        </encoder>\n    </appender>\n\n    <appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/trace.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/trace.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n\n    <root level=\"TRACE\">\n        <appender-ref ref=\"TRACE_FILE\" />\n    </root>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n\n```\n\n\n\n### 15. 自定义 banner\n\nresources 下新建 banner.txt\n\n![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)\n\n\n\n里面放上自定义 banner\n\n```txt\n ********     **     *******     *******         ********\n/**/////     ****   /**////**   **/////**       //////** \n/**         **//**  /**   /**  **     //**           **  \n/*******   **  //** /*******  /**      /**          **   \n/**////   **********/**///**  /**      /**         **    \n/**      /**//////**/**  //** //**     **         **     \n/**      /**     /**/**   //** //*******   ***** ********\n//       //      // //     //   ///////   ///// //////// \n```\n\n\n\n\n","success":true}
2021-04-16 00:47:50.674 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：20 ms -------------
2021-04-16 00:48:34.990 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:48:35.137 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:51:56.966 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:51:56.970 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:51:56.970 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:51:56.970 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:51:56.971 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:51:56.989 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:51:56.989 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：23 ms -------------
2021-04-16 00:51:57.715 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:51:57.715 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:51:57.715 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:51:57.715 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:51:57.716 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:51:57.721 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:51:57.722 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 00:51:57.934 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:51:57.934 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:51:57.934 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:51:57.935 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:51:57.935 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:51:57.939 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:51:57.939 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:52:21.014 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:52:21.014 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:52:21.015 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:52:21.014 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:52:21.015 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:52:21.015 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:52:21.015 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:52:21.015 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:52:21.016 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:52:21.016 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:52:21.018 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:52:21.019 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:52:21.023 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程\n\n虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。\n\n这次将创建的整个流程记录下来，方便以后的项目搭建。\n\n要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==\n\n如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了\n\n\n\n## 数据库\n\n一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限\n\n\n\n### 1. **连接 admin**\n\n只有 admin 有所有权限\n\n我的数据库 admin 的账户名和密码是：\n\n**账户：**admin\n\n**密码：**123\n\n![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)\n\n\n\n### 2. **新建数据库**\n\n其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号\n\n![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)\n\n### 3. **为这个数据库，专门建一个用户**\n\n开发环境中，就将密码和用户名设置成一样的，这样不会忘记\n\nhost 设置为 localhost\n\n![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)\n\n\n\n### 4. **为这个用户，授予对应数据库的全部权限**\n\n![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)\n\n![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)\n\n### 5. **对当前用户，建立连接**\n\n![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)\n\n\n\n\n\n## 后端\n\n关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。\n\n### 1. 新建 SpringBoot 项目\n\n* 点击 `SpringInitiallizr`，新建项目\n\n![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)\n\n* 选择默认依赖的包\n\n![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)\n\n![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)\n\n![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)\n\n* 选择存放路径\n\n![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)\n\n* 新建完成后，项目目录如下\n\n![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)\n\n\n\n### 2. 更改启动类位置\n\n* 新建 config 包，将启动类放进去\n\n![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)\n\n\n\n* 为启动类添加注解\n\n注解内的信息，是项目名称\n\n```java\n@ComponentScan(\"weixindemo\")\n```\n\n![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)\n\n\n\n### 3. IDEA 数据库配置\n\n* IDEA 连接数据库\n\n![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)\n\n![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)\n\n\n\n* 添加 sql 脚本\n\n新建 sql 文件夹，建立`all.sql`文件\n\n![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)\n\n\n\n我们在 sql 脚本中添加测试用数据，并执行\n\n```sql\n\n# 测试表\ndrop table if exists `test`;\ncreate table `test` (\n  `id` bigint not null comment 'id',\n  `name` varchar(50) comment '名称',\n  `password` varchar(50) comment '密码',\n  primary key (`id`)\n) engine=innodb default charset=utf8mb4 comment='测试';\n\ninsert into `test` (id, name, password) values (1, '测试', 'password');       \n```\n\n可以看到，数据库已建立\n\n![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)\n\n\n\n### 4. 配置 MyBatis\n\n* 在 `resource`文件夹下，新建 `mapper`文件夹\n\n这是用来存放 MyBatis 的实现的\n\n![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)\n\n\n\n* 新建 pojo 包\n\npojo 包用来存放实体类\n\n![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)\n\n\n\n* 在项目下，新建 mapper 包，用来存放接口\n\n![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)\n\n\n\n* 将配置文件后缀改为`.yml`\n\n我个人习惯使用`.yml`进行位置\n\n![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)\n\n\n\n* 添加 `Mybatis`配置\n\n这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&characterEncoding=utf-8\n    username: weixindemo\n    password: weixindemo\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    \n    \n# 整合Mybatis\nmybatis:\n  # ** 表示在mapper下不管有多少文件夹，都可以全部识别\n  mapper-locations: classpath:/mapper/**/*.xml\n  type-aliases-package: weixindemo.pojo\n  #  打印sql相关的日志信息\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)\n\n\n\n* 添加端口配置\n\n因为 vue 也是用的8080端口，我们不能和它重了\n\n```yml\nserver:\n  port: 8880\n```\n\n\n\n* 启动类添加`mapper`接口扫描路径\n\n```java\n@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描\n```\n\n![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)\n\n\n\n### 5. MVC 包建立\n\n我们还要建立 ==service==，==util==，==controller==包\n\n![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)\n\n![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)\n\n\n\n### 5. 测试 Mybatis 配置\n\n配置到这一步，要对之前的配置，进行一个测试\n\n* pojo 中，新建 Test 实体类\n\n![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Test {\n    private Integer id;\n    private String name;\n}\n```\n\n\n\n* mapper 包中，新建 TestMapper 接口\n\n![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)\n\n```java\n@Repository\n@Mapper\npublic interface TestMapper {\n    List<Test> getList();\n}\n```\n\n\n\n* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现\n\n  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)\n\n具体内容，要根据实际项目修改\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace要和接口的位置和名字对应-->\n<mapper namespace=\"weixindemo.mapper.TestMapper\">\n\n    <select id=\"getList\" resultType=\"weixindemo.pojo.Test\">\n        select * from test\n    </select>\n\n</mapper>\n```\n\n![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)\n\n\n\n* 在 service 包下，新建 TestService\n\n![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)\n\n别忘了加上 @Service 注解\n\n```java\n@Service\npublic class TestService {\n\n    @Autowired\n    private TestMapper mapper;\n\n    public List<Test> getList() {\n        return mapper.getList();\n    }\n}\n```\n\n\n\n* 在 controller包下，新建 TestController\n\n![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)\n\n```java\n@RestController\npublic class TestController {\n\n    @Autowired\n    private TestService testService;\n    \n\n    @RequestMapping(\"/test/list\")\n    public List<Test> list() {\n        return testService.getList();\n    }\n\n}\n```\n\n\n\n* 重启项目\n\n\n\n* 新建 http 文件，编写 http 测试脚本，执行\n\n![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)\n\n```http\nGET http://localhost:8880/test/list\nAccept: application/json\n\n###\n```\n\n\n\n最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作\n\n![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)\n\n\n\n### 6. MyBatis 代码生成器\n\n我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的\n\n\n\n* 导入 Maven 依赖\n\n注意，==是放在`plugiuns`下面的==\n\n```xml\n<!-- mybatis generator 自动生成代码插件 -->\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.4.0</version>\n                <configuration>\n                    <configurationFile>src/main/resources/generator/generator-config.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>8.0.22</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n\n\n* 建立代生成器位置\n\npom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`\n\n```xml\n<configurationFile>\n  src/main/resources/generator/generator-config.xml\n</configurationFile>\n```\n\n![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)\n\n\n\n* 代码生成器代码\n\n从`jdbcConnection`开始，别忘了==根据项目进行修改==\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n\n        <!-- 自动检查关键字，为关键字增加反引号 -->\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!--覆盖生成XML文件-->\n        <plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" />\n        <!-- 生成的实体类添加toString()方法 -->\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/>\n\n        <!-- 不生成注释 -->\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"\n                        userId=\"wiki\"\n                        password=\"123456\">\n        </jdbcConnection>\n\n        <!-- domain类的位置 -->\n        <javaModelGenerator targetProject=\"src/main/java\"\n                            targetPackage=\"top.faroz.pojo\"/>\n\n        <!-- mapper xml的位置 -->\n        <sqlMapGenerator targetProject=\"src/main/resources\"\n                         targetPackage=\"mapper\"/>\n\n        <!-- mapper类的位置 -->\n        <javaClientGenerator targetProject=\"src/main/java\"\n                             targetPackage=\"top.faroz.mapper\"\n                             type=\"XMLMAPPER\"/>\n\n        <table tableName=\"demo\" domainObjectName=\"Demo\"/>\n        <!--<table tableName=\"ebook\"/>-->\n        <!--<table tableName=\"category\"/>-->\n        <!--<table tableName=\"doc\"/>-->\n        <!--<table tableName=\"content\"/>-->\n        <!--<table tableName=\"user\"/>-->\n        <!--<table tableName=\"ebook_snapshot\"/>-->\n    </context>\n</generatorConfiguration>\n```\n\n\n\n* 新建一个maven启动项\n\n![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)\n\n![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)\n\n```bash\nmybatis-generator:generate -e\n```\n\n![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)\n\n\n\n### 7. 测试代码生成器\n\n代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表\n\n\n\n* all.sql 添加 demo 表的增加 SQL 语句，并执行\n\n```sql\n# demo列表\ndrop table if exists `demo`;\ncreate table `demo` (\n    `id` bigint not null comment 'id',\n    `name` varchar(50) comment '名称',\n    primary key (`id`)\n) engine=innodb default charset =utf8mb4 comment '测试';\n\ninsert into `demo` (id,name) values(2,'测试2');\n```\n\n\n\n* 在代码生成器最后的部分，填上要生成的表名\n\n![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)\n\n\n\n* 执行\n\n![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)\n\n\n\n* 执行成功，会生成 4 个新文件\n\n![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)\n\n\n\n* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码\n\n```java\n@RestController\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"/demo/list\")\n    public List<Demo> list() {\n        return demoService.getList();\n    }\n}\n```\n\n```java\n@Service\npublic class DemoService {\n\n    @Resource\n    private DemoMapper demoMapper;\n\n    public List<Demo> getList() {\n        List<Demo> list = demoMapper.selectByExample(null);\n        return list;\n    }\n}\n```\n\n\n\n* 添加 demo 的 http 测试脚本\n\n```http\nGET http://localhost:8880/demo/list\nAccept: application/json\n\n###\n```\n\n测试成功，说明我们用代码生成器生成的代码没有问题\n\n![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)\n\n\n\n### 8. 解决前后端跨域问题\n\n虽然现在还没有构建前端项目，但是后面，会出现跨域问题\n\n\n\n* 新建 CorsConfig 类\n\n![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)\n\n\n\n* 代码如下\n\n不用改动，直接用，别忘了加上==@Configuration==注解\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedHeaders(CorsConfiguration.ALL)\n                .allowedMethods(CorsConfiguration.ALL)\n                .allowCredentials(true)\n                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）\n    }\n}\n```\n\n\n\n### 9. 添加雪花算法工具类\n\n雪花算法，用来生成唯一 ID\n\n\n\n* 新建 SnowFlake 工具类\n\n![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)\n\n\n\n* 代码如下\n\n别忘了加上 @Component 注解\n\n```java\n@Component\npublic class SnowFlake {\n    /**\n     * 起始的时间戳\n     */\n    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00\n\n    /**\n     * 每一部分占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12; //序列号占用的位数\n    private final static long MACHINE_BIT = 5;   //机器标识占用的位数\n    private final static long DATACENTER_BIT = 5;//数据中心占用的位数\n\n    /**\n     * 每一部分的最大值\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * 每一部分向左的位移\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId = 1;  //数据中心\n    private long machineId = 1;     //机器标识\n    private long sequence = 0L; //序列号\n    private long lastStmp = -1L;//上一次时间戳\n\n    public SnowFlake() {\n    }\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * 产生下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");\n        }\n\n        if (currStmp == lastStmp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分\n                | datacenterId << DATACENTER_LEFT       //数据中心部分\n                | machineId << MACHINE_LEFT             //机器标识部分\n                | sequence;                             //序列号部分\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    // public static void main(String[] args) throws ParseException {\n    //     // 时间戳\n    //     // System.out.println(System.currentTimeMillis());\n    //     // System.out.println(new Date().getTime());\n    //     //\n    //     // String dateTime = \"2021-01-01 08:00:00\";\n    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n    //     // System.out.println(sdf.parse(dateTime).getTime());\n    //\n    //     SnowFlake snowFlake = new SnowFlake(1, 1);\n    //\n    //     long start = System.currentTimeMillis();\n    //     for (int i = 0; i < 10; i++) {\n    //         System.out.println(snowFlake.nextId());\n    //         System.out.println(System.currentTimeMillis() - start);\n    //     }\n    // }\n\n}\n```\n\n\n\n\n\n### 10. 添加 AOP\n\nAOP 用来打印接口日志，方便后期调试\n\n\n\n* Maven 中引入 fastjson，因为 我们的类中要用\n\n```xml\n <!--fastjson-->\n<dependency>\n  <groupId>com.alibaba</groupId>\n  <artifactId>fastjson</artifactId>\n  <version>1.2.70</version>\n</dependency>\n```\n\n\n\n* Maven 引入 AOP\n\n```xml\n<!--导入aop-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n\n\n* 添加 RequestContext 工具类\n\n这个是后期为了打印 WebSocket 日志的\n\n![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)\n\n```java\npublic class RequestContext implements Serializable {\n    private static ThreadLocal<String> remoteAddr = new ThreadLocal<>();\n\n    public static String getRemoteAddr() {\n        return remoteAddr.get();\n    }\n\n    public static void setRemoteAddr(String remoteAddr) {\n        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);\n    }\n}\n```\n\n\n\n* 新建 aspect 包，并新建 LogAspect 类\n\n![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)\n\n\n\n**LogAspect 代码如下:**\n\n切点的代码，我们要依据项目修改\n\n![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)\n\n```java\n@Aspect\n@Component\npublic class LogAspect {\n    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);\n\n    @Resource\n    private SnowFlake snowFlake;\n\n    /** 定义一个切点 */\n    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")\n    public void controllerPointcut() {}\n\n    // @Resource\n    // private SnowFlake snowFlake;\n\n    @Before(\"controllerPointcut()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n\n        // 增加日志流水号\n        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));\n\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Signature signature = joinPoint.getSignature();\n        String name = signature.getName();\n\n        // 打印请求信息\n        LOG.info(\"------------- 开始 -------------\");\n        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());\n        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);\n        LOG.info(\"远程地址: {}\", request.getRemoteAddr());\n\n        RequestContext.setRemoteAddr(getRemoteIp(request));\n\n        // 拿到所有的参数\n        Object[] args = joinPoint.getArgs();\n        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));\n\n        Object[] arguments  = new Object[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof ServletRequest\n                    || args[i] instanceof ServletResponse\n                    || args[i] instanceof MultipartFile) {\n                continue;\n            }\n            arguments[i] = args[i];\n        }\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));\n    }\n\n    @Around(\"controllerPointcut()\")\n    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = proceedingJoinPoint.proceed();\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));\n        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);\n        return result;\n    }\n\n    /**\n     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP\n     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突\n     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径\n     * @param request\n     * @return\n     */\n    public String getRemoteIp(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n```\n\n\n\n### 11. 解决前后端 Long 精度丢失问题\n\n我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失\n\n\n\n* 配置文件新增 JacksonConfig 类\n\n![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)\n\n\n\n* 代码如下\n\n```java\n@Configuration\npublic class JacksonConfig {\n\n    @Bean\n    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {\n        ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n        SimpleModule simpleModule = new SimpleModule();\n        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        objectMapper.registerModule(simpleModule);\n        return objectMapper;\n    }\n}\n```\n\n\n\n### 12. 新建 req resp 包\n\n我们要将请求与返回包装\n\n![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)\n\n\n\n### 13. CommonResp\n\n为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp\n\n![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)\n\n**代码如下：**\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommonResp<T> {\n    /**\n     * 返回是否成功\n     */\n    private boolean isSuccess=true;\n\n    /**\n     * 返回失败时，返回的错误信息\n     */\n    private String message;\n\n    /**\n     * 返回成功的时候，返回的内容\n     */\n    private T content;\n}\n```\n\n\n\n### 14. 自定义异常\n\n* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`\n\n![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)\n\n\n\n* `BusinessException`代码\n\n```java\npublic class BusinessException extends RuntimeException{\n    private BusinessExceptionCode code;\n\n    public BusinessException (BusinessExceptionCode code) {\n        /**\n         * 父类有个成员变量  private String desc\n         * 需要为这个成员变量赋值\n         */\n        super(code.getDesc());\n        this.code = code;\n    }\n\n    public BusinessExceptionCode getCode() {\n        return code;\n    }\n\n    public void setCode(BusinessExceptionCode code) {\n        this.code = code;\n    }\n\n    /**\n     * 不写入堆栈信息，提高性能\n     */\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n}\n```\n\n\n\n* `BusinessExceptionCode`代码\n\n```java\npublic enum BusinessExceptionCode {\n    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),\n    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),\n    VOTE_REPEAT(\"您已点赞过\"),\n    ;\n\n    private String desc;\n\n    BusinessExceptionCode(String desc) {\n        this.desc = desc;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n}\n```\n\n\n\n\n\n### 13. 统一异常处理\n\n我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp\n\n\n\n* 新建 ControllerExceptionHandler 类\n\n![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)\n\n\n\n* 代码如下\n\nlogger 要根据项目改一下\n\n```java\n/**\n * 统一异常处理、数据预处理等\n * 该类用于捕获系统弹出的异常\n * 将异常包装成一个 CommonResp\n * 从而方便前端调用，显示错误信息\n */\n@ControllerAdvice\npublic class ControllerExceptionHandler {\n    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BindException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BindException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BusinessException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BusinessException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getCode().getDesc());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(Exception e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.error(\"系统异常：\", e);\n        commonResp.setSuccess(false);\n        commonResp.setMessage(\"系统出现异常，请联系管理员\");\n        return commonResp;\n    }\n}\n```\n\n\n\n### 14. 添加日志记录 logback\n\n* 在 resource 下，新建logback-spring.xml 文件\n\n![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)\n\n* 写入内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <!-- 修改一下路径-->\n    <property name=\"PATH\" value=\"./log\"></property>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n</Pattern>\n            <!--<Pattern>%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n</Pattern>-->\n        </encoder>\n    </appender>\n\n    <appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/trace.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/trace.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n\n    <root level=\"TRACE\">\n        <appender-ref ref=\"TRACE_FILE\" />\n    </root>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n\n```\n\n\n\n### 15. 自定义 banner\n\nresources 下新建 banner.txt\n\n![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)\n\n\n\n里面放上自定义 banner\n\n```txt\n ********     **     *******     *******         ********\n/**/////     ****   /**////**   **/////**       //////** \n/**         **//**  /**   /**  **     //**           **  \n/*******   **  //** /*******  /**      /**          **   \n/**////   **********/**///**  /**      /**         **    \n/**      /**//////**/**  //** //**     **         **     \n/**      /**     /**/**   //** //*******   ***** ********\n//       //      // //     //   ///////   ///// //////// \n```\n\n\n\n\n","success":true}
2021-04-16 00:52:21.024 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：10 ms -------------
2021-04-16 00:53:35.187 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:53:35.244 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:53:54.072 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:53:54.072 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:53:54.072 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:53:54.072 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:53:54.073 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:53:54.073 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:53:54.073 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:53:54.073 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:53:54.073 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:53:54.073 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:53:54.078 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:53:54.078 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:53:54.082 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程\n\n虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。\n\n这次将创建的整个流程记录下来，方便以后的项目搭建。\n\n要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==\n\n如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了\n\n\n\n## 数据库\n\n一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限\n\n\n\n### 1. **连接 admin**\n\n只有 admin 有所有权限\n\n我的数据库 admin 的账户名和密码是：\n\n**账户：**admin\n\n**密码：**123\n\n![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)\n\n\n\n### 2. **新建数据库**\n\n其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号\n\n![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)\n\n### 3. **为这个数据库，专门建一个用户**\n\n开发环境中，就将密码和用户名设置成一样的，这样不会忘记\n\nhost 设置为 localhost\n\n![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)\n\n\n\n### 4. **为这个用户，授予对应数据库的全部权限**\n\n![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)\n\n![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)\n\n### 5. **对当前用户，建立连接**\n\n![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)\n\n\n\n\n\n## 后端\n\n关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。\n\n### 1. 新建 SpringBoot 项目\n\n* 点击 `SpringInitiallizr`，新建项目\n\n![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)\n\n* 选择默认依赖的包\n\n![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)\n\n![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)\n\n![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)\n\n* 选择存放路径\n\n![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)\n\n* 新建完成后，项目目录如下\n\n![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)\n\n\n\n### 2. 更改启动类位置\n\n* 新建 config 包，将启动类放进去\n\n![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)\n\n\n\n* 为启动类添加注解\n\n注解内的信息，是项目名称\n\n```java\n@ComponentScan(\"weixindemo\")\n```\n\n![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)\n\n\n\n### 3. IDEA 数据库配置\n\n* IDEA 连接数据库\n\n![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)\n\n![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)\n\n\n\n* 添加 sql 脚本\n\n新建 sql 文件夹，建立`all.sql`文件\n\n![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)\n\n\n\n我们在 sql 脚本中添加测试用数据，并执行\n\n```sql\n\n# 测试表\ndrop table if exists `test`;\ncreate table `test` (\n  `id` bigint not null comment 'id',\n  `name` varchar(50) comment '名称',\n  `password` varchar(50) comment '密码',\n  primary key (`id`)\n) engine=innodb default charset=utf8mb4 comment='测试';\n\ninsert into `test` (id, name, password) values (1, '测试', 'password');       \n```\n\n可以看到，数据库已建立\n\n![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)\n\n\n\n### 4. 配置 MyBatis\n\n* 在 `resource`文件夹下，新建 `mapper`文件夹\n\n这是用来存放 MyBatis 的实现的\n\n![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)\n\n\n\n* 新建 pojo 包\n\npojo 包用来存放实体类\n\n![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)\n\n\n\n* 在项目下，新建 mapper 包，用来存放接口\n\n![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)\n\n\n\n* 将配置文件后缀改为`.yml`\n\n我个人习惯使用`.yml`进行位置\n\n![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)\n\n\n\n* 添加 `Mybatis`配置\n\n这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&characterEncoding=utf-8\n    username: weixindemo\n    password: weixindemo\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    \n    \n# 整合Mybatis\nmybatis:\n  # ** 表示在mapper下不管有多少文件夹，都可以全部识别\n  mapper-locations: classpath:/mapper/**/*.xml\n  type-aliases-package: weixindemo.pojo\n  #  打印sql相关的日志信息\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)\n\n\n\n* 添加端口配置\n\n因为 vue 也是用的8080端口，我们不能和它重了\n\n```yml\nserver:\n  port: 8880\n```\n\n\n\n* 启动类添加`mapper`接口扫描路径\n\n```java\n@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描\n```\n\n![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)\n\n\n\n### 5. MVC 包建立\n\n我们还要建立 ==service==，==util==，==controller==包\n\n![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)\n\n![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)\n\n\n\n### 5. 测试 Mybatis 配置\n\n配置到这一步，要对之前的配置，进行一个测试\n\n* pojo 中，新建 Test 实体类\n\n![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Test {\n    private Integer id;\n    private String name;\n}\n```\n\n\n\n* mapper 包中，新建 TestMapper 接口\n\n![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)\n\n```java\n@Repository\n@Mapper\npublic interface TestMapper {\n    List<Test> getList();\n}\n```\n\n\n\n* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现\n\n  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)\n\n具体内容，要根据实际项目修改\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace要和接口的位置和名字对应-->\n<mapper namespace=\"weixindemo.mapper.TestMapper\">\n\n    <select id=\"getList\" resultType=\"weixindemo.pojo.Test\">\n        select * from test\n    </select>\n\n</mapper>\n```\n\n![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)\n\n\n\n* 在 service 包下，新建 TestService\n\n![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)\n\n别忘了加上 @Service 注解\n\n```java\n@Service\npublic class TestService {\n\n    @Autowired\n    private TestMapper mapper;\n\n    public List<Test> getList() {\n        return mapper.getList();\n    }\n}\n```\n\n\n\n* 在 controller包下，新建 TestController\n\n![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)\n\n```java\n@RestController\npublic class TestController {\n\n    @Autowired\n    private TestService testService;\n    \n\n    @RequestMapping(\"/test/list\")\n    public List<Test> list() {\n        return testService.getList();\n    }\n\n}\n```\n\n\n\n* 重启项目\n\n\n\n* 新建 http 文件，编写 http 测试脚本，执行\n\n![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)\n\n```http\nGET http://localhost:8880/test/list\nAccept: application/json\n\n###\n```\n\n\n\n最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作\n\n![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)\n\n\n\n### 6. MyBatis 代码生成器\n\n我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的\n\n\n\n* 导入 Maven 依赖\n\n注意，==是放在`plugiuns`下面的==\n\n```xml\n<!-- mybatis generator 自动生成代码插件 -->\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.4.0</version>\n                <configuration>\n                    <configurationFile>src/main/resources/generator/generator-config.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>8.0.22</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n\n\n* 建立代生成器位置\n\npom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`\n\n```xml\n<configurationFile>\n  src/main/resources/generator/generator-config.xml\n</configurationFile>\n```\n\n![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)\n\n\n\n* 代码生成器代码\n\n从`jdbcConnection`开始，别忘了==根据项目进行修改==\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n\n        <!-- 自动检查关键字，为关键字增加反引号 -->\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!--覆盖生成XML文件-->\n        <plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" />\n        <!-- 生成的实体类添加toString()方法 -->\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/>\n\n        <!-- 不生成注释 -->\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"\n                        userId=\"wiki\"\n                        password=\"123456\">\n        </jdbcConnection>\n\n        <!-- domain类的位置 -->\n        <javaModelGenerator targetProject=\"src/main/java\"\n                            targetPackage=\"top.faroz.pojo\"/>\n\n        <!-- mapper xml的位置 -->\n        <sqlMapGenerator targetProject=\"src/main/resources\"\n                         targetPackage=\"mapper\"/>\n\n        <!-- mapper类的位置 -->\n        <javaClientGenerator targetProject=\"src/main/java\"\n                             targetPackage=\"top.faroz.mapper\"\n                             type=\"XMLMAPPER\"/>\n\n        <table tableName=\"demo\" domainObjectName=\"Demo\"/>\n        <!--<table tableName=\"ebook\"/>-->\n        <!--<table tableName=\"category\"/>-->\n        <!--<table tableName=\"doc\"/>-->\n        <!--<table tableName=\"content\"/>-->\n        <!--<table tableName=\"user\"/>-->\n        <!--<table tableName=\"ebook_snapshot\"/>-->\n    </context>\n</generatorConfiguration>\n```\n\n\n\n* 新建一个maven启动项\n\n![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)\n\n![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)\n\n```bash\nmybatis-generator:generate -e\n```\n\n![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)\n\n\n\n### 7. 测试代码生成器\n\n代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表\n\n\n\n* all.sql 添加 demo 表的增加 SQL 语句，并执行\n\n```sql\n# demo列表\ndrop table if exists `demo`;\ncreate table `demo` (\n    `id` bigint not null comment 'id',\n    `name` varchar(50) comment '名称',\n    primary key (`id`)\n) engine=innodb default charset =utf8mb4 comment '测试';\n\ninsert into `demo` (id,name) values(2,'测试2');\n```\n\n\n\n* 在代码生成器最后的部分，填上要生成的表名\n\n![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)\n\n\n\n* 执行\n\n![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)\n\n\n\n* 执行成功，会生成 4 个新文件\n\n![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)\n\n\n\n* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码\n\n```java\n@RestController\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"/demo/list\")\n    public List<Demo> list() {\n        return demoService.getList();\n    }\n}\n```\n\n```java\n@Service\npublic class DemoService {\n\n    @Resource\n    private DemoMapper demoMapper;\n\n    public List<Demo> getList() {\n        List<Demo> list = demoMapper.selectByExample(null);\n        return list;\n    }\n}\n```\n\n\n\n* 添加 demo 的 http 测试脚本\n\n```http\nGET http://localhost:8880/demo/list\nAccept: application/json\n\n###\n```\n\n测试成功，说明我们用代码生成器生成的代码没有问题\n\n![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)\n\n\n\n### 8. 解决前后端跨域问题\n\n虽然现在还没有构建前端项目，但是后面，会出现跨域问题\n\n\n\n* 新建 CorsConfig 类\n\n![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)\n\n\n\n* 代码如下\n\n不用改动，直接用，别忘了加上==@Configuration==注解\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedHeaders(CorsConfiguration.ALL)\n                .allowedMethods(CorsConfiguration.ALL)\n                .allowCredentials(true)\n                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）\n    }\n}\n```\n\n\n\n### 9. 添加雪花算法工具类\n\n雪花算法，用来生成唯一 ID\n\n\n\n* 新建 SnowFlake 工具类\n\n![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)\n\n\n\n* 代码如下\n\n别忘了加上 @Component 注解\n\n```java\n@Component\npublic class SnowFlake {\n    /**\n     * 起始的时间戳\n     */\n    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00\n\n    /**\n     * 每一部分占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12; //序列号占用的位数\n    private final static long MACHINE_BIT = 5;   //机器标识占用的位数\n    private final static long DATACENTER_BIT = 5;//数据中心占用的位数\n\n    /**\n     * 每一部分的最大值\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * 每一部分向左的位移\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId = 1;  //数据中心\n    private long machineId = 1;     //机器标识\n    private long sequence = 0L; //序列号\n    private long lastStmp = -1L;//上一次时间戳\n\n    public SnowFlake() {\n    }\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * 产生下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");\n        }\n\n        if (currStmp == lastStmp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分\n                | datacenterId << DATACENTER_LEFT       //数据中心部分\n                | machineId << MACHINE_LEFT             //机器标识部分\n                | sequence;                             //序列号部分\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    // public static void main(String[] args) throws ParseException {\n    //     // 时间戳\n    //     // System.out.println(System.currentTimeMillis());\n    //     // System.out.println(new Date().getTime());\n    //     //\n    //     // String dateTime = \"2021-01-01 08:00:00\";\n    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n    //     // System.out.println(sdf.parse(dateTime).getTime());\n    //\n    //     SnowFlake snowFlake = new SnowFlake(1, 1);\n    //\n    //     long start = System.currentTimeMillis();\n    //     for (int i = 0; i < 10; i++) {\n    //         System.out.println(snowFlake.nextId());\n    //         System.out.println(System.currentTimeMillis() - start);\n    //     }\n    // }\n\n}\n```\n\n\n\n\n\n### 10. 添加 AOP\n\nAOP 用来打印接口日志，方便后期调试\n\n\n\n* Maven 中引入 fastjson，因为 我们的类中要用\n\n```xml\n <!--fastjson-->\n<dependency>\n  <groupId>com.alibaba</groupId>\n  <artifactId>fastjson</artifactId>\n  <version>1.2.70</version>\n</dependency>\n```\n\n\n\n* Maven 引入 AOP\n\n```xml\n<!--导入aop-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n\n\n* 添加 RequestContext 工具类\n\n这个是后期为了打印 WebSocket 日志的\n\n![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)\n\n```java\npublic class RequestContext implements Serializable {\n    private static ThreadLocal<String> remoteAddr = new ThreadLocal<>();\n\n    public static String getRemoteAddr() {\n        return remoteAddr.get();\n    }\n\n    public static void setRemoteAddr(String remoteAddr) {\n        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);\n    }\n}\n```\n\n\n\n* 新建 aspect 包，并新建 LogAspect 类\n\n![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)\n\n\n\n**LogAspect 代码如下:**\n\n切点的代码，我们要依据项目修改\n\n![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)\n\n```java\n@Aspect\n@Component\npublic class LogAspect {\n    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);\n\n    @Resource\n    private SnowFlake snowFlake;\n\n    /** 定义一个切点 */\n    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")\n    public void controllerPointcut() {}\n\n    // @Resource\n    // private SnowFlake snowFlake;\n\n    @Before(\"controllerPointcut()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n\n        // 增加日志流水号\n        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));\n\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Signature signature = joinPoint.getSignature();\n        String name = signature.getName();\n\n        // 打印请求信息\n        LOG.info(\"------------- 开始 -------------\");\n        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());\n        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);\n        LOG.info(\"远程地址: {}\", request.getRemoteAddr());\n\n        RequestContext.setRemoteAddr(getRemoteIp(request));\n\n        // 拿到所有的参数\n        Object[] args = joinPoint.getArgs();\n        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));\n\n        Object[] arguments  = new Object[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof ServletRequest\n                    || args[i] instanceof ServletResponse\n                    || args[i] instanceof MultipartFile) {\n                continue;\n            }\n            arguments[i] = args[i];\n        }\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));\n    }\n\n    @Around(\"controllerPointcut()\")\n    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = proceedingJoinPoint.proceed();\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));\n        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);\n        return result;\n    }\n\n    /**\n     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP\n     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突\n     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径\n     * @param request\n     * @return\n     */\n    public String getRemoteIp(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n```\n\n\n\n### 11. 解决前后端 Long 精度丢失问题\n\n我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失\n\n\n\n* 配置文件新增 JacksonConfig 类\n\n![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)\n\n\n\n* 代码如下\n\n```java\n@Configuration\npublic class JacksonConfig {\n\n    @Bean\n    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {\n        ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n        SimpleModule simpleModule = new SimpleModule();\n        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        objectMapper.registerModule(simpleModule);\n        return objectMapper;\n    }\n}\n```\n\n\n\n### 12. 新建 req resp 包\n\n我们要将请求与返回包装\n\n![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)\n\n\n\n### 13. CommonResp\n\n为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp\n\n![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)\n\n**代码如下：**\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommonResp<T> {\n    /**\n     * 返回是否成功\n     */\n    private boolean isSuccess=true;\n\n    /**\n     * 返回失败时，返回的错误信息\n     */\n    private String message;\n\n    /**\n     * 返回成功的时候，返回的内容\n     */\n    private T content;\n}\n```\n\n\n\n### 14. 自定义异常\n\n* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`\n\n![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)\n\n\n\n* `BusinessException`代码\n\n```java\npublic class BusinessException extends RuntimeException{\n    private BusinessExceptionCode code;\n\n    public BusinessException (BusinessExceptionCode code) {\n        /**\n         * 父类有个成员变量  private String desc\n         * 需要为这个成员变量赋值\n         */\n        super(code.getDesc());\n        this.code = code;\n    }\n\n    public BusinessExceptionCode getCode() {\n        return code;\n    }\n\n    public void setCode(BusinessExceptionCode code) {\n        this.code = code;\n    }\n\n    /**\n     * 不写入堆栈信息，提高性能\n     */\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n}\n```\n\n\n\n* `BusinessExceptionCode`代码\n\n```java\npublic enum BusinessExceptionCode {\n    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),\n    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),\n    VOTE_REPEAT(\"您已点赞过\"),\n    ;\n\n    private String desc;\n\n    BusinessExceptionCode(String desc) {\n        this.desc = desc;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n}\n```\n\n\n\n\n\n### 13. 统一异常处理\n\n我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp\n\n\n\n* 新建 ControllerExceptionHandler 类\n\n![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)\n\n\n\n* 代码如下\n\nlogger 要根据项目改一下\n\n```java\n/**\n * 统一异常处理、数据预处理等\n * 该类用于捕获系统弹出的异常\n * 将异常包装成一个 CommonResp\n * 从而方便前端调用，显示错误信息\n */\n@ControllerAdvice\npublic class ControllerExceptionHandler {\n    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BindException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BindException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BusinessException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BusinessException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getCode().getDesc());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(Exception e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.error(\"系统异常：\", e);\n        commonResp.setSuccess(false);\n        commonResp.setMessage(\"系统出现异常，请联系管理员\");\n        return commonResp;\n    }\n}\n```\n\n\n\n### 14. 添加日志记录 logback\n\n* 在 resource 下，新建logback-spring.xml 文件\n\n![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)\n\n* 写入内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <!-- 修改一下路径-->\n    <property name=\"PATH\" value=\"./log\"></property>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n</Pattern>\n            <!--<Pattern>%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n</Pattern>-->\n        </encoder>\n    </appender>\n\n    <appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/trace.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/trace.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n\n    <root level=\"TRACE\">\n        <appender-ref ref=\"TRACE_FILE\" />\n    </root>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n\n```\n\n\n\n### 15. 自定义 banner\n\nresources 下新建 banner.txt\n\n![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)\n\n\n\n里面放上自定义 banner\n\n```txt\n ********     **     *******     *******         ********\n/**/////     ****   /**////**   **/////**       //////** \n/**         **//**  /**   /**  **     //**           **  \n/*******   **  //** /*******  /**      /**          **   \n/**////   **********/**///**  /**      /**         **    \n/**      /**//////**/**  //** //**     **         **     \n/**      /**     /**/**   //** //*******   ***** ********\n//       //      // //     //   ///////   ///// //////// \n```\n\n\n\n\n","success":true}
2021-04-16 00:53:54.084 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：12 ms -------------
2021-04-16 00:54:36.413 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:54:36.414 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:54:36.414 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:54:36.414 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:54:36.415 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:54:36.415 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:54:36.415 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:54:36.415 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:54:36.415 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:54:36.415 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:54:36.418 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:54:36.418 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:54:36.422 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程\n\n虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。\n\n这次将创建的整个流程记录下来，方便以后的项目搭建。\n\n要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==\n\n如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了\n\n\n\n## 数据库\n\n一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限\n\n\n\n### 1. **连接 admin**\n\n只有 admin 有所有权限\n\n我的数据库 admin 的账户名和密码是：\n\n**账户：**admin\n\n**密码：**123\n\n![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)\n\n\n\n### 2. **新建数据库**\n\n其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号\n\n![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)\n\n### 3. **为这个数据库，专门建一个用户**\n\n开发环境中，就将密码和用户名设置成一样的，这样不会忘记\n\nhost 设置为 localhost\n\n![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)\n\n\n\n### 4. **为这个用户，授予对应数据库的全部权限**\n\n![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)\n\n![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)\n\n### 5. **对当前用户，建立连接**\n\n![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)\n\n\n\n\n\n## 后端\n\n关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。\n\n### 1. 新建 SpringBoot 项目\n\n* 点击 `SpringInitiallizr`，新建项目\n\n![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)\n\n* 选择默认依赖的包\n\n![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)\n\n![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)\n\n![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)\n\n* 选择存放路径\n\n![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)\n\n* 新建完成后，项目目录如下\n\n![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)\n\n\n\n### 2. 更改启动类位置\n\n* 新建 config 包，将启动类放进去\n\n![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)\n\n\n\n* 为启动类添加注解\n\n注解内的信息，是项目名称\n\n```java\n@ComponentScan(\"weixindemo\")\n```\n\n![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)\n\n\n\n### 3. IDEA 数据库配置\n\n* IDEA 连接数据库\n\n![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)\n\n![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)\n\n\n\n* 添加 sql 脚本\n\n新建 sql 文件夹，建立`all.sql`文件\n\n![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)\n\n\n\n我们在 sql 脚本中添加测试用数据，并执行\n\n```sql\n\n# 测试表\ndrop table if exists `test`;\ncreate table `test` (\n  `id` bigint not null comment 'id',\n  `name` varchar(50) comment '名称',\n  `password` varchar(50) comment '密码',\n  primary key (`id`)\n) engine=innodb default charset=utf8mb4 comment='测试';\n\ninsert into `test` (id, name, password) values (1, '测试', 'password');       \n```\n\n可以看到，数据库已建立\n\n![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)\n\n\n\n### 4. 配置 MyBatis\n\n* 在 `resource`文件夹下，新建 `mapper`文件夹\n\n这是用来存放 MyBatis 的实现的\n\n![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)\n\n\n\n* 新建 pojo 包\n\npojo 包用来存放实体类\n\n![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)\n\n\n\n* 在项目下，新建 mapper 包，用来存放接口\n\n![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)\n\n\n\n* 将配置文件后缀改为`.yml`\n\n我个人习惯使用`.yml`进行位置\n\n![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)\n\n\n\n* 添加 `Mybatis`配置\n\n这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&characterEncoding=utf-8\n    username: weixindemo\n    password: weixindemo\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    \n    \n# 整合Mybatis\nmybatis:\n  # ** 表示在mapper下不管有多少文件夹，都可以全部识别\n  mapper-locations: classpath:/mapper/**/*.xml\n  type-aliases-package: weixindemo.pojo\n  #  打印sql相关的日志信息\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)\n\n\n\n* 添加端口配置\n\n因为 vue 也是用的8080端口，我们不能和它重了\n\n```yml\nserver:\n  port: 8880\n```\n\n\n\n* 启动类添加`mapper`接口扫描路径\n\n```java\n@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描\n```\n\n![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)\n\n\n\n### 5. MVC 包建立\n\n我们还要建立 ==service==，==util==，==controller==包\n\n![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)\n\n![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)\n\n\n\n### 5. 测试 Mybatis 配置\n\n配置到这一步，要对之前的配置，进行一个测试\n\n* pojo 中，新建 Test 实体类\n\n![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Test {\n    private Integer id;\n    private String name;\n}\n```\n\n\n\n* mapper 包中，新建 TestMapper 接口\n\n![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)\n\n```java\n@Repository\n@Mapper\npublic interface TestMapper {\n    List<Test> getList();\n}\n```\n\n\n\n* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现\n\n  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)\n\n具体内容，要根据实际项目修改\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace要和接口的位置和名字对应-->\n<mapper namespace=\"weixindemo.mapper.TestMapper\">\n\n    <select id=\"getList\" resultType=\"weixindemo.pojo.Test\">\n        select * from test\n    </select>\n\n</mapper>\n```\n\n![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)\n\n\n\n* 在 service 包下，新建 TestService\n\n![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)\n\n别忘了加上 @Service 注解\n\n```java\n@Service\npublic class TestService {\n\n    @Autowired\n    private TestMapper mapper;\n\n    public List<Test> getList() {\n        return mapper.getList();\n    }\n}\n```\n\n\n\n* 在 controller包下，新建 TestController\n\n![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)\n\n```java\n@RestController\npublic class TestController {\n\n    @Autowired\n    private TestService testService;\n    \n\n    @RequestMapping(\"/test/list\")\n    public List<Test> list() {\n        return testService.getList();\n    }\n\n}\n```\n\n\n\n* 重启项目\n\n\n\n* 新建 http 文件，编写 http 测试脚本，执行\n\n![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)\n\n```http\nGET http://localhost:8880/test/list\nAccept: application/json\n\n###\n```\n\n\n\n最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作\n\n![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)\n\n\n\n### 6. MyBatis 代码生成器\n\n我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的\n\n\n\n* 导入 Maven 依赖\n\n注意，==是放在`plugiuns`下面的==\n\n```xml\n<!-- mybatis generator 自动生成代码插件 -->\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.4.0</version>\n                <configuration>\n                    <configurationFile>src/main/resources/generator/generator-config.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>8.0.22</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n\n\n* 建立代生成器位置\n\npom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`\n\n```xml\n<configurationFile>\n  src/main/resources/generator/generator-config.xml\n</configurationFile>\n```\n\n![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)\n\n\n\n* 代码生成器代码\n\n从`jdbcConnection`开始，别忘了==根据项目进行修改==\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n\n        <!-- 自动检查关键字，为关键字增加反引号 -->\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!--覆盖生成XML文件-->\n        <plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" />\n        <!-- 生成的实体类添加toString()方法 -->\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/>\n\n        <!-- 不生成注释 -->\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"\n                        userId=\"wiki\"\n                        password=\"123456\">\n        </jdbcConnection>\n\n        <!-- domain类的位置 -->\n        <javaModelGenerator targetProject=\"src/main/java\"\n                            targetPackage=\"top.faroz.pojo\"/>\n\n        <!-- mapper xml的位置 -->\n        <sqlMapGenerator targetProject=\"src/main/resources\"\n                         targetPackage=\"mapper\"/>\n\n        <!-- mapper类的位置 -->\n        <javaClientGenerator targetProject=\"src/main/java\"\n                             targetPackage=\"top.faroz.mapper\"\n                             type=\"XMLMAPPER\"/>\n\n        <table tableName=\"demo\" domainObjectName=\"Demo\"/>\n        <!--<table tableName=\"ebook\"/>-->\n        <!--<table tableName=\"category\"/>-->\n        <!--<table tableName=\"doc\"/>-->\n        <!--<table tableName=\"content\"/>-->\n        <!--<table tableName=\"user\"/>-->\n        <!--<table tableName=\"ebook_snapshot\"/>-->\n    </context>\n</generatorConfiguration>\n```\n\n\n\n* 新建一个maven启动项\n\n![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)\n\n![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)\n\n```bash\nmybatis-generator:generate -e\n```\n\n![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)\n\n\n\n### 7. 测试代码生成器\n\n代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表\n\n\n\n* all.sql 添加 demo 表的增加 SQL 语句，并执行\n\n```sql\n# demo列表\ndrop table if exists `demo`;\ncreate table `demo` (\n    `id` bigint not null comment 'id',\n    `name` varchar(50) comment '名称',\n    primary key (`id`)\n) engine=innodb default charset =utf8mb4 comment '测试';\n\ninsert into `demo` (id,name) values(2,'测试2');\n```\n\n\n\n* 在代码生成器最后的部分，填上要生成的表名\n\n![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)\n\n\n\n* 执行\n\n![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)\n\n\n\n* 执行成功，会生成 4 个新文件\n\n![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)\n\n\n\n* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码\n\n```java\n@RestController\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"/demo/list\")\n    public List<Demo> list() {\n        return demoService.getList();\n    }\n}\n```\n\n```java\n@Service\npublic class DemoService {\n\n    @Resource\n    private DemoMapper demoMapper;\n\n    public List<Demo> getList() {\n        List<Demo> list = demoMapper.selectByExample(null);\n        return list;\n    }\n}\n```\n\n\n\n* 添加 demo 的 http 测试脚本\n\n```http\nGET http://localhost:8880/demo/list\nAccept: application/json\n\n###\n```\n\n测试成功，说明我们用代码生成器生成的代码没有问题\n\n![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)\n\n\n\n### 8. 解决前后端跨域问题\n\n虽然现在还没有构建前端项目，但是后面，会出现跨域问题\n\n\n\n* 新建 CorsConfig 类\n\n![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)\n\n\n\n* 代码如下\n\n不用改动，直接用，别忘了加上==@Configuration==注解\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedHeaders(CorsConfiguration.ALL)\n                .allowedMethods(CorsConfiguration.ALL)\n                .allowCredentials(true)\n                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）\n    }\n}\n```\n\n\n\n### 9. 添加雪花算法工具类\n\n雪花算法，用来生成唯一 ID\n\n\n\n* 新建 SnowFlake 工具类\n\n![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)\n\n\n\n* 代码如下\n\n别忘了加上 @Component 注解\n\n```java\n@Component\npublic class SnowFlake {\n    /**\n     * 起始的时间戳\n     */\n    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00\n\n    /**\n     * 每一部分占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12; //序列号占用的位数\n    private final static long MACHINE_BIT = 5;   //机器标识占用的位数\n    private final static long DATACENTER_BIT = 5;//数据中心占用的位数\n\n    /**\n     * 每一部分的最大值\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * 每一部分向左的位移\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId = 1;  //数据中心\n    private long machineId = 1;     //机器标识\n    private long sequence = 0L; //序列号\n    private long lastStmp = -1L;//上一次时间戳\n\n    public SnowFlake() {\n    }\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * 产生下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");\n        }\n\n        if (currStmp == lastStmp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分\n                | datacenterId << DATACENTER_LEFT       //数据中心部分\n                | machineId << MACHINE_LEFT             //机器标识部分\n                | sequence;                             //序列号部分\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    // public static void main(String[] args) throws ParseException {\n    //     // 时间戳\n    //     // System.out.println(System.currentTimeMillis());\n    //     // System.out.println(new Date().getTime());\n    //     //\n    //     // String dateTime = \"2021-01-01 08:00:00\";\n    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n    //     // System.out.println(sdf.parse(dateTime).getTime());\n    //\n    //     SnowFlake snowFlake = new SnowFlake(1, 1);\n    //\n    //     long start = System.currentTimeMillis();\n    //     for (int i = 0; i < 10; i++) {\n    //         System.out.println(snowFlake.nextId());\n    //         System.out.println(System.currentTimeMillis() - start);\n    //     }\n    // }\n\n}\n```\n\n\n\n\n\n### 10. 添加 AOP\n\nAOP 用来打印接口日志，方便后期调试\n\n\n\n* Maven 中引入 fastjson，因为 我们的类中要用\n\n```xml\n <!--fastjson-->\n<dependency>\n  <groupId>com.alibaba</groupId>\n  <artifactId>fastjson</artifactId>\n  <version>1.2.70</version>\n</dependency>\n```\n\n\n\n* Maven 引入 AOP\n\n```xml\n<!--导入aop-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n\n\n* 添加 RequestContext 工具类\n\n这个是后期为了打印 WebSocket 日志的\n\n![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)\n\n```java\npublic class RequestContext implements Serializable {\n    private static ThreadLocal<String> remoteAddr = new ThreadLocal<>();\n\n    public static String getRemoteAddr() {\n        return remoteAddr.get();\n    }\n\n    public static void setRemoteAddr(String remoteAddr) {\n        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);\n    }\n}\n```\n\n\n\n* 新建 aspect 包，并新建 LogAspect 类\n\n![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)\n\n\n\n**LogAspect 代码如下:**\n\n切点的代码，我们要依据项目修改\n\n![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)\n\n```java\n@Aspect\n@Component\npublic class LogAspect {\n    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);\n\n    @Resource\n    private SnowFlake snowFlake;\n\n    /** 定义一个切点 */\n    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")\n    public void controllerPointcut() {}\n\n    // @Resource\n    // private SnowFlake snowFlake;\n\n    @Before(\"controllerPointcut()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n\n        // 增加日志流水号\n        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));\n\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Signature signature = joinPoint.getSignature();\n        String name = signature.getName();\n\n        // 打印请求信息\n        LOG.info(\"------------- 开始 -------------\");\n        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());\n        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);\n        LOG.info(\"远程地址: {}\", request.getRemoteAddr());\n\n        RequestContext.setRemoteAddr(getRemoteIp(request));\n\n        // 拿到所有的参数\n        Object[] args = joinPoint.getArgs();\n        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));\n\n        Object[] arguments  = new Object[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof ServletRequest\n                    || args[i] instanceof ServletResponse\n                    || args[i] instanceof MultipartFile) {\n                continue;\n            }\n            arguments[i] = args[i];\n        }\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));\n    }\n\n    @Around(\"controllerPointcut()\")\n    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = proceedingJoinPoint.proceed();\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));\n        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);\n        return result;\n    }\n\n    /**\n     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP\n     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突\n     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径\n     * @param request\n     * @return\n     */\n    public String getRemoteIp(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n```\n\n\n\n### 11. 解决前后端 Long 精度丢失问题\n\n我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失\n\n\n\n* 配置文件新增 JacksonConfig 类\n\n![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)\n\n\n\n* 代码如下\n\n```java\n@Configuration\npublic class JacksonConfig {\n\n    @Bean\n    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {\n        ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n        SimpleModule simpleModule = new SimpleModule();\n        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        objectMapper.registerModule(simpleModule);\n        return objectMapper;\n    }\n}\n```\n\n\n\n### 12. 新建 req resp 包\n\n我们要将请求与返回包装\n\n![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)\n\n\n\n### 13. CommonResp\n\n为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp\n\n![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)\n\n**代码如下：**\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommonResp<T> {\n    /**\n     * 返回是否成功\n     */\n    private boolean isSuccess=true;\n\n    /**\n     * 返回失败时，返回的错误信息\n     */\n    private String message;\n\n    /**\n     * 返回成功的时候，返回的内容\n     */\n    private T content;\n}\n```\n\n\n\n### 14. 自定义异常\n\n* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`\n\n![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)\n\n\n\n* `BusinessException`代码\n\n```java\npublic class BusinessException extends RuntimeException{\n    private BusinessExceptionCode code;\n\n    public BusinessException (BusinessExceptionCode code) {\n        /**\n         * 父类有个成员变量  private String desc\n         * 需要为这个成员变量赋值\n         */\n        super(code.getDesc());\n        this.code = code;\n    }\n\n    public BusinessExceptionCode getCode() {\n        return code;\n    }\n\n    public void setCode(BusinessExceptionCode code) {\n        this.code = code;\n    }\n\n    /**\n     * 不写入堆栈信息，提高性能\n     */\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n}\n```\n\n\n\n* `BusinessExceptionCode`代码\n\n```java\npublic enum BusinessExceptionCode {\n    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),\n    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),\n    VOTE_REPEAT(\"您已点赞过\"),\n    ;\n\n    private String desc;\n\n    BusinessExceptionCode(String desc) {\n        this.desc = desc;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n}\n```\n\n\n\n\n\n### 13. 统一异常处理\n\n我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp\n\n\n\n* 新建 ControllerExceptionHandler 类\n\n![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)\n\n\n\n* 代码如下\n\nlogger 要根据项目改一下\n\n```java\n/**\n * 统一异常处理、数据预处理等\n * 该类用于捕获系统弹出的异常\n * 将异常包装成一个 CommonResp\n * 从而方便前端调用，显示错误信息\n */\n@ControllerAdvice\npublic class ControllerExceptionHandler {\n    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BindException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BindException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BusinessException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BusinessException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getCode().getDesc());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(Exception e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.error(\"系统异常：\", e);\n        commonResp.setSuccess(false);\n        commonResp.setMessage(\"系统出现异常，请联系管理员\");\n        return commonResp;\n    }\n}\n```\n\n\n\n### 14. 添加日志记录 logback\n\n* 在 resource 下，新建logback-spring.xml 文件\n\n![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)\n\n* 写入内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <!-- 修改一下路径-->\n    <property name=\"PATH\" value=\"./log\"></property>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n</Pattern>\n            <!--<Pattern>%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n</Pattern>-->\n        </encoder>\n    </appender>\n\n    <appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/trace.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/trace.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n\n    <root level=\"TRACE\">\n        <appender-ref ref=\"TRACE_FILE\" />\n    </root>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n\n```\n\n\n\n### 15. 自定义 banner\n\nresources 下新建 banner.txt\n\n![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)\n\n\n\n里面放上自定义 banner\n\n```txt\n ********     **     *******     *******         ********\n/**/////     ****   /**////**   **/////**       //////** \n/**         **//**  /**   /**  **     //**           **  \n/*******   **  //** /*******  /**      /**          **   \n/**////   **********/**///**  /**      /**         **    \n/**      /**//////**/**  //** //**     **         **     \n/**      /**     /**/**   //** //*******   ***** ********\n//       //      // //     //   ///////   ///// //////// \n```\n\n\n\n\n","success":true}
2021-04-16 00:54:36.424 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：11 ms -------------
2021-04-16 00:55:30.554 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:55:30.555 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:55:30.555 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:55:30.556 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:55:30.557 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:55:30.566 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:55:30.566 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：12 ms -------------
2021-04-16 00:55:31.045 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:55:31.045 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:55:31.045 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:55:31.046 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:55:31.046 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:55:31.050 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:55:31.050 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:55:35.936 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:55:35.936 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:55:35.936 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:55:35.936 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:55:35.937 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:55:35.946 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:55:35.947 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：12 ms -------------
2021-04-16 00:55:39.758 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:55:39.759 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:55:39.759 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:55:39.759 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:55:39.760 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:55:39.764 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:55:39.764 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:55:42.109 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:55:42.110 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:55:42.110 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:55:42.110 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:55:42.111 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":2,"size":4}]
2021-04-16 00:55:42.116 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0},{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},{"description":" python,2天就够了","docCount":0,"id":36776384114331648,"name":"2天学会python","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:55:42.116 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 00:56:26.317 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:26.318 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/36754863593492480 GET
2021-04-16 00:56:26.318 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:26.318 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:56:26.318 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/36754863593492480 GET
2021-04-16 00:56:26.318 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:26.318 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:56:26.319 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:26.319 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:56:26.319 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [36754863593492480]
2021-04-16 00:56:26.323 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:56:26.323 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# Java 接口\n\n这里不讲为什么需要使用接口，因为大部分人开发那么久，应该都了解使用接口的原因和好处了吧\n\n\n\n## **1. 接口中的方法不用声明为`public`**\n\n虽然写上不会报错，但是完全没有必要，因为接口实现的时候，只能是`public`\n\n更别提将接口方法声明为`private`，`protected`了，直接报错\n\n![image-20210317235222474](https://gitee.com/faro/images/raw/master/img/20210317235222.png)\n\n\n\n## **2. 因为接口实现的时候，只能是`public`**\n\n除了`public`，其他类型准报错\n\n何况你再想想，如果要将接口方法申明为`private`，那写这个接口，还有什么意义？\n\n接口的目的，本来就是为了松耦合，写成`private`到好，让方法只能在类内部使用了，那还松耦合松个鬼啊。\n\n![image-20210317235447384](https://gitee.com/faro/images/raw/master/img/20210317235447.png)\n\n\n\n## **3. 实现多个接口的重名问题**\n\n### 3.1 两个方法一模一样\n\n这里定义两个接口，其自带的方法，**一模一样**（一模一样，即指`函数名`，`返回值`，`参数类型`，`参数个数`和`不同类型参数的排列顺序`都一模一样，这些条件，<font color=\"red\">除了返回值</font>和函数名，其余三样，每一样都是保证函数能够重载的条件）\n\n![image-20210318000412331](https://gitee.com/faro/images/raw/master/img/20210318000412.png)\n\n![image-20210318000424942](https://gitee.com/faro/images/raw/master/img/20210318000424.png)\n\n那最后多接口实现的时候，其实就相当于只实现一个方法，没有什么影响，且都可以实现多态：\n\n![image-20210318000627167](https://gitee.com/faro/images/raw/master/img/20210318000627.png)\n\n\n\n### 3.2 只有返回类型不一样\n\n但是，如果两个接口函数名和参数个数都一样，**只有返回值不一样**，换句话说，就是==不满足区分函数重载的条件==，那编译器就会报错：\n\n![image-20210318000846017](https://gitee.com/faro/images/raw/master/img/20210318000846.png)\n\n![image-20210318000859682](https://gitee.com/faro/images/raw/master/img/20210318000859.png)\n\n此时，因为一个返回`int`，一个不返回，那接口实现写`int`也不是，写`void`也不是，\n\n![image-20210318000931012](https://gitee.com/faro/images/raw/master/img/20210318000931.png)\n\n又因为，<font color=\"blue\">方法返回的类型不能作为重载的标志</font>，所以，下面这种写法也无济于事...\n\n![image-20210318001053987](https://gitee.com/faro/images/raw/master/img/20210318001054.png)\n\n\n\n### 3.3 只有满足函数重载的条件，接口才可重名\n\n在  3.1  也提到过，`参数类型，参数个数、不同类型参数的排列顺序`这三样，每样都可以成为重载的条件，只要满足任何一样，就能实现同函数名接口的多继承及实现。\n\n","success":true}
2021-04-16 00:56:26.323 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:56:26.324 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:56:28.873 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:28.874 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:56:28.874 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:56:28.875 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:28.875 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:56:28.885 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:56:28.885 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：12 ms -------------
2021-04-16 00:56:29.750 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:29.751 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:56:29.751 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:56:29.751 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:29.751 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:56:29.756 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:56:29.756 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:56:30.733 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:30.733 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:30.733 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:56:30.733 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:56:30.733 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:56:30.733 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:56:30.733 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:30.733 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:30.733 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:56:30.734 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:56:30.737 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:56:30.737 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:56:30.737 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程\n\n虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。\n\n这次将创建的整个流程记录下来，方便以后的项目搭建。\n\n要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==\n\n如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了\n\n\n\n## 数据库\n\n一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限\n\n\n\n### 1. **连接 admin**\n\n只有 admin 有所有权限\n\n我的数据库 admin 的账户名和密码是：\n\n**账户：**admin\n\n**密码：**123\n\n![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)\n\n\n\n### 2. **新建数据库**\n\n其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号\n\n![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)\n\n### 3. **为这个数据库，专门建一个用户**\n\n开发环境中，就将密码和用户名设置成一样的，这样不会忘记\n\nhost 设置为 localhost\n\n![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)\n\n\n\n### 4. **为这个用户，授予对应数据库的全部权限**\n\n![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)\n\n![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)\n\n### 5. **对当前用户，建立连接**\n\n![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)\n\n\n\n\n\n## 后端\n\n关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。\n\n### 1. 新建 SpringBoot 项目\n\n* 点击 `SpringInitiallizr`，新建项目\n\n![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)\n\n* 选择默认依赖的包\n\n![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)\n\n![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)\n\n![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)\n\n* 选择存放路径\n\n![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)\n\n* 新建完成后，项目目录如下\n\n![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)\n\n\n\n### 2. 更改启动类位置\n\n* 新建 config 包，将启动类放进去\n\n![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)\n\n\n\n* 为启动类添加注解\n\n注解内的信息，是项目名称\n\n```java\n@ComponentScan(\"weixindemo\")\n```\n\n![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)\n\n\n\n### 3. IDEA 数据库配置\n\n* IDEA 连接数据库\n\n![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)\n\n![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)\n\n\n\n* 添加 sql 脚本\n\n新建 sql 文件夹，建立`all.sql`文件\n\n![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)\n\n\n\n我们在 sql 脚本中添加测试用数据，并执行\n\n```sql\n\n# 测试表\ndrop table if exists `test`;\ncreate table `test` (\n  `id` bigint not null comment 'id',\n  `name` varchar(50) comment '名称',\n  `password` varchar(50) comment '密码',\n  primary key (`id`)\n) engine=innodb default charset=utf8mb4 comment='测试';\n\ninsert into `test` (id, name, password) values (1, '测试', 'password');       \n```\n\n可以看到，数据库已建立\n\n![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)\n\n\n\n### 4. 配置 MyBatis\n\n* 在 `resource`文件夹下，新建 `mapper`文件夹\n\n这是用来存放 MyBatis 的实现的\n\n![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)\n\n\n\n* 新建 pojo 包\n\npojo 包用来存放实体类\n\n![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)\n\n\n\n* 在项目下，新建 mapper 包，用来存放接口\n\n![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)\n\n\n\n* 将配置文件后缀改为`.yml`\n\n我个人习惯使用`.yml`进行位置\n\n![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)\n\n\n\n* 添加 `Mybatis`配置\n\n这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&characterEncoding=utf-8\n    username: weixindemo\n    password: weixindemo\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    \n    \n# 整合Mybatis\nmybatis:\n  # ** 表示在mapper下不管有多少文件夹，都可以全部识别\n  mapper-locations: classpath:/mapper/**/*.xml\n  type-aliases-package: weixindemo.pojo\n  #  打印sql相关的日志信息\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)\n\n\n\n* 添加端口配置\n\n因为 vue 也是用的8080端口，我们不能和它重了\n\n```yml\nserver:\n  port: 8880\n```\n\n\n\n* 启动类添加`mapper`接口扫描路径\n\n```java\n@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描\n```\n\n![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)\n\n\n\n### 5. MVC 包建立\n\n我们还要建立 ==service==，==util==，==controller==包\n\n![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)\n\n![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)\n\n\n\n### 5. 测试 Mybatis 配置\n\n配置到这一步，要对之前的配置，进行一个测试\n\n* pojo 中，新建 Test 实体类\n\n![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Test {\n    private Integer id;\n    private String name;\n}\n```\n\n\n\n* mapper 包中，新建 TestMapper 接口\n\n![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)\n\n```java\n@Repository\n@Mapper\npublic interface TestMapper {\n    List<Test> getList();\n}\n```\n\n\n\n* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现\n\n  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)\n\n具体内容，要根据实际项目修改\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace要和接口的位置和名字对应-->\n<mapper namespace=\"weixindemo.mapper.TestMapper\">\n\n    <select id=\"getList\" resultType=\"weixindemo.pojo.Test\">\n        select * from test\n    </select>\n\n</mapper>\n```\n\n![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)\n\n\n\n* 在 service 包下，新建 TestService\n\n![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)\n\n别忘了加上 @Service 注解\n\n```java\n@Service\npublic class TestService {\n\n    @Autowired\n    private TestMapper mapper;\n\n    public List<Test> getList() {\n        return mapper.getList();\n    }\n}\n```\n\n\n\n* 在 controller包下，新建 TestController\n\n![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)\n\n```java\n@RestController\npublic class TestController {\n\n    @Autowired\n    private TestService testService;\n    \n\n    @RequestMapping(\"/test/list\")\n    public List<Test> list() {\n        return testService.getList();\n    }\n\n}\n```\n\n\n\n* 重启项目\n\n\n\n* 新建 http 文件，编写 http 测试脚本，执行\n\n![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)\n\n```http\nGET http://localhost:8880/test/list\nAccept: application/json\n\n###\n```\n\n\n\n最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作\n\n![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)\n\n\n\n### 6. MyBatis 代码生成器\n\n我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的\n\n\n\n* 导入 Maven 依赖\n\n注意，==是放在`plugiuns`下面的==\n\n```xml\n<!-- mybatis generator 自动生成代码插件 -->\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.4.0</version>\n                <configuration>\n                    <configurationFile>src/main/resources/generator/generator-config.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>8.0.22</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n\n\n* 建立代生成器位置\n\npom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`\n\n```xml\n<configurationFile>\n  src/main/resources/generator/generator-config.xml\n</configurationFile>\n```\n\n![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)\n\n\n\n* 代码生成器代码\n\n从`jdbcConnection`开始，别忘了==根据项目进行修改==\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n\n        <!-- 自动检查关键字，为关键字增加反引号 -->\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!--覆盖生成XML文件-->\n        <plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" />\n        <!-- 生成的实体类添加toString()方法 -->\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/>\n\n        <!-- 不生成注释 -->\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"\n                        userId=\"wiki\"\n                        password=\"123456\">\n        </jdbcConnection>\n\n        <!-- domain类的位置 -->\n        <javaModelGenerator targetProject=\"src/main/java\"\n                            targetPackage=\"top.faroz.pojo\"/>\n\n        <!-- mapper xml的位置 -->\n        <sqlMapGenerator targetProject=\"src/main/resources\"\n                         targetPackage=\"mapper\"/>\n\n        <!-- mapper类的位置 -->\n        <javaClientGenerator targetProject=\"src/main/java\"\n                             targetPackage=\"top.faroz.mapper\"\n                             type=\"XMLMAPPER\"/>\n\n        <table tableName=\"demo\" domainObjectName=\"Demo\"/>\n        <!--<table tableName=\"ebook\"/>-->\n        <!--<table tableName=\"category\"/>-->\n        <!--<table tableName=\"doc\"/>-->\n        <!--<table tableName=\"content\"/>-->\n        <!--<table tableName=\"user\"/>-->\n        <!--<table tableName=\"ebook_snapshot\"/>-->\n    </context>\n</generatorConfiguration>\n```\n\n\n\n* 新建一个maven启动项\n\n![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)\n\n![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)\n\n```bash\nmybatis-generator:generate -e\n```\n\n![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)\n\n\n\n### 7. 测试代码生成器\n\n代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表\n\n\n\n* all.sql 添加 demo 表的增加 SQL 语句，并执行\n\n```sql\n# demo列表\ndrop table if exists `demo`;\ncreate table `demo` (\n    `id` bigint not null comment 'id',\n    `name` varchar(50) comment '名称',\n    primary key (`id`)\n) engine=innodb default charset =utf8mb4 comment '测试';\n\ninsert into `demo` (id,name) values(2,'测试2');\n```\n\n\n\n* 在代码生成器最后的部分，填上要生成的表名\n\n![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)\n\n\n\n* 执行\n\n![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)\n\n\n\n* 执行成功，会生成 4 个新文件\n\n![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)\n\n\n\n* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码\n\n```java\n@RestController\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"/demo/list\")\n    public List<Demo> list() {\n        return demoService.getList();\n    }\n}\n```\n\n```java\n@Service\npublic class DemoService {\n\n    @Resource\n    private DemoMapper demoMapper;\n\n    public List<Demo> getList() {\n        List<Demo> list = demoMapper.selectByExample(null);\n        return list;\n    }\n}\n```\n\n\n\n* 添加 demo 的 http 测试脚本\n\n```http\nGET http://localhost:8880/demo/list\nAccept: application/json\n\n###\n```\n\n测试成功，说明我们用代码生成器生成的代码没有问题\n\n![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)\n\n\n\n### 8. 解决前后端跨域问题\n\n虽然现在还没有构建前端项目，但是后面，会出现跨域问题\n\n\n\n* 新建 CorsConfig 类\n\n![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)\n\n\n\n* 代码如下\n\n不用改动，直接用，别忘了加上==@Configuration==注解\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedHeaders(CorsConfiguration.ALL)\n                .allowedMethods(CorsConfiguration.ALL)\n                .allowCredentials(true)\n                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）\n    }\n}\n```\n\n\n\n### 9. 添加雪花算法工具类\n\n雪花算法，用来生成唯一 ID\n\n\n\n* 新建 SnowFlake 工具类\n\n![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)\n\n\n\n* 代码如下\n\n别忘了加上 @Component 注解\n\n```java\n@Component\npublic class SnowFlake {\n    /**\n     * 起始的时间戳\n     */\n    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00\n\n    /**\n     * 每一部分占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12; //序列号占用的位数\n    private final static long MACHINE_BIT = 5;   //机器标识占用的位数\n    private final static long DATACENTER_BIT = 5;//数据中心占用的位数\n\n    /**\n     * 每一部分的最大值\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * 每一部分向左的位移\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId = 1;  //数据中心\n    private long machineId = 1;     //机器标识\n    private long sequence = 0L; //序列号\n    private long lastStmp = -1L;//上一次时间戳\n\n    public SnowFlake() {\n    }\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * 产生下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");\n        }\n\n        if (currStmp == lastStmp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分\n                | datacenterId << DATACENTER_LEFT       //数据中心部分\n                | machineId << MACHINE_LEFT             //机器标识部分\n                | sequence;                             //序列号部分\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    // public static void main(String[] args) throws ParseException {\n    //     // 时间戳\n    //     // System.out.println(System.currentTimeMillis());\n    //     // System.out.println(new Date().getTime());\n    //     //\n    //     // String dateTime = \"2021-01-01 08:00:00\";\n    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n    //     // System.out.println(sdf.parse(dateTime).getTime());\n    //\n    //     SnowFlake snowFlake = new SnowFlake(1, 1);\n    //\n    //     long start = System.currentTimeMillis();\n    //     for (int i = 0; i < 10; i++) {\n    //         System.out.println(snowFlake.nextId());\n    //         System.out.println(System.currentTimeMillis() - start);\n    //     }\n    // }\n\n}\n```\n\n\n\n\n\n### 10. 添加 AOP\n\nAOP 用来打印接口日志，方便后期调试\n\n\n\n* Maven 中引入 fastjson，因为 我们的类中要用\n\n```xml\n <!--fastjson-->\n<dependency>\n  <groupId>com.alibaba</groupId>\n  <artifactId>fastjson</artifactId>\n  <version>1.2.70</version>\n</dependency>\n```\n\n\n\n* Maven 引入 AOP\n\n```xml\n<!--导入aop-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n\n\n* 添加 RequestContext 工具类\n\n这个是后期为了打印 WebSocket 日志的\n\n![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)\n\n```java\npublic class RequestContext implements Serializable {\n    private static ThreadLocal<String> remoteAddr = new ThreadLocal<>();\n\n    public static String getRemoteAddr() {\n        return remoteAddr.get();\n    }\n\n    public static void setRemoteAddr(String remoteAddr) {\n        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);\n    }\n}\n```\n\n\n\n* 新建 aspect 包，并新建 LogAspect 类\n\n![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)\n\n\n\n**LogAspect 代码如下:**\n\n切点的代码，我们要依据项目修改\n\n![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)\n\n```java\n@Aspect\n@Component\npublic class LogAspect {\n    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);\n\n    @Resource\n    private SnowFlake snowFlake;\n\n    /** 定义一个切点 */\n    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")\n    public void controllerPointcut() {}\n\n    // @Resource\n    // private SnowFlake snowFlake;\n\n    @Before(\"controllerPointcut()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n\n        // 增加日志流水号\n        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));\n\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Signature signature = joinPoint.getSignature();\n        String name = signature.getName();\n\n        // 打印请求信息\n        LOG.info(\"------------- 开始 -------------\");\n        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());\n        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);\n        LOG.info(\"远程地址: {}\", request.getRemoteAddr());\n\n        RequestContext.setRemoteAddr(getRemoteIp(request));\n\n        // 拿到所有的参数\n        Object[] args = joinPoint.getArgs();\n        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));\n\n        Object[] arguments  = new Object[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof ServletRequest\n                    || args[i] instanceof ServletResponse\n                    || args[i] instanceof MultipartFile) {\n                continue;\n            }\n            arguments[i] = args[i];\n        }\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));\n    }\n\n    @Around(\"controllerPointcut()\")\n    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = proceedingJoinPoint.proceed();\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));\n        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);\n        return result;\n    }\n\n    /**\n     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP\n     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突\n     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径\n     * @param request\n     * @return\n     */\n    public String getRemoteIp(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n```\n\n\n\n### 11. 解决前后端 Long 精度丢失问题\n\n我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失\n\n\n\n* 配置文件新增 JacksonConfig 类\n\n![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)\n\n\n\n* 代码如下\n\n```java\n@Configuration\npublic class JacksonConfig {\n\n    @Bean\n    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {\n        ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n        SimpleModule simpleModule = new SimpleModule();\n        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        objectMapper.registerModule(simpleModule);\n        return objectMapper;\n    }\n}\n```\n\n\n\n### 12. 新建 req resp 包\n\n我们要将请求与返回包装\n\n![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)\n\n\n\n### 13. CommonResp\n\n为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp\n\n![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)\n\n**代码如下：**\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommonResp<T> {\n    /**\n     * 返回是否成功\n     */\n    private boolean isSuccess=true;\n\n    /**\n     * 返回失败时，返回的错误信息\n     */\n    private String message;\n\n    /**\n     * 返回成功的时候，返回的内容\n     */\n    private T content;\n}\n```\n\n\n\n### 14. 自定义异常\n\n* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`\n\n![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)\n\n\n\n* `BusinessException`代码\n\n```java\npublic class BusinessException extends RuntimeException{\n    private BusinessExceptionCode code;\n\n    public BusinessException (BusinessExceptionCode code) {\n        /**\n         * 父类有个成员变量  private String desc\n         * 需要为这个成员变量赋值\n         */\n        super(code.getDesc());\n        this.code = code;\n    }\n\n    public BusinessExceptionCode getCode() {\n        return code;\n    }\n\n    public void setCode(BusinessExceptionCode code) {\n        this.code = code;\n    }\n\n    /**\n     * 不写入堆栈信息，提高性能\n     */\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n}\n```\n\n\n\n* `BusinessExceptionCode`代码\n\n```java\npublic enum BusinessExceptionCode {\n    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),\n    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),\n    VOTE_REPEAT(\"您已点赞过\"),\n    ;\n\n    private String desc;\n\n    BusinessExceptionCode(String desc) {\n        this.desc = desc;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n}\n```\n\n\n\n\n\n### 13. 统一异常处理\n\n我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp\n\n\n\n* 新建 ControllerExceptionHandler 类\n\n![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)\n\n\n\n* 代码如下\n\nlogger 要根据项目改一下\n\n```java\n/**\n * 统一异常处理、数据预处理等\n * 该类用于捕获系统弹出的异常\n * 将异常包装成一个 CommonResp\n * 从而方便前端调用，显示错误信息\n */\n@ControllerAdvice\npublic class ControllerExceptionHandler {\n    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BindException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BindException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BusinessException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BusinessException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getCode().getDesc());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(Exception e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.error(\"系统异常：\", e);\n        commonResp.setSuccess(false);\n        commonResp.setMessage(\"系统出现异常，请联系管理员\");\n        return commonResp;\n    }\n}\n```\n\n\n\n### 14. 添加日志记录 logback\n\n* 在 resource 下，新建logback-spring.xml 文件\n\n![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)\n\n* 写入内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <!-- 修改一下路径-->\n    <property name=\"PATH\" value=\"./log\"></property>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n</Pattern>\n            <!--<Pattern>%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n</Pattern>-->\n        </encoder>\n    </appender>\n\n    <appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/trace.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/trace.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n\n    <root level=\"TRACE\">\n        <appender-ref ref=\"TRACE_FILE\" />\n    </root>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n\n```\n\n\n\n### 15. 自定义 banner\n\nresources 下新建 banner.txt\n\n![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)\n\n\n\n里面放上自定义 banner\n\n```txt\n ********     **     *******     *******         ********\n/**/////     ****   /**////**   **/////**       //////** \n/**         **//**  /**   /**  **     //**           **  \n/*******   **  //** /*******  /**      /**          **   \n/**////   **********/**///**  /**      /**         **    \n/**      /**//////**/**  //** //**     **         **     \n/**      /**     /**/**   //** //*******   ***** ********\n//       //      // //     //   ///////   ///// //////// \n```\n\n\n\n\n","success":true}
2021-04-16 00:56:30.738 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 00:56:35.233 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:35.233 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:35.233 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:56:35.233 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:56:35.233 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:56:35.233 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:56:35.234 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:35.234 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:35.234 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:56:35.234 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:56:35.236 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:56:35.236 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:56:35.240 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程\n\n虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。\n\n这次将创建的整个流程记录下来，方便以后的项目搭建。\n\n要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==\n\n如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了\n\n\n\n## 数据库\n\n一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限\n\n\n\n### 1. **连接 admin**\n\n只有 admin 有所有权限\n\n我的数据库 admin 的账户名和密码是：\n\n**账户：**admin\n\n**密码：**123\n\n![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)\n\n\n\n### 2. **新建数据库**\n\n其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号\n\n![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)\n\n### 3. **为这个数据库，专门建一个用户**\n\n开发环境中，就将密码和用户名设置成一样的，这样不会忘记\n\nhost 设置为 localhost\n\n![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)\n\n\n\n### 4. **为这个用户，授予对应数据库的全部权限**\n\n![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)\n\n![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)\n\n### 5. **对当前用户，建立连接**\n\n![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)\n\n\n\n\n\n## 后端\n\n关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。\n\n### 1. 新建 SpringBoot 项目\n\n* 点击 `SpringInitiallizr`，新建项目\n\n![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)\n\n* 选择默认依赖的包\n\n![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)\n\n![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)\n\n![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)\n\n* 选择存放路径\n\n![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)\n\n* 新建完成后，项目目录如下\n\n![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)\n\n\n\n### 2. 更改启动类位置\n\n* 新建 config 包，将启动类放进去\n\n![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)\n\n\n\n* 为启动类添加注解\n\n注解内的信息，是项目名称\n\n```java\n@ComponentScan(\"weixindemo\")\n```\n\n![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)\n\n\n\n### 3. IDEA 数据库配置\n\n* IDEA 连接数据库\n\n![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)\n\n![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)\n\n\n\n* 添加 sql 脚本\n\n新建 sql 文件夹，建立`all.sql`文件\n\n![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)\n\n\n\n我们在 sql 脚本中添加测试用数据，并执行\n\n```sql\n\n# 测试表\ndrop table if exists `test`;\ncreate table `test` (\n  `id` bigint not null comment 'id',\n  `name` varchar(50) comment '名称',\n  `password` varchar(50) comment '密码',\n  primary key (`id`)\n) engine=innodb default charset=utf8mb4 comment='测试';\n\ninsert into `test` (id, name, password) values (1, '测试', 'password');       \n```\n\n可以看到，数据库已建立\n\n![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)\n\n\n\n### 4. 配置 MyBatis\n\n* 在 `resource`文件夹下，新建 `mapper`文件夹\n\n这是用来存放 MyBatis 的实现的\n\n![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)\n\n\n\n* 新建 pojo 包\n\npojo 包用来存放实体类\n\n![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)\n\n\n\n* 在项目下，新建 mapper 包，用来存放接口\n\n![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)\n\n\n\n* 将配置文件后缀改为`.yml`\n\n我个人习惯使用`.yml`进行位置\n\n![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)\n\n\n\n* 添加 `Mybatis`配置\n\n这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&characterEncoding=utf-8\n    username: weixindemo\n    password: weixindemo\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    \n    \n# 整合Mybatis\nmybatis:\n  # ** 表示在mapper下不管有多少文件夹，都可以全部识别\n  mapper-locations: classpath:/mapper/**/*.xml\n  type-aliases-package: weixindemo.pojo\n  #  打印sql相关的日志信息\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)\n\n\n\n* 添加端口配置\n\n因为 vue 也是用的8080端口，我们不能和它重了\n\n```yml\nserver:\n  port: 8880\n```\n\n\n\n* 启动类添加`mapper`接口扫描路径\n\n```java\n@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描\n```\n\n![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)\n\n\n\n### 5. MVC 包建立\n\n我们还要建立 ==service==，==util==，==controller==包\n\n![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)\n\n![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)\n\n\n\n### 5. 测试 Mybatis 配置\n\n配置到这一步，要对之前的配置，进行一个测试\n\n* pojo 中，新建 Test 实体类\n\n![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Test {\n    private Integer id;\n    private String name;\n}\n```\n\n\n\n* mapper 包中，新建 TestMapper 接口\n\n![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)\n\n```java\n@Repository\n@Mapper\npublic interface TestMapper {\n    List<Test> getList();\n}\n```\n\n\n\n* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现\n\n  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)\n\n具体内容，要根据实际项目修改\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace要和接口的位置和名字对应-->\n<mapper namespace=\"weixindemo.mapper.TestMapper\">\n\n    <select id=\"getList\" resultType=\"weixindemo.pojo.Test\">\n        select * from test\n    </select>\n\n</mapper>\n```\n\n![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)\n\n\n\n* 在 service 包下，新建 TestService\n\n![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)\n\n别忘了加上 @Service 注解\n\n```java\n@Service\npublic class TestService {\n\n    @Autowired\n    private TestMapper mapper;\n\n    public List<Test> getList() {\n        return mapper.getList();\n    }\n}\n```\n\n\n\n* 在 controller包下，新建 TestController\n\n![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)\n\n```java\n@RestController\npublic class TestController {\n\n    @Autowired\n    private TestService testService;\n    \n\n    @RequestMapping(\"/test/list\")\n    public List<Test> list() {\n        return testService.getList();\n    }\n\n}\n```\n\n\n\n* 重启项目\n\n\n\n* 新建 http 文件，编写 http 测试脚本，执行\n\n![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)\n\n```http\nGET http://localhost:8880/test/list\nAccept: application/json\n\n###\n```\n\n\n\n最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作\n\n![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)\n\n\n\n### 6. MyBatis 代码生成器\n\n我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的\n\n\n\n* 导入 Maven 依赖\n\n注意，==是放在`plugiuns`下面的==\n\n```xml\n<!-- mybatis generator 自动生成代码插件 -->\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.4.0</version>\n                <configuration>\n                    <configurationFile>src/main/resources/generator/generator-config.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>8.0.22</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n\n\n* 建立代生成器位置\n\npom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`\n\n```xml\n<configurationFile>\n  src/main/resources/generator/generator-config.xml\n</configurationFile>\n```\n\n![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)\n\n\n\n* 代码生成器代码\n\n从`jdbcConnection`开始，别忘了==根据项目进行修改==\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n\n        <!-- 自动检查关键字，为关键字增加反引号 -->\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!--覆盖生成XML文件-->\n        <plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" />\n        <!-- 生成的实体类添加toString()方法 -->\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/>\n\n        <!-- 不生成注释 -->\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"\n                        userId=\"wiki\"\n                        password=\"123456\">\n        </jdbcConnection>\n\n        <!-- domain类的位置 -->\n        <javaModelGenerator targetProject=\"src/main/java\"\n                            targetPackage=\"top.faroz.pojo\"/>\n\n        <!-- mapper xml的位置 -->\n        <sqlMapGenerator targetProject=\"src/main/resources\"\n                         targetPackage=\"mapper\"/>\n\n        <!-- mapper类的位置 -->\n        <javaClientGenerator targetProject=\"src/main/java\"\n                             targetPackage=\"top.faroz.mapper\"\n                             type=\"XMLMAPPER\"/>\n\n        <table tableName=\"demo\" domainObjectName=\"Demo\"/>\n        <!--<table tableName=\"ebook\"/>-->\n        <!--<table tableName=\"category\"/>-->\n        <!--<table tableName=\"doc\"/>-->\n        <!--<table tableName=\"content\"/>-->\n        <!--<table tableName=\"user\"/>-->\n        <!--<table tableName=\"ebook_snapshot\"/>-->\n    </context>\n</generatorConfiguration>\n```\n\n\n\n* 新建一个maven启动项\n\n![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)\n\n![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)\n\n```bash\nmybatis-generator:generate -e\n```\n\n![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)\n\n\n\n### 7. 测试代码生成器\n\n代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表\n\n\n\n* all.sql 添加 demo 表的增加 SQL 语句，并执行\n\n```sql\n# demo列表\ndrop table if exists `demo`;\ncreate table `demo` (\n    `id` bigint not null comment 'id',\n    `name` varchar(50) comment '名称',\n    primary key (`id`)\n) engine=innodb default charset =utf8mb4 comment '测试';\n\ninsert into `demo` (id,name) values(2,'测试2');\n```\n\n\n\n* 在代码生成器最后的部分，填上要生成的表名\n\n![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)\n\n\n\n* 执行\n\n![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)\n\n\n\n* 执行成功，会生成 4 个新文件\n\n![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)\n\n\n\n* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码\n\n```java\n@RestController\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"/demo/list\")\n    public List<Demo> list() {\n        return demoService.getList();\n    }\n}\n```\n\n```java\n@Service\npublic class DemoService {\n\n    @Resource\n    private DemoMapper demoMapper;\n\n    public List<Demo> getList() {\n        List<Demo> list = demoMapper.selectByExample(null);\n        return list;\n    }\n}\n```\n\n\n\n* 添加 demo 的 http 测试脚本\n\n```http\nGET http://localhost:8880/demo/list\nAccept: application/json\n\n###\n```\n\n测试成功，说明我们用代码生成器生成的代码没有问题\n\n![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)\n\n\n\n### 8. 解决前后端跨域问题\n\n虽然现在还没有构建前端项目，但是后面，会出现跨域问题\n\n\n\n* 新建 CorsConfig 类\n\n![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)\n\n\n\n* 代码如下\n\n不用改动，直接用，别忘了加上==@Configuration==注解\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedHeaders(CorsConfiguration.ALL)\n                .allowedMethods(CorsConfiguration.ALL)\n                .allowCredentials(true)\n                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）\n    }\n}\n```\n\n\n\n### 9. 添加雪花算法工具类\n\n雪花算法，用来生成唯一 ID\n\n\n\n* 新建 SnowFlake 工具类\n\n![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)\n\n\n\n* 代码如下\n\n别忘了加上 @Component 注解\n\n```java\n@Component\npublic class SnowFlake {\n    /**\n     * 起始的时间戳\n     */\n    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00\n\n    /**\n     * 每一部分占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12; //序列号占用的位数\n    private final static long MACHINE_BIT = 5;   //机器标识占用的位数\n    private final static long DATACENTER_BIT = 5;//数据中心占用的位数\n\n    /**\n     * 每一部分的最大值\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * 每一部分向左的位移\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId = 1;  //数据中心\n    private long machineId = 1;     //机器标识\n    private long sequence = 0L; //序列号\n    private long lastStmp = -1L;//上一次时间戳\n\n    public SnowFlake() {\n    }\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * 产生下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");\n        }\n\n        if (currStmp == lastStmp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分\n                | datacenterId << DATACENTER_LEFT       //数据中心部分\n                | machineId << MACHINE_LEFT             //机器标识部分\n                | sequence;                             //序列号部分\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    // public static void main(String[] args) throws ParseException {\n    //     // 时间戳\n    //     // System.out.println(System.currentTimeMillis());\n    //     // System.out.println(new Date().getTime());\n    //     //\n    //     // String dateTime = \"2021-01-01 08:00:00\";\n    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n    //     // System.out.println(sdf.parse(dateTime).getTime());\n    //\n    //     SnowFlake snowFlake = new SnowFlake(1, 1);\n    //\n    //     long start = System.currentTimeMillis();\n    //     for (int i = 0; i < 10; i++) {\n    //         System.out.println(snowFlake.nextId());\n    //         System.out.println(System.currentTimeMillis() - start);\n    //     }\n    // }\n\n}\n```\n\n\n\n\n\n### 10. 添加 AOP\n\nAOP 用来打印接口日志，方便后期调试\n\n\n\n* Maven 中引入 fastjson，因为 我们的类中要用\n\n```xml\n <!--fastjson-->\n<dependency>\n  <groupId>com.alibaba</groupId>\n  <artifactId>fastjson</artifactId>\n  <version>1.2.70</version>\n</dependency>\n```\n\n\n\n* Maven 引入 AOP\n\n```xml\n<!--导入aop-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n\n\n* 添加 RequestContext 工具类\n\n这个是后期为了打印 WebSocket 日志的\n\n![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)\n\n```java\npublic class RequestContext implements Serializable {\n    private static ThreadLocal<String> remoteAddr = new ThreadLocal<>();\n\n    public static String getRemoteAddr() {\n        return remoteAddr.get();\n    }\n\n    public static void setRemoteAddr(String remoteAddr) {\n        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);\n    }\n}\n```\n\n\n\n* 新建 aspect 包，并新建 LogAspect 类\n\n![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)\n\n\n\n**LogAspect 代码如下:**\n\n切点的代码，我们要依据项目修改\n\n![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)\n\n```java\n@Aspect\n@Component\npublic class LogAspect {\n    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);\n\n    @Resource\n    private SnowFlake snowFlake;\n\n    /** 定义一个切点 */\n    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")\n    public void controllerPointcut() {}\n\n    // @Resource\n    // private SnowFlake snowFlake;\n\n    @Before(\"controllerPointcut()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n\n        // 增加日志流水号\n        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));\n\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Signature signature = joinPoint.getSignature();\n        String name = signature.getName();\n\n        // 打印请求信息\n        LOG.info(\"------------- 开始 -------------\");\n        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());\n        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);\n        LOG.info(\"远程地址: {}\", request.getRemoteAddr());\n\n        RequestContext.setRemoteAddr(getRemoteIp(request));\n\n        // 拿到所有的参数\n        Object[] args = joinPoint.getArgs();\n        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));\n\n        Object[] arguments  = new Object[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof ServletRequest\n                    || args[i] instanceof ServletResponse\n                    || args[i] instanceof MultipartFile) {\n                continue;\n            }\n            arguments[i] = args[i];\n        }\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));\n    }\n\n    @Around(\"controllerPointcut()\")\n    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = proceedingJoinPoint.proceed();\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));\n        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);\n        return result;\n    }\n\n    /**\n     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP\n     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突\n     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径\n     * @param request\n     * @return\n     */\n    public String getRemoteIp(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n```\n\n\n\n### 11. 解决前后端 Long 精度丢失问题\n\n我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失\n\n\n\n* 配置文件新增 JacksonConfig 类\n\n![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)\n\n\n\n* 代码如下\n\n```java\n@Configuration\npublic class JacksonConfig {\n\n    @Bean\n    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {\n        ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n        SimpleModule simpleModule = new SimpleModule();\n        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        objectMapper.registerModule(simpleModule);\n        return objectMapper;\n    }\n}\n```\n\n\n\n### 12. 新建 req resp 包\n\n我们要将请求与返回包装\n\n![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)\n\n\n\n### 13. CommonResp\n\n为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp\n\n![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)\n\n**代码如下：**\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommonResp<T> {\n    /**\n     * 返回是否成功\n     */\n    private boolean isSuccess=true;\n\n    /**\n     * 返回失败时，返回的错误信息\n     */\n    private String message;\n\n    /**\n     * 返回成功的时候，返回的内容\n     */\n    private T content;\n}\n```\n\n\n\n### 14. 自定义异常\n\n* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`\n\n![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)\n\n\n\n* `BusinessException`代码\n\n```java\npublic class BusinessException extends RuntimeException{\n    private BusinessExceptionCode code;\n\n    public BusinessException (BusinessExceptionCode code) {\n        /**\n         * 父类有个成员变量  private String desc\n         * 需要为这个成员变量赋值\n         */\n        super(code.getDesc());\n        this.code = code;\n    }\n\n    public BusinessExceptionCode getCode() {\n        return code;\n    }\n\n    public void setCode(BusinessExceptionCode code) {\n        this.code = code;\n    }\n\n    /**\n     * 不写入堆栈信息，提高性能\n     */\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n}\n```\n\n\n\n* `BusinessExceptionCode`代码\n\n```java\npublic enum BusinessExceptionCode {\n    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),\n    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),\n    VOTE_REPEAT(\"您已点赞过\"),\n    ;\n\n    private String desc;\n\n    BusinessExceptionCode(String desc) {\n        this.desc = desc;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n}\n```\n\n\n\n\n\n### 13. 统一异常处理\n\n我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp\n\n\n\n* 新建 ControllerExceptionHandler 类\n\n![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)\n\n\n\n* 代码如下\n\nlogger 要根据项目改一下\n\n```java\n/**\n * 统一异常处理、数据预处理等\n * 该类用于捕获系统弹出的异常\n * 将异常包装成一个 CommonResp\n * 从而方便前端调用，显示错误信息\n */\n@ControllerAdvice\npublic class ControllerExceptionHandler {\n    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BindException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BindException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BusinessException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BusinessException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getCode().getDesc());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(Exception e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.error(\"系统异常：\", e);\n        commonResp.setSuccess(false);\n        commonResp.setMessage(\"系统出现异常，请联系管理员\");\n        return commonResp;\n    }\n}\n```\n\n\n\n### 14. 添加日志记录 logback\n\n* 在 resource 下，新建logback-spring.xml 文件\n\n![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)\n\n* 写入内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <!-- 修改一下路径-->\n    <property name=\"PATH\" value=\"./log\"></property>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n</Pattern>\n            <!--<Pattern>%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n</Pattern>-->\n        </encoder>\n    </appender>\n\n    <appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/trace.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/trace.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n\n    <root level=\"TRACE\">\n        <appender-ref ref=\"TRACE_FILE\" />\n    </root>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n\n```\n\n\n\n### 15. 自定义 banner\n\nresources 下新建 banner.txt\n\n![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)\n\n\n\n里面放上自定义 banner\n\n```txt\n ********     **     *******     *******         ********\n/**/////     ****   /**////**   **/////**       //////** \n/**         **//**  /**   /**  **     //**           **  \n/*******   **  //** /*******  /**      /**          **   \n/**////   **********/**///**  /**      /**         **    \n/**      /**//////**/**  //** //**     **         **     \n/**      /**     /**/**   //** //*******   ***** ********\n//       //      // //     //   ///////   ///// //////// \n```\n\n\n\n\n","success":true}
2021-04-16 00:56:35.243 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：10 ms -------------
2021-04-16 00:56:38.888 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:38.888 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:56:38.889 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:56:38.889 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:38.889 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:56:38.897 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:56:38.897 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：9 ms -------------
2021-04-16 00:56:39.662 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:39.663 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:56:39.663 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:56:39.664 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:39.665 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:56:39.669 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:56:39.670 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:56:41.410 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:41.410 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:56:41.411 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:56:41.411 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:56:41.411 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:56:41.411 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:56:41.411 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:41.411 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:56:41.411 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:56:41.412 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:56:41.414 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:56:41.414 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 00:56:41.416 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程\n\n虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。\n\n这次将创建的整个流程记录下来，方便以后的项目搭建。\n\n要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==\n\n如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了\n\n\n\n## 数据库\n\n一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限\n\n\n\n### 1. **连接 admin**\n\n只有 admin 有所有权限\n\n我的数据库 admin 的账户名和密码是：\n\n**账户：**admin\n\n**密码：**123\n\n![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)\n\n\n\n### 2. **新建数据库**\n\n其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号\n\n![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)\n\n### 3. **为这个数据库，专门建一个用户**\n\n开发环境中，就将密码和用户名设置成一样的，这样不会忘记\n\nhost 设置为 localhost\n\n![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)\n\n\n\n### 4. **为这个用户，授予对应数据库的全部权限**\n\n![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)\n\n![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)\n\n### 5. **对当前用户，建立连接**\n\n![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)\n\n\n\n\n\n## 后端\n\n关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。\n\n### 1. 新建 SpringBoot 项目\n\n* 点击 `SpringInitiallizr`，新建项目\n\n![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)\n\n* 选择默认依赖的包\n\n![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)\n\n![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)\n\n![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)\n\n* 选择存放路径\n\n![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)\n\n* 新建完成后，项目目录如下\n\n![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)\n\n\n\n### 2. 更改启动类位置\n\n* 新建 config 包，将启动类放进去\n\n![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)\n\n\n\n* 为启动类添加注解\n\n注解内的信息，是项目名称\n\n```java\n@ComponentScan(\"weixindemo\")\n```\n\n![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)\n\n\n\n### 3. IDEA 数据库配置\n\n* IDEA 连接数据库\n\n![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)\n\n![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)\n\n\n\n* 添加 sql 脚本\n\n新建 sql 文件夹，建立`all.sql`文件\n\n![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)\n\n\n\n我们在 sql 脚本中添加测试用数据，并执行\n\n```sql\n\n# 测试表\ndrop table if exists `test`;\ncreate table `test` (\n  `id` bigint not null comment 'id',\n  `name` varchar(50) comment '名称',\n  `password` varchar(50) comment '密码',\n  primary key (`id`)\n) engine=innodb default charset=utf8mb4 comment='测试';\n\ninsert into `test` (id, name, password) values (1, '测试', 'password');       \n```\n\n可以看到，数据库已建立\n\n![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)\n\n\n\n### 4. 配置 MyBatis\n\n* 在 `resource`文件夹下，新建 `mapper`文件夹\n\n这是用来存放 MyBatis 的实现的\n\n![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)\n\n\n\n* 新建 pojo 包\n\npojo 包用来存放实体类\n\n![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)\n\n\n\n* 在项目下，新建 mapper 包，用来存放接口\n\n![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)\n\n\n\n* 将配置文件后缀改为`.yml`\n\n我个人习惯使用`.yml`进行位置\n\n![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)\n\n\n\n* 添加 `Mybatis`配置\n\n这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&characterEncoding=utf-8\n    username: weixindemo\n    password: weixindemo\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    \n    \n# 整合Mybatis\nmybatis:\n  # ** 表示在mapper下不管有多少文件夹，都可以全部识别\n  mapper-locations: classpath:/mapper/**/*.xml\n  type-aliases-package: weixindemo.pojo\n  #  打印sql相关的日志信息\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n\n![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)\n\n\n\n* 添加端口配置\n\n因为 vue 也是用的8080端口，我们不能和它重了\n\n```yml\nserver:\n  port: 8880\n```\n\n\n\n* 启动类添加`mapper`接口扫描路径\n\n```java\n@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描\n```\n\n![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)\n\n\n\n### 5. MVC 包建立\n\n我们还要建立 ==service==，==util==，==controller==包\n\n![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)\n\n![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)\n\n\n\n### 5. 测试 Mybatis 配置\n\n配置到这一步，要对之前的配置，进行一个测试\n\n* pojo 中，新建 Test 实体类\n\n![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Test {\n    private Integer id;\n    private String name;\n}\n```\n\n\n\n* mapper 包中，新建 TestMapper 接口\n\n![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)\n\n```java\n@Repository\n@Mapper\npublic interface TestMapper {\n    List<Test> getList();\n}\n```\n\n\n\n* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现\n\n  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)\n\n具体内容，要根据实际项目修改\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace要和接口的位置和名字对应-->\n<mapper namespace=\"weixindemo.mapper.TestMapper\">\n\n    <select id=\"getList\" resultType=\"weixindemo.pojo.Test\">\n        select * from test\n    </select>\n\n</mapper>\n```\n\n![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)\n\n\n\n* 在 service 包下，新建 TestService\n\n![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)\n\n别忘了加上 @Service 注解\n\n```java\n@Service\npublic class TestService {\n\n    @Autowired\n    private TestMapper mapper;\n\n    public List<Test> getList() {\n        return mapper.getList();\n    }\n}\n```\n\n\n\n* 在 controller包下，新建 TestController\n\n![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)\n\n```java\n@RestController\npublic class TestController {\n\n    @Autowired\n    private TestService testService;\n    \n\n    @RequestMapping(\"/test/list\")\n    public List<Test> list() {\n        return testService.getList();\n    }\n\n}\n```\n\n\n\n* 重启项目\n\n\n\n* 新建 http 文件，编写 http 测试脚本，执行\n\n![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)\n\n```http\nGET http://localhost:8880/test/list\nAccept: application/json\n\n###\n```\n\n\n\n最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作\n\n![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)\n\n\n\n### 6. MyBatis 代码生成器\n\n我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的\n\n\n\n* 导入 Maven 依赖\n\n注意，==是放在`plugiuns`下面的==\n\n```xml\n<!-- mybatis generator 自动生成代码插件 -->\n            <plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.4.0</version>\n                <configuration>\n                    <configurationFile>src/main/resources/generator/generator-config.xml</configurationFile>\n                    <overwrite>true</overwrite>\n                    <verbose>true</verbose>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>8.0.22</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n\n\n* 建立代生成器位置\n\npom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`\n\n```xml\n<configurationFile>\n  src/main/resources/generator/generator-config.xml\n</configurationFile>\n```\n\n![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)\n\n\n\n* 代码生成器代码\n\n从`jdbcConnection`开始，别忘了==根据项目进行修改==\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n<generatorConfiguration>\n    <context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\">\n\n        <!-- 自动检查关键字，为关键字增加反引号 -->\n        <property name=\"autoDelimitKeywords\" value=\"true\"/>\n        <property name=\"beginningDelimiter\" value=\"`\"/>\n        <property name=\"endingDelimiter\" value=\"`\"/>\n\n        <!--覆盖生成XML文件-->\n        <plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" />\n        <!-- 生成的实体类添加toString()方法 -->\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/>\n\n        <!-- 不生成注释 -->\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"true\"/>\n        </commentGenerator>\n\n        <jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"\n                        userId=\"wiki\"\n                        password=\"123456\">\n        </jdbcConnection>\n\n        <!-- domain类的位置 -->\n        <javaModelGenerator targetProject=\"src/main/java\"\n                            targetPackage=\"top.faroz.pojo\"/>\n\n        <!-- mapper xml的位置 -->\n        <sqlMapGenerator targetProject=\"src/main/resources\"\n                         targetPackage=\"mapper\"/>\n\n        <!-- mapper类的位置 -->\n        <javaClientGenerator targetProject=\"src/main/java\"\n                             targetPackage=\"top.faroz.mapper\"\n                             type=\"XMLMAPPER\"/>\n\n        <table tableName=\"demo\" domainObjectName=\"Demo\"/>\n        <!--<table tableName=\"ebook\"/>-->\n        <!--<table tableName=\"category\"/>-->\n        <!--<table tableName=\"doc\"/>-->\n        <!--<table tableName=\"content\"/>-->\n        <!--<table tableName=\"user\"/>-->\n        <!--<table tableName=\"ebook_snapshot\"/>-->\n    </context>\n</generatorConfiguration>\n```\n\n\n\n* 新建一个maven启动项\n\n![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)\n\n![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)\n\n```bash\nmybatis-generator:generate -e\n```\n\n![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)\n\n\n\n### 7. 测试代码生成器\n\n代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表\n\n\n\n* all.sql 添加 demo 表的增加 SQL 语句，并执行\n\n```sql\n# demo列表\ndrop table if exists `demo`;\ncreate table `demo` (\n    `id` bigint not null comment 'id',\n    `name` varchar(50) comment '名称',\n    primary key (`id`)\n) engine=innodb default charset =utf8mb4 comment '测试';\n\ninsert into `demo` (id,name) values(2,'测试2');\n```\n\n\n\n* 在代码生成器最后的部分，填上要生成的表名\n\n![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)\n\n\n\n* 执行\n\n![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)\n\n\n\n* 执行成功，会生成 4 个新文件\n\n![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)\n\n\n\n* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码\n\n```java\n@RestController\npublic class DemoController {\n\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(\"/demo/list\")\n    public List<Demo> list() {\n        return demoService.getList();\n    }\n}\n```\n\n```java\n@Service\npublic class DemoService {\n\n    @Resource\n    private DemoMapper demoMapper;\n\n    public List<Demo> getList() {\n        List<Demo> list = demoMapper.selectByExample(null);\n        return list;\n    }\n}\n```\n\n\n\n* 添加 demo 的 http 测试脚本\n\n```http\nGET http://localhost:8880/demo/list\nAccept: application/json\n\n###\n```\n\n测试成功，说明我们用代码生成器生成的代码没有问题\n\n![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)\n\n\n\n### 8. 解决前后端跨域问题\n\n虽然现在还没有构建前端项目，但是后面，会出现跨域问题\n\n\n\n* 新建 CorsConfig 类\n\n![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)\n\n\n\n* 代码如下\n\n不用改动，直接用，别忘了加上==@Configuration==注解\n\n```java\n@Configuration\npublic class CorsConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedHeaders(CorsConfiguration.ALL)\n                .allowedMethods(CorsConfiguration.ALL)\n                .allowCredentials(true)\n                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）\n    }\n}\n```\n\n\n\n### 9. 添加雪花算法工具类\n\n雪花算法，用来生成唯一 ID\n\n\n\n* 新建 SnowFlake 工具类\n\n![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)\n\n\n\n* 代码如下\n\n别忘了加上 @Component 注解\n\n```java\n@Component\npublic class SnowFlake {\n    /**\n     * 起始的时间戳\n     */\n    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00\n\n    /**\n     * 每一部分占用的位数\n     */\n    private final static long SEQUENCE_BIT = 12; //序列号占用的位数\n    private final static long MACHINE_BIT = 5;   //机器标识占用的位数\n    private final static long DATACENTER_BIT = 5;//数据中心占用的位数\n\n    /**\n     * 每一部分的最大值\n     */\n    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT);\n    private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT);\n    private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT);\n\n    /**\n     * 每一部分向左的位移\n     */\n    private final static long MACHINE_LEFT = SEQUENCE_BIT;\n    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;\n    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;\n\n    private long datacenterId = 1;  //数据中心\n    private long machineId = 1;     //机器标识\n    private long sequence = 0L; //序列号\n    private long lastStmp = -1L;//上一次时间戳\n\n    public SnowFlake() {\n    }\n\n    public SnowFlake(long datacenterId, long machineId) {\n        if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) {\n            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");\n        }\n        if (machineId > MAX_MACHINE_NUM || machineId < 0) {\n            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");\n        }\n        this.datacenterId = datacenterId;\n        this.machineId = machineId;\n    }\n\n    /**\n     * 产生下一个ID\n     *\n     * @return\n     */\n    public synchronized long nextId() {\n        long currStmp = getNewstmp();\n        if (currStmp < lastStmp) {\n            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");\n        }\n\n        if (currStmp == lastStmp) {\n            //相同毫秒内，序列号自增\n            sequence = (sequence + 1) & MAX_SEQUENCE;\n            //同一毫秒的序列数已经达到最大\n            if (sequence == 0L) {\n                currStmp = getNextMill();\n            }\n        } else {\n            //不同毫秒内，序列号置为0\n            sequence = 0L;\n        }\n\n        lastStmp = currStmp;\n\n        return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分\n                | datacenterId << DATACENTER_LEFT       //数据中心部分\n                | machineId << MACHINE_LEFT             //机器标识部分\n                | sequence;                             //序列号部分\n    }\n\n    private long getNextMill() {\n        long mill = getNewstmp();\n        while (mill <= lastStmp) {\n            mill = getNewstmp();\n        }\n        return mill;\n    }\n\n    private long getNewstmp() {\n        return System.currentTimeMillis();\n    }\n\n    // public static void main(String[] args) throws ParseException {\n    //     // 时间戳\n    //     // System.out.println(System.currentTimeMillis());\n    //     // System.out.println(new Date().getTime());\n    //     //\n    //     // String dateTime = \"2021-01-01 08:00:00\";\n    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n    //     // System.out.println(sdf.parse(dateTime).getTime());\n    //\n    //     SnowFlake snowFlake = new SnowFlake(1, 1);\n    //\n    //     long start = System.currentTimeMillis();\n    //     for (int i = 0; i < 10; i++) {\n    //         System.out.println(snowFlake.nextId());\n    //         System.out.println(System.currentTimeMillis() - start);\n    //     }\n    // }\n\n}\n```\n\n\n\n\n\n### 10. 添加 AOP\n\nAOP 用来打印接口日志，方便后期调试\n\n\n\n* Maven 中引入 fastjson，因为 我们的类中要用\n\n```xml\n <!--fastjson-->\n<dependency>\n  <groupId>com.alibaba</groupId>\n  <artifactId>fastjson</artifactId>\n  <version>1.2.70</version>\n</dependency>\n```\n\n\n\n* Maven 引入 AOP\n\n```xml\n<!--导入aop-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n\n\n* 添加 RequestContext 工具类\n\n这个是后期为了打印 WebSocket 日志的\n\n![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)\n\n```java\npublic class RequestContext implements Serializable {\n    private static ThreadLocal<String> remoteAddr = new ThreadLocal<>();\n\n    public static String getRemoteAddr() {\n        return remoteAddr.get();\n    }\n\n    public static void setRemoteAddr(String remoteAddr) {\n        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);\n    }\n}\n```\n\n\n\n* 新建 aspect 包，并新建 LogAspect 类\n\n![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)\n\n\n\n**LogAspect 代码如下:**\n\n切点的代码，我们要依据项目修改\n\n![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)\n\n```java\n@Aspect\n@Component\npublic class LogAspect {\n    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);\n\n    @Resource\n    private SnowFlake snowFlake;\n\n    /** 定义一个切点 */\n    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")\n    public void controllerPointcut() {}\n\n    // @Resource\n    // private SnowFlake snowFlake;\n\n    @Before(\"controllerPointcut()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n\n        // 增加日志流水号\n        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));\n\n        // 开始打印请求日志\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Signature signature = joinPoint.getSignature();\n        String name = signature.getName();\n\n        // 打印请求信息\n        LOG.info(\"------------- 开始 -------------\");\n        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());\n        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);\n        LOG.info(\"远程地址: {}\", request.getRemoteAddr());\n\n        RequestContext.setRemoteAddr(getRemoteIp(request));\n\n        // 拿到所有的参数\n        Object[] args = joinPoint.getArgs();\n        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));\n\n        Object[] arguments  = new Object[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] instanceof ServletRequest\n                    || args[i] instanceof ServletResponse\n                    || args[i] instanceof MultipartFile) {\n                continue;\n            }\n            arguments[i] = args[i];\n        }\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));\n    }\n\n    @Around(\"controllerPointcut()\")\n    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        long startTime = System.currentTimeMillis();\n        Object result = proceedingJoinPoint.proceed();\n        // 排除字段，敏感字段或太长的字段不显示\n        String[] excludeProperties = {\"password\", \"file\"};\n        PropertyPreFilters filters = new PropertyPreFilters();\n        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();\n        excludefilter.addExcludes(excludeProperties);\n        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));\n        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);\n        return result;\n    }\n\n    /**\n     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP\n     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突\n     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径\n     * @param request\n     * @return\n     */\n    public String getRemoteIp(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n```\n\n\n\n### 11. 解决前后端 Long 精度丢失问题\n\n我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失\n\n\n\n* 配置文件新增 JacksonConfig 类\n\n![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)\n\n\n\n* 代码如下\n\n```java\n@Configuration\npublic class JacksonConfig {\n\n    @Bean\n    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {\n        ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n        SimpleModule simpleModule = new SimpleModule();\n        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);\n        objectMapper.registerModule(simpleModule);\n        return objectMapper;\n    }\n}\n```\n\n\n\n### 12. 新建 req resp 包\n\n我们要将请求与返回包装\n\n![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)\n\n\n\n### 13. CommonResp\n\n为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp\n\n![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)\n\n**代码如下：**\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommonResp<T> {\n    /**\n     * 返回是否成功\n     */\n    private boolean isSuccess=true;\n\n    /**\n     * 返回失败时，返回的错误信息\n     */\n    private String message;\n\n    /**\n     * 返回成功的时候，返回的内容\n     */\n    private T content;\n}\n```\n\n\n\n### 14. 自定义异常\n\n* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`\n\n![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)\n\n\n\n* `BusinessException`代码\n\n```java\npublic class BusinessException extends RuntimeException{\n    private BusinessExceptionCode code;\n\n    public BusinessException (BusinessExceptionCode code) {\n        /**\n         * 父类有个成员变量  private String desc\n         * 需要为这个成员变量赋值\n         */\n        super(code.getDesc());\n        this.code = code;\n    }\n\n    public BusinessExceptionCode getCode() {\n        return code;\n    }\n\n    public void setCode(BusinessExceptionCode code) {\n        this.code = code;\n    }\n\n    /**\n     * 不写入堆栈信息，提高性能\n     */\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n}\n```\n\n\n\n* `BusinessExceptionCode`代码\n\n```java\npublic enum BusinessExceptionCode {\n    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),\n    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),\n    VOTE_REPEAT(\"您已点赞过\"),\n    ;\n\n    private String desc;\n\n    BusinessExceptionCode(String desc) {\n        this.desc = desc;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n}\n```\n\n\n\n\n\n### 13. 统一异常处理\n\n我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp\n\n\n\n* 新建 ControllerExceptionHandler 类\n\n![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)\n\n\n\n* 代码如下\n\nlogger 要根据项目改一下\n\n```java\n/**\n * 统一异常处理、数据预处理等\n * 该类用于捕获系统弹出的异常\n * 将异常包装成一个 CommonResp\n * 从而方便前端调用，显示错误信息\n */\n@ControllerAdvice\npublic class ControllerExceptionHandler {\n    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BindException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BindException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = BusinessException.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(BusinessException e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());\n        commonResp.setSuccess(false);\n        commonResp.setMessage(e.getCode().getDesc());\n        return commonResp;\n    }\n\n    /**\n     * 校验异常统一处理\n     * @param e\n     * @return\n     */\n    @ExceptionHandler(value = Exception.class)\n    @ResponseBody\n    public CommonResp validExceptionHandler(Exception e) {\n        CommonResp commonResp = new CommonResp();\n        LOG.error(\"系统异常：\", e);\n        commonResp.setSuccess(false);\n        commonResp.setMessage(\"系统出现异常，请联系管理员\");\n        return commonResp;\n    }\n}\n```\n\n\n\n### 14. 添加日志记录 logback\n\n* 在 resource 下，新建logback-spring.xml 文件\n\n![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)\n\n* 写入内容\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <!-- 修改一下路径-->\n    <property name=\"PATH\" value=\"./log\"></property>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n</Pattern>\n            <!--<Pattern>%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n</Pattern>-->\n        </encoder>\n    </appender>\n\n    <appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/trace.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/trace.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n    </appender>\n\n    <appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${PATH}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${PATH}/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>10MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n</pattern>\n        </layout>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <root level=\"ERROR\">\n        <appender-ref ref=\"ERROR_FILE\" />\n    </root>\n\n    <root level=\"TRACE\">\n        <appender-ref ref=\"TRACE_FILE\" />\n    </root>\n\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n\n```\n\n\n\n### 15. 自定义 banner\n\nresources 下新建 banner.txt\n\n![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)\n\n\n\n里面放上自定义 banner\n\n```txt\n ********     **     *******     *******         ********\n/**/////     ****   /**////**   **/////**       //////** \n/**         **//**  /**   /**  **     //**           **  \n/*******   **  //** /*******  /**      /**          **   \n/**////   **********/**///**  /**      /**         **    \n/**      /**//////**/**  //** //**     **         **     \n/**      /**     /**/**   //** //*******   ***** ********\n//       //      // //     //   ///////   ///// //////// \n```\n\n\n\n\n","success":true}
2021-04-16 00:56:41.418 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:57:03.815 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:57:03.816 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/save POST
2021-04-16 00:57:03.817 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.save
2021-04-16 00:57:03.818 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:57:03.845 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"content":"<p><br/># 完整项目搭建流程<br/><br/>虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。<br/><br/>这次将创建的整个流程记录下来，方便以后的项目搭建。<br/><br/>要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==<br/><br/>如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了<br/><br/><br/><br/>## 数据库<br/><br/>一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限<br/><br/><br/><br/>### 1. **连接 admin**<br/><br/>只有 admin 有所有权限<br/><br/>我的数据库 admin 的账户名和密码是：<br/><br/>**账户：**admin<br/><br/>**密码：**123<br/><br/>![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)<br/><br/><br/><br/>### 2. **新建数据库**<br/><br/>其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号<br/><br/>![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)<br/><br/>### 3. **为这个数据库，专门建一个用户**<br/><br/>开发环境中，就将密码和用户名设置成一样的，这样不会忘记<br/><br/>host 设置为 localhost<br/><br/>![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)<br/><br/><br/><br/>### 4. **为这个用户，授予对应数据库的全部权限**<br/><br/>![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)<br/><br/>![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)<br/><br/>### 5. **对当前用户，建立连接**<br/><br/>![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)<br/><br/><br/><br/><br/><br/>## 后端<br/><br/>关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。<br/><br/>### 1. 新建 SpringBoot 项目<br/><br/>* 点击 `SpringInitiallizr`，新建项目<br/><br/>![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)<br/><br/>* 选择默认依赖的包<br/><br/>![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)<br/><br/>![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)<br/><br/>![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)<br/><br/>* 选择存放路径<br/><br/>![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)<br/><br/>* 新建完成后，项目目录如下<br/><br/>![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)<br/><br/><br/><br/>### 2. 更改启动类位置<br/><br/>* 新建 config 包，将启动类放进去<br/><br/>![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)<br/><br/><br/><br/>* 为启动类添加注解<br/><br/>注解内的信息，是项目名称<br/><br/>```java<br/>@ComponentScan(\"weixindemo\")<br/>```<br/><br/>![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)<br/><br/><br/><br/>### 3. IDEA 数据库配置<br/><br/>* IDEA 连接数据库<br/><br/>![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)<br/><br/>![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)<br/><br/><br/><br/>* 添加 sql 脚本<br/><br/>新建 sql 文件夹，建立`all.sql`文件<br/><br/>![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)<br/><br/><br/><br/>我们在 sql 脚本中添加测试用数据，并执行<br/><br/>```sql<br/><br/># 测试表<br/>drop table if exists `test`;<br/>create table `test` (<br/>  `id` bigint not null comment 'id',<br/>  `name` varchar(50) comment '名称',<br/>  `password` varchar(50) comment '密码',<br/>  primary key (`id`)<br/>) engine=innodb default charset=utf8mb4 comment='测试';<br/><br/>insert into `test` (id, name, password) values (1, '测试', 'password');       <br/>```<br/><br/>可以看到，数据库已建立<br/><br/>![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)<br/><br/><br/><br/>### 4. 配置 MyBatis<br/><br/>* 在 `resource`文件夹下，新建 `mapper`文件夹<br/><br/>这是用来存放 MyBatis 的实现的<br/><br/>![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)<br/><br/><br/><br/>* 新建 pojo 包<br/><br/>pojo 包用来存放实体类<br/><br/>![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)<br/><br/><br/><br/>* 在项目下，新建 mapper 包，用来存放接口<br/><br/>![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)<br/><br/><br/><br/>* 将配置文件后缀改为`.yml`<br/><br/>我个人习惯使用`.yml`进行位置<br/><br/>![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)<br/><br/><br/><br/>* 添加 `Mybatis`配置<br/><br/>这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改<br/><br/>```yml<br/>spring:<br/>  datasource:<br/>    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&amp;characterEncoding=utf-8<br/>    username: weixindemo<br/>    password: weixindemo<br/>    driver-class-name: com.mysql.cj.jdbc.Driver<br/>    <br/>    <br/># 整合Mybatis<br/>mybatis:<br/>  # ** 表示在mapper下不管有多少文件夹，都可以全部识别<br/>  mapper-locations: classpath:/mapper/**/*.xml<br/>  type-aliases-package: weixindemo.pojo<br/>  #  打印sql相关的日志信息<br/>  configuration:<br/>    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<br/>```<br/><br/>![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)<br/><br/><br/><br/>* 添加端口配置<br/><br/>因为 vue 也是用的8080端口，我们不能和它重了<br/><br/>```yml<br/>server:<br/>  port: 8880<br/>```<br/><br/><br/><br/>* 启动类添加`mapper`接口扫描路径<br/><br/>```java<br/>@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描<br/>```<br/><br/>![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)<br/><br/><br/><br/>### 5. MVC 包建立<br/><br/>我们还要建立 ==service==，==util==，==controller==包<br/><br/>![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)<br/><br/>![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)<br/><br/><br/><br/>### 5. 测试 Mybatis 配置<br/><br/>配置到这一步，要对之前的配置，进行一个测试<br/><br/>* pojo 中，新建 Test 实体类<br/><br/>![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)<br/><br/>```java<br/>@Data<br/>@AllArgsConstructor<br/>@NoArgsConstructor<br/>public class Test {<br/>    private Integer id;<br/>    private String name;<br/>}<br/>```<br/><br/><br/><br/>* mapper 包中，新建 TestMapper 接口<br/><br/>![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)<br/><br/>```java<br/>@Repository<br/>@Mapper<br/>public interface TestMapper {<br/>    List&lt;Test&gt; getList();<br/>}<br/>```<br/><br/><br/><br/>* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现<br/><br/>  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)<br/><br/>具体内容，要根据实际项目修改<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;<br/>&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"<br/>    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;<br/><br/>&lt;!--namespace要和接口的位置和名字对应--&gt;<br/>&lt;mapper namespace=\"weixindemo.mapper.TestMapper\"&gt;<br/><br/>    &lt;select id=\"getList\" resultType=\"weixindemo.pojo.Test\"&gt;<br/>        select * from test<br/>    &lt;/select&gt;<br/><br/>&lt;/mapper&gt;<br/>```<br/><br/>![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)<br/><br/><br/><br/>* 在 service 包下，新建 TestService<br/><br/>![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)<br/><br/>别忘了加上 @Service 注解<br/><br/>```java<br/>@Service<br/>public class TestService {<br/><br/>    @Autowired<br/>    private TestMapper mapper;<br/><br/>    public List&lt;Test&gt; getList() {<br/>        return mapper.getList();<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 在 controller包下，新建 TestController<br/><br/>![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)<br/><br/>```java<br/>@RestController<br/>public class TestController {<br/><br/>    @Autowired<br/>    private TestService testService;<br/>    <br/><br/>    @RequestMapping(\"/test/list\")<br/>    public List&lt;Test&gt; list() {<br/>        return testService.getList();<br/>    }<br/><br/>}<br/>```<br/><br/><br/><br/>* 重启项目<br/><br/><br/><br/>* 新建 http 文件，编写 http 测试脚本，执行<br/><br/>![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)<br/><br/>```http<br/>GET http://localhost:8880/test/list<br/>Accept: application/json<br/><br/>###<br/>```<br/><br/><br/><br/>最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作<br/><br/>![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)<br/><br/><br/><br/>### 6. MyBatis 代码生成器<br/><br/>我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的<br/><br/><br/><br/>* 导入 Maven 依赖<br/><br/>注意，==是放在`plugiuns`下面的==<br/><br/>```xml<br/>&lt;!-- mybatis generator 自动生成代码插件 --&gt;<br/>            &lt;plugin&gt;<br/>                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br/>                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;<br/>                &lt;version&gt;1.4.0&lt;/version&gt;<br/>                &lt;configuration&gt;<br/>                    &lt;configurationFile&gt;src/main/resources/generator/generator-config.xml&lt;/configurationFile&gt;<br/>                    &lt;overwrite&gt;true&lt;/overwrite&gt;<br/>                    &lt;verbose&gt;true&lt;/verbose&gt;<br/>                &lt;/configuration&gt;<br/>                &lt;dependencies&gt;<br/>                    &lt;dependency&gt;<br/>                        &lt;groupId&gt;mysql&lt;/groupId&gt;<br/>                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br/>                        &lt;version&gt;8.0.22&lt;/version&gt;<br/>                    &lt;/dependency&gt;<br/>                &lt;/dependencies&gt;<br/>            &lt;/plugin&gt;<br/>```<br/><br/><br/><br/>* 建立代生成器位置<br/><br/>pom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`<br/><br/>```xml<br/>&lt;configurationFile&gt;<br/>  src/main/resources/generator/generator-config.xml<br/>&lt;/configurationFile&gt;<br/>```<br/><br/>![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)<br/><br/><br/><br/>* 代码生成器代码<br/><br/>从`jdbcConnection`开始，别忘了==根据项目进行修改==<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br/>&lt;!DOCTYPE generatorConfiguration<br/>        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"<br/>        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;<br/><br/>&lt;generatorConfiguration&gt;<br/>    &lt;context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\"&gt;<br/><br/>        &lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;<br/>        &lt;property name=\"autoDelimitKeywords\" value=\"true\"/&gt;<br/>        &lt;property name=\"beginningDelimiter\" value=\"`\"/&gt;<br/>        &lt;property name=\"endingDelimiter\" value=\"`\"/&gt;<br/><br/>        &lt;!--覆盖生成XML文件--&gt;<br/>        &lt;plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" /&gt;<br/>        &lt;!-- 生成的实体类添加toString()方法 --&gt;<br/>        &lt;plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/&gt;<br/><br/>        &lt;!-- 不生成注释 --&gt;<br/>        &lt;commentGenerator&gt;<br/>            &lt;property name=\"suppressAllComments\" value=\"true\"/&gt;<br/>        &lt;/commentGenerator&gt;<br/><br/>        &lt;jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"<br/>                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"<br/>                        userId=\"wiki\"<br/>                        password=\"123456\"&gt;<br/>        &lt;/jdbcConnection&gt;<br/><br/>        &lt;!-- domain类的位置 --&gt;<br/>        &lt;javaModelGenerator targetProject=\"src/main/java\"<br/>                            targetPackage=\"top.faroz.pojo\"/&gt;<br/><br/>        &lt;!-- mapper xml的位置 --&gt;<br/>        &lt;sqlMapGenerator targetProject=\"src/main/resources\"<br/>                         targetPackage=\"mapper\"/&gt;<br/><br/>        &lt;!-- mapper类的位置 --&gt;<br/>        &lt;javaClientGenerator targetProject=\"src/main/java\"<br/>                             targetPackage=\"top.faroz.mapper\"<br/>                             type=\"XMLMAPPER\"/&gt;<br/><br/>        &lt;table tableName=\"demo\" domainObjectName=\"Demo\"/&gt;<br/>        &lt;!--&lt;table tableName=\"ebook\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"category\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"doc\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"content\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"user\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"ebook_snapshot\"/&gt;--&gt;<br/>    &lt;/context&gt;<br/>&lt;/generatorConfiguration&gt;<br/>```<br/><br/><br/><br/>* 新建一个maven启动项<br/><br/>![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)<br/><br/>![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)<br/><br/>```bash<br/>mybatis-generator:generate -e<br/>```<br/><br/>![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)<br/><br/><br/><br/>### 7. 测试代码生成器<br/><br/>代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表<br/><br/><br/><br/>* all.sql 添加 demo 表的增加 SQL 语句，并执行<br/><br/>```sql<br/># demo列表<br/>drop table if exists `demo`;<br/>create table `demo` (<br/>    `id` bigint not null comment 'id',<br/>    `name` varchar(50) comment '名称',<br/>    primary key (`id`)<br/>) engine=innodb default charset =utf8mb4 comment '测试';<br/><br/>insert into `demo` (id,name) values(2,'测试2');<br/>```<br/><br/><br/><br/>* 在代码生成器最后的部分，填上要生成的表名<br/><br/>![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)<br/><br/><br/><br/>* 执行<br/><br/>![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)<br/><br/><br/><br/>* 执行成功，会生成 4 个新文件<br/><br/>![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)<br/><br/><br/><br/>* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码<br/><br/>```java<br/>@RestController<br/>public class DemoController {<br/><br/>    @Autowired<br/>    private DemoService demoService;<br/><br/>    @RequestMapping(\"/demo/list\")<br/>    public List&lt;Demo&gt; list() {<br/>        return demoService.getList();<br/>    }<br/>}<br/>```<br/><br/>```java<br/>@Service<br/>public class DemoService {<br/><br/>    @Resource<br/>    private DemoMapper demoMapper;<br/><br/>    public List&lt;Demo&gt; getList() {<br/>        List&lt;Demo&gt; list = demoMapper.selectByExample(null);<br/>        return list;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 添加 demo 的 http 测试脚本<br/><br/>```http<br/>GET http://localhost:8880/demo/list<br/>Accept: application/json<br/><br/>###<br/>```<br/><br/>测试成功，说明我们用代码生成器生成的代码没有问题<br/><br/>![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)<br/><br/><br/><br/>### 8. 解决前后端跨域问题<br/><br/>虽然现在还没有构建前端项目，但是后面，会出现跨域问题<br/><br/><br/><br/>* 新建 CorsConfig 类<br/><br/>![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)<br/><br/><br/><br/>* 代码如下<br/><br/>不用改动，直接用，别忘了加上==@Configuration==注解<br/><br/>```java<br/>@Configuration<br/>public class CorsConfig implements WebMvcConfigurer {<br/><br/>    @Override<br/>    public void addCorsMappings(CorsRegistry registry) {<br/>        registry.addMapping(\"/**\")<br/>                .allowedOriginPatterns(\"*\")<br/>                .allowedHeaders(CorsConfiguration.ALL)<br/>                .allowedMethods(CorsConfiguration.ALL)<br/>                .allowCredentials(true)<br/>                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 9. 添加雪花算法工具类<br/><br/>雪花算法，用来生成唯一 ID<br/><br/><br/><br/>* 新建 SnowFlake 工具类<br/><br/>![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)<br/><br/><br/><br/>* 代码如下<br/><br/>别忘了加上 @Component 注解<br/><br/>```java<br/>@Component<br/>public class SnowFlake {<br/>    /**<br/>     * 起始的时间戳<br/>     */<br/>    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00<br/><br/>    /**<br/>     * 每一部分占用的位数<br/>     */<br/>    private final static long SEQUENCE_BIT = 12; //序列号占用的位数<br/>    private final static long MACHINE_BIT = 5;   //机器标识占用的位数<br/>    private final static long DATACENTER_BIT = 5;//数据中心占用的位数<br/><br/>    /**<br/>     * 每一部分的最大值<br/>     */<br/>    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L &lt;&lt; DATACENTER_BIT);<br/>    private final static long MAX_MACHINE_NUM = -1L ^ (-1L &lt;&lt; MACHINE_BIT);<br/>    private final static long MAX_SEQUENCE = -1L ^ (-1L &lt;&lt; SEQUENCE_BIT);<br/><br/>    /**<br/>     * 每一部分向左的位移<br/>     */<br/>    private final static long MACHINE_LEFT = SEQUENCE_BIT;<br/>    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;<br/>    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;<br/><br/>    private long datacenterId = 1;  //数据中心<br/>    private long machineId = 1;     //机器标识<br/>    private long sequence = 0L; //序列号<br/>    private long lastStmp = -1L;//上一次时间戳<br/><br/>    public SnowFlake() {<br/>    }<br/><br/>    public SnowFlake(long datacenterId, long machineId) {<br/>        if (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; 0) {<br/>            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");<br/>        }<br/>        if (machineId &gt; MAX_MACHINE_NUM || machineId &lt; 0) {<br/>            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");<br/>        }<br/>        this.datacenterId = datacenterId;<br/>        this.machineId = machineId;<br/>    }<br/><br/>    /**<br/>     * 产生下一个ID<br/>     *<br/>     * @return<br/>     */<br/>    public synchronized long nextId() {<br/>        long currStmp = getNewstmp();<br/>        if (currStmp &lt; lastStmp) {<br/>            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");<br/>        }<br/><br/>        if (currStmp == lastStmp) {<br/>            //相同毫秒内，序列号自增<br/>            sequence = (sequence + 1) &amp; MAX_SEQUENCE;<br/>            //同一毫秒的序列数已经达到最大<br/>            if (sequence == 0L) {<br/>                currStmp = getNextMill();<br/>            }<br/>        } else {<br/>            //不同毫秒内，序列号置为0<br/>            sequence = 0L;<br/>        }<br/><br/>        lastStmp = currStmp;<br/><br/>        return (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT //时间戳部分<br/>                | datacenterId &lt;&lt; DATACENTER_LEFT       //数据中心部分<br/>                | machineId &lt;&lt; MACHINE_LEFT             //机器标识部分<br/>                | sequence;                             //序列号部分<br/>    }<br/><br/>    private long getNextMill() {<br/>        long mill = getNewstmp();<br/>        while (mill &lt;= lastStmp) {<br/>            mill = getNewstmp();<br/>        }<br/>        return mill;<br/>    }<br/><br/>    private long getNewstmp() {<br/>        return System.currentTimeMillis();<br/>    }<br/><br/>    // public static void main(String[] args) throws ParseException {<br/>    //     // 时间戳<br/>    //     // System.out.println(System.currentTimeMillis());<br/>    //     // System.out.println(new Date().getTime());<br/>    //     //<br/>    //     // String dateTime = \"2021-01-01 08:00:00\";<br/>    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");<br/>    //     // System.out.println(sdf.parse(dateTime).getTime());<br/>    //<br/>    //     SnowFlake snowFlake = new SnowFlake(1, 1);<br/>    //<br/>    //     long start = System.currentTimeMillis();<br/>    //     for (int i = 0; i &lt; 10; i++) {<br/>    //         System.out.println(snowFlake.nextId());<br/>    //         System.out.println(System.currentTimeMillis() - start);<br/>    //     }<br/>    // }<br/><br/>}<br/>```<br/><br/><br/><br/><br/><br/>### 10. 添加 AOP<br/><br/>AOP 用来打印接口日志，方便后期调试<br/><br/><br/><br/>* Maven 中引入 fastjson，因为 我们的类中要用<br/><br/>```xml<br/> &lt;!--fastjson--&gt;<br/>&lt;dependency&gt;<br/>  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br/>  &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br/>  &lt;version&gt;1.2.70&lt;/version&gt;<br/>&lt;/dependency&gt;<br/>```<br/><br/><br/><br/>* Maven 引入 AOP<br/><br/>```xml<br/>&lt;!--导入aop--&gt;<br/>&lt;dependency&gt;<br/>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br/>  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;<br/>&lt;/dependency&gt;<br/>```<br/><br/><br/><br/>* 添加 RequestContext 工具类<br/><br/>这个是后期为了打印 WebSocket 日志的<br/><br/>![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)<br/><br/>```java<br/>public class RequestContext implements Serializable {<br/>    private static ThreadLocal&lt;String&gt; remoteAddr = new ThreadLocal&lt;&gt;();<br/><br/>    public static String getRemoteAddr() {<br/>        return remoteAddr.get();<br/>    }<br/><br/>    public static void setRemoteAddr(String remoteAddr) {<br/>        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 新建 aspect 包，并新建 LogAspect 类<br/><br/>![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)<br/><br/><br/><br/>**LogAspect 代码如下:**<br/><br/>切点的代码，我们要依据项目修改<br/><br/>![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)<br/><br/>```java<br/>@Aspect<br/>@Component<br/>public class LogAspect {<br/>    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);<br/><br/>    @Resource<br/>    private SnowFlake snowFlake;<br/><br/>    /** 定义一个切点 */<br/>    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")<br/>    public void controllerPointcut() {}<br/><br/>    // @Resource<br/>    // private SnowFlake snowFlake;<br/><br/>    @Before(\"controllerPointcut()\")<br/>    public void doBefore(JoinPoint joinPoint) throws Throwable {<br/><br/>        // 增加日志流水号<br/>        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));<br/><br/>        // 开始打印请求日志<br/>        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br/>        HttpServletRequest request = attributes.getRequest();<br/>        Signature signature = joinPoint.getSignature();<br/>        String name = signature.getName();<br/><br/>        // 打印请求信息<br/>        LOG.info(\"------------- 开始 -------------\");<br/>        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());<br/>        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);<br/>        LOG.info(\"远程地址: {}\", request.getRemoteAddr());<br/><br/>        RequestContext.setRemoteAddr(getRemoteIp(request));<br/><br/>        // 拿到所有的参数<br/>        Object[] args = joinPoint.getArgs();<br/>        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));<br/><br/>        Object[] arguments  = new Object[args.length];<br/>        for (int i = 0; i &lt; args.length; i++) {<br/>            if (args[i] instanceof ServletRequest<br/>                    || args[i] instanceof ServletResponse<br/>                    || args[i] instanceof MultipartFile) {<br/>                continue;<br/>            }<br/>            arguments[i] = args[i];<br/>        }<br/>        // 排除字段，敏感字段或太长的字段不显示<br/>        String[] excludeProperties = {\"password\", \"file\"};<br/>        PropertyPreFilters filters = new PropertyPreFilters();<br/>        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();<br/>        excludefilter.addExcludes(excludeProperties);<br/>        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));<br/>    }<br/><br/>    @Around(\"controllerPointcut()\")<br/>    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {<br/>        long startTime = System.currentTimeMillis();<br/>        Object result = proceedingJoinPoint.proceed();<br/>        // 排除字段，敏感字段或太长的字段不显示<br/>        String[] excludeProperties = {\"password\", \"file\"};<br/>        PropertyPreFilters filters = new PropertyPreFilters();<br/>        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();<br/>        excludefilter.addExcludes(excludeProperties);<br/>        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));<br/>        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);<br/>        return result;<br/>    }<br/><br/>    /**<br/>     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP<br/>     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突<br/>     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径<br/>     * @param request<br/>     * @return<br/>     */<br/>    public String getRemoteIp(HttpServletRequest request) {<br/>        String ip = request.getHeader(\"x-forwarded-for\");<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getHeader(\"Proxy-Client-IP\");<br/>        }<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getHeader(\"WL-Proxy-Client-IP\");<br/>        }<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getRemoteAddr();<br/>        }<br/>        return ip;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 11. 解决前后端 Long 精度丢失问题<br/><br/>我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失<br/><br/><br/><br/>* 配置文件新增 JacksonConfig 类<br/><br/>![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)<br/><br/><br/><br/>* 代码如下<br/><br/>```java<br/>@Configuration<br/>public class JacksonConfig {<br/><br/>    @Bean<br/>    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {<br/>        ObjectMapper objectMapper = builder.createXmlMapper(false).build();<br/>        SimpleModule simpleModule = new SimpleModule();<br/>        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br/>        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br/>        objectMapper.registerModule(simpleModule);<br/>        return objectMapper;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 12. 新建 req resp 包<br/><br/>我们要将请求与返回包装<br/><br/>![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)<br/><br/><br/><br/>### 13. CommonResp<br/><br/>为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp<br/><br/>![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)<br/><br/>**代码如下：**<br/><br/>```java<br/>@Data<br/>@AllArgsConstructor<br/>@NoArgsConstructor<br/>public class CommonResp&lt;T&gt; {<br/>    /**<br/>     * 返回是否成功<br/>     */<br/>    private boolean isSuccess=true;<br/><br/>    /**<br/>     * 返回失败时，返回的错误信息<br/>     */<br/>    private String message;<br/><br/>    /**<br/>     * 返回成功的时候，返回的内容<br/>     */<br/>    private T content;<br/>}<br/>```<br/><br/><br/><br/>### 14. 自定义异常<br/><br/>* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`<br/><br/>![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)<br/><br/><br/><br/>* `BusinessException`代码<br/><br/>```java<br/>public class BusinessException extends RuntimeException{<br/>    private BusinessExceptionCode code;<br/><br/>    public BusinessException (BusinessExceptionCode code) {<br/>        /**<br/>         * 父类有个成员变量  private String desc<br/>         * 需要为这个成员变量赋值<br/>         */<br/>        super(code.getDesc());<br/>        this.code = code;<br/>    }<br/><br/>    public BusinessExceptionCode getCode() {<br/>        return code;<br/>    }<br/><br/>    public void setCode(BusinessExceptionCode code) {<br/>        this.code = code;<br/>    }<br/><br/>    /**<br/>     * 不写入堆栈信息，提高性能<br/>     */<br/>    @Override<br/>    public Throwable fillInStackTrace() {<br/>        return this;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* `BusinessExceptionCode`代码<br/><br/>```java<br/>public enum BusinessExceptionCode {<br/>    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),<br/>    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),<br/>    VOTE_REPEAT(\"您已点赞过\"),<br/>    ;<br/><br/>    private String desc;<br/><br/>    BusinessExceptionCode(String desc) {<br/>        this.desc = desc;<br/>    }<br/><br/>    public String getDesc() {<br/>        return desc;<br/>    }<br/><br/>    public void setDesc(String desc) {<br/>        this.desc = desc;<br/>    }<br/>}<br/>```<br/><br/><br/><br/><br/><br/>### 13. 统一异常处理<br/><br/>我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp<br/><br/><br/><br/>* 新建 ControllerExceptionHandler 类<br/><br/>![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)<br/><br/><br/><br/>* 代码如下<br/><br/>logger 要根据项目改一下<br/><br/>```java<br/>/**<br/> * 统一异常处理、数据预处理等<br/> * 该类用于捕获系统弹出的异常<br/> * 将异常包装成一个 CommonResp<br/> * 从而方便前端调用，显示错误信息<br/> */<br/>@ControllerAdvice<br/>public class ControllerExceptionHandler {<br/>    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = BindException.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(BindException e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());<br/>        return commonResp;<br/>    }<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = BusinessException.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(BusinessException e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(e.getCode().getDesc());<br/>        return commonResp;<br/>    }<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = Exception.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(Exception e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.error(\"系统异常：\", e);<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(\"系统出现异常，请联系管理员\");<br/>        return commonResp;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 14. 添加日志记录 logback<br/><br/>* 在 resource 下，新建logback-spring.xml 文件<br/><br/>![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)<br/><br/>* 写入内容<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br/>&lt;configuration&gt;<br/>    &lt;!-- 修改一下路径--&gt;<br/>    &lt;property name=\"PATH\" value=\"./log\"&gt;&lt;/property&gt;<br/><br/>    &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;<br/>        &lt;encoder&gt;<br/>            &lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n&lt;/Pattern&gt;<br/>            &lt;!--&lt;Pattern&gt;%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n&lt;/Pattern&gt;--&gt;<br/>        &lt;/encoder&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br/>        &lt;file&gt;${PATH}/trace.log&lt;/file&gt;<br/>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br/>            &lt;FileNamePattern&gt;${PATH}/trace.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;<br/>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br/>                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;<br/>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br/>        &lt;/rollingPolicy&gt;<br/>        &lt;layout&gt;<br/>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;<br/>        &lt;/layout&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br/>        &lt;file&gt;${PATH}/error.log&lt;/file&gt;<br/>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br/>            &lt;FileNamePattern&gt;${PATH}/error.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;<br/>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br/>                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;<br/>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br/>        &lt;/rollingPolicy&gt;<br/>        &lt;layout&gt;<br/>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;<br/>        &lt;/layout&gt;<br/>        &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;<br/>            &lt;level&gt;ERROR&lt;/level&gt;<br/>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br/>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br/>        &lt;/filter&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;root level=\"ERROR\"&gt;<br/>        &lt;appender-ref ref=\"ERROR_FILE\" /&gt;<br/>    &lt;/root&gt;<br/><br/>    &lt;root level=\"TRACE\"&gt;<br/>        &lt;appender-ref ref=\"TRACE_FILE\" /&gt;<br/>    &lt;/root&gt;<br/><br/>    &lt;root level=\"INFO\"&gt;<br/>        &lt;appender-ref ref=\"STDOUT\" /&gt;<br/>    &lt;/root&gt;<br/>&lt;/configuration&gt;<br/><br/>```<br/><br/><br/><br/>### 15. 自定义 banner<br/><br/>resources 下新建 banner.txt<br/><br/>![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)<br/><br/><br/><br/>里面放上自定义 banner<br/><br/>```txt<br/> ********     **     *******     *******         ********<br/>/**/////     ****   /**////**   **/////**       //////** <br/>/**         **//**  /**   /**  **     //**           **  <br/>/*******   **  //** /*******  /**      /**          **   <br/>/**////   **********/**///**  /**      /**         **    <br/>/**      /**//////**/**  //** //**     **         **     <br/>/**      /**     /**/**   //** //*******   ***** ********<br/>//       //      // //     //   ///////   ///// //////// <br/>```<br/><br/><br/><br/><br/></p>","description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0}]
2021-04-16 00:57:03.899 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"id":1},"success":true}
2021-04-16 00:57:03.900 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：85 ms -------------
2021-04-16 00:57:06.449 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:57:06.449 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:57:06.449 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:57:06.450 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:57:06.450 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:57:06.456 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:57:06.457 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:57:07.214 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:57:07.214 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:57:07.214 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:57:07.215 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:57:07.215 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:57:07.220 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:57:07.221 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 00:57:08.488 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:57:08.488 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:57:08.488 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:57:08.489 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:57:08.489 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:57:08.494 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:57:08.494 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:57:09.282 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:57:09.282 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:57:09.282 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:57:09.283 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:57:09.283 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:57:09.288 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:57:09.289 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 00:57:10.208 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:57:10.208 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:57:10.209 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:57:10.209 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:57:10.209 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:57:10.209 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:57:10.209 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:57:10.209 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:57:10.209 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:57:10.210 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:57:10.211 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:57:10.211 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:57:10.216 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<p><br/># 完整项目搭建流程<br/><br/>虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。<br/><br/>这次将创建的整个流程记录下来，方便以后的项目搭建。<br/><br/>要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==<br/><br/>如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了<br/><br/><br/><br/>## 数据库<br/><br/>一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限<br/><br/><br/><br/>### 1. **连接 admin**<br/><br/>只有 admin 有所有权限<br/><br/>我的数据库 admin 的账户名和密码是：<br/><br/>**账户：**admin<br/><br/>**密码：**123<br/><br/>![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)<br/><br/><br/><br/>### 2. **新建数据库**<br/><br/>其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号<br/><br/>![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)<br/><br/>### 3. **为这个数据库，专门建一个用户**<br/><br/>开发环境中，就将密码和用户名设置成一样的，这样不会忘记<br/><br/>host 设置为 localhost<br/><br/>![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)<br/><br/><br/><br/>### 4. **为这个用户，授予对应数据库的全部权限**<br/><br/>![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)<br/><br/>![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)<br/><br/>### 5. **对当前用户，建立连接**<br/><br/>![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)<br/><br/><br/><br/><br/><br/>## 后端<br/><br/>关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。<br/><br/>### 1. 新建 SpringBoot 项目<br/><br/>* 点击 `SpringInitiallizr`，新建项目<br/><br/>![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)<br/><br/>* 选择默认依赖的包<br/><br/>![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)<br/><br/>![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)<br/><br/>![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)<br/><br/>* 选择存放路径<br/><br/>![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)<br/><br/>* 新建完成后，项目目录如下<br/><br/>![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)<br/><br/><br/><br/>### 2. 更改启动类位置<br/><br/>* 新建 config 包，将启动类放进去<br/><br/>![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)<br/><br/><br/><br/>* 为启动类添加注解<br/><br/>注解内的信息，是项目名称<br/><br/>```java<br/>@ComponentScan(\"weixindemo\")<br/>```<br/><br/>![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)<br/><br/><br/><br/>### 3. IDEA 数据库配置<br/><br/>* IDEA 连接数据库<br/><br/>![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)<br/><br/>![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)<br/><br/><br/><br/>* 添加 sql 脚本<br/><br/>新建 sql 文件夹，建立`all.sql`文件<br/><br/>![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)<br/><br/><br/><br/>我们在 sql 脚本中添加测试用数据，并执行<br/><br/>```sql<br/><br/># 测试表<br/>drop table if exists `test`;<br/>create table `test` (<br/>  `id` bigint not null comment 'id',<br/>  `name` varchar(50) comment '名称',<br/>  `password` varchar(50) comment '密码',<br/>  primary key (`id`)<br/>) engine=innodb default charset=utf8mb4 comment='测试';<br/><br/>insert into `test` (id, name, password) values (1, '测试', 'password');       <br/>```<br/><br/>可以看到，数据库已建立<br/><br/>![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)<br/><br/><br/><br/>### 4. 配置 MyBatis<br/><br/>* 在 `resource`文件夹下，新建 `mapper`文件夹<br/><br/>这是用来存放 MyBatis 的实现的<br/><br/>![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)<br/><br/><br/><br/>* 新建 pojo 包<br/><br/>pojo 包用来存放实体类<br/><br/>![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)<br/><br/><br/><br/>* 在项目下，新建 mapper 包，用来存放接口<br/><br/>![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)<br/><br/><br/><br/>* 将配置文件后缀改为`.yml`<br/><br/>我个人习惯使用`.yml`进行位置<br/><br/>![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)<br/><br/><br/><br/>* 添加 `Mybatis`配置<br/><br/>这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改<br/><br/>```yml<br/>spring:<br/>  datasource:<br/>    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&amp;characterEncoding=utf-8<br/>    username: weixindemo<br/>    password: weixindemo<br/>    driver-class-name: com.mysql.cj.jdbc.Driver<br/>    <br/>    <br/># 整合Mybatis<br/>mybatis:<br/>  # ** 表示在mapper下不管有多少文件夹，都可以全部识别<br/>  mapper-locations: classpath:/mapper/**/*.xml<br/>  type-aliases-package: weixindemo.pojo<br/>  #  打印sql相关的日志信息<br/>  configuration:<br/>    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<br/>```<br/><br/>![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)<br/><br/><br/><br/>* 添加端口配置<br/><br/>因为 vue 也是用的8080端口，我们不能和它重了<br/><br/>```yml<br/>server:<br/>  port: 8880<br/>```<br/><br/><br/><br/>* 启动类添加`mapper`接口扫描路径<br/><br/>```java<br/>@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描<br/>```<br/><br/>![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)<br/><br/><br/><br/>### 5. MVC 包建立<br/><br/>我们还要建立 ==service==，==util==，==controller==包<br/><br/>![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)<br/><br/>![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)<br/><br/><br/><br/>### 5. 测试 Mybatis 配置<br/><br/>配置到这一步，要对之前的配置，进行一个测试<br/><br/>* pojo 中，新建 Test 实体类<br/><br/>![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)<br/><br/>```java<br/>@Data<br/>@AllArgsConstructor<br/>@NoArgsConstructor<br/>public class Test {<br/>    private Integer id;<br/>    private String name;<br/>}<br/>```<br/><br/><br/><br/>* mapper 包中，新建 TestMapper 接口<br/><br/>![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)<br/><br/>```java<br/>@Repository<br/>@Mapper<br/>public interface TestMapper {<br/>    List&lt;Test&gt; getList();<br/>}<br/>```<br/><br/><br/><br/>* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现<br/><br/>  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)<br/><br/>具体内容，要根据实际项目修改<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;<br/>&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"<br/>    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;<br/><br/>&lt;!--namespace要和接口的位置和名字对应--&gt;<br/>&lt;mapper namespace=\"weixindemo.mapper.TestMapper\"&gt;<br/><br/>    &lt;select id=\"getList\" resultType=\"weixindemo.pojo.Test\"&gt;<br/>        select * from test<br/>    &lt;/select&gt;<br/><br/>&lt;/mapper&gt;<br/>```<br/><br/>![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)<br/><br/><br/><br/>* 在 service 包下，新建 TestService<br/><br/>![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)<br/><br/>别忘了加上 @Service 注解<br/><br/>```java<br/>@Service<br/>public class TestService {<br/><br/>    @Autowired<br/>    private TestMapper mapper;<br/><br/>    public List&lt;Test&gt; getList() {<br/>        return mapper.getList();<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 在 controller包下，新建 TestController<br/><br/>![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)<br/><br/>```java<br/>@RestController<br/>public class TestController {<br/><br/>    @Autowired<br/>    private TestService testService;<br/>    <br/><br/>    @RequestMapping(\"/test/list\")<br/>    public List&lt;Test&gt; list() {<br/>        return testService.getList();<br/>    }<br/><br/>}<br/>```<br/><br/><br/><br/>* 重启项目<br/><br/><br/><br/>* 新建 http 文件，编写 http 测试脚本，执行<br/><br/>![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)<br/><br/>```http<br/>GET http://localhost:8880/test/list<br/>Accept: application/json<br/><br/>###<br/>```<br/><br/><br/><br/>最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作<br/><br/>![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)<br/><br/><br/><br/>### 6. MyBatis 代码生成器<br/><br/>我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的<br/><br/><br/><br/>* 导入 Maven 依赖<br/><br/>注意，==是放在`plugiuns`下面的==<br/><br/>```xml<br/>&lt;!-- mybatis generator 自动生成代码插件 --&gt;<br/>            &lt;plugin&gt;<br/>                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br/>                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;<br/>                &lt;version&gt;1.4.0&lt;/version&gt;<br/>                &lt;configuration&gt;<br/>                    &lt;configurationFile&gt;src/main/resources/generator/generator-config.xml&lt;/configurationFile&gt;<br/>                    &lt;overwrite&gt;true&lt;/overwrite&gt;<br/>                    &lt;verbose&gt;true&lt;/verbose&gt;<br/>                &lt;/configuration&gt;<br/>                &lt;dependencies&gt;<br/>                    &lt;dependency&gt;<br/>                        &lt;groupId&gt;mysql&lt;/groupId&gt;<br/>                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br/>                        &lt;version&gt;8.0.22&lt;/version&gt;<br/>                    &lt;/dependency&gt;<br/>                &lt;/dependencies&gt;<br/>            &lt;/plugin&gt;<br/>```<br/><br/><br/><br/>* 建立代生成器位置<br/><br/>pom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`<br/><br/>```xml<br/>&lt;configurationFile&gt;<br/>  src/main/resources/generator/generator-config.xml<br/>&lt;/configurationFile&gt;<br/>```<br/><br/>![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)<br/><br/><br/><br/>* 代码生成器代码<br/><br/>从`jdbcConnection`开始，别忘了==根据项目进行修改==<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br/>&lt;!DOCTYPE generatorConfiguration<br/>        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"<br/>        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;<br/><br/>&lt;generatorConfiguration&gt;<br/>    &lt;context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\"&gt;<br/><br/>        &lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;<br/>        &lt;property name=\"autoDelimitKeywords\" value=\"true\"/&gt;<br/>        &lt;property name=\"beginningDelimiter\" value=\"`\"/&gt;<br/>        &lt;property name=\"endingDelimiter\" value=\"`\"/&gt;<br/><br/>        &lt;!--覆盖生成XML文件--&gt;<br/>        &lt;plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" /&gt;<br/>        &lt;!-- 生成的实体类添加toString()方法 --&gt;<br/>        &lt;plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/&gt;<br/><br/>        &lt;!-- 不生成注释 --&gt;<br/>        &lt;commentGenerator&gt;<br/>            &lt;property name=\"suppressAllComments\" value=\"true\"/&gt;<br/>        &lt;/commentGenerator&gt;<br/><br/>        &lt;jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"<br/>                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"<br/>                        userId=\"wiki\"<br/>                        password=\"123456\"&gt;<br/>        &lt;/jdbcConnection&gt;<br/><br/>        &lt;!-- domain类的位置 --&gt;<br/>        &lt;javaModelGenerator targetProject=\"src/main/java\"<br/>                            targetPackage=\"top.faroz.pojo\"/&gt;<br/><br/>        &lt;!-- mapper xml的位置 --&gt;<br/>        &lt;sqlMapGenerator targetProject=\"src/main/resources\"<br/>                         targetPackage=\"mapper\"/&gt;<br/><br/>        &lt;!-- mapper类的位置 --&gt;<br/>        &lt;javaClientGenerator targetProject=\"src/main/java\"<br/>                             targetPackage=\"top.faroz.mapper\"<br/>                             type=\"XMLMAPPER\"/&gt;<br/><br/>        &lt;table tableName=\"demo\" domainObjectName=\"Demo\"/&gt;<br/>        &lt;!--&lt;table tableName=\"ebook\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"category\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"doc\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"content\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"user\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"ebook_snapshot\"/&gt;--&gt;<br/>    &lt;/context&gt;<br/>&lt;/generatorConfiguration&gt;<br/>```<br/><br/><br/><br/>* 新建一个maven启动项<br/><br/>![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)<br/><br/>![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)<br/><br/>```bash<br/>mybatis-generator:generate -e<br/>```<br/><br/>![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)<br/><br/><br/><br/>### 7. 测试代码生成器<br/><br/>代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表<br/><br/><br/><br/>* all.sql 添加 demo 表的增加 SQL 语句，并执行<br/><br/>```sql<br/># demo列表<br/>drop table if exists `demo`;<br/>create table `demo` (<br/>    `id` bigint not null comment 'id',<br/>    `name` varchar(50) comment '名称',<br/>    primary key (`id`)<br/>) engine=innodb default charset =utf8mb4 comment '测试';<br/><br/>insert into `demo` (id,name) values(2,'测试2');<br/>```<br/><br/><br/><br/>* 在代码生成器最后的部分，填上要生成的表名<br/><br/>![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)<br/><br/><br/><br/>* 执行<br/><br/>![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)<br/><br/><br/><br/>* 执行成功，会生成 4 个新文件<br/><br/>![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)<br/><br/><br/><br/>* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码<br/><br/>```java<br/>@RestController<br/>public class DemoController {<br/><br/>    @Autowired<br/>    private DemoService demoService;<br/><br/>    @RequestMapping(\"/demo/list\")<br/>    public List&lt;Demo&gt; list() {<br/>        return demoService.getList();<br/>    }<br/>}<br/>```<br/><br/>```java<br/>@Service<br/>public class DemoService {<br/><br/>    @Resource<br/>    private DemoMapper demoMapper;<br/><br/>    public List&lt;Demo&gt; getList() {<br/>        List&lt;Demo&gt; list = demoMapper.selectByExample(null);<br/>        return list;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 添加 demo 的 http 测试脚本<br/><br/>```http<br/>GET http://localhost:8880/demo/list<br/>Accept: application/json<br/><br/>###<br/>```<br/><br/>测试成功，说明我们用代码生成器生成的代码没有问题<br/><br/>![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)<br/><br/><br/><br/>### 8. 解决前后端跨域问题<br/><br/>虽然现在还没有构建前端项目，但是后面，会出现跨域问题<br/><br/><br/><br/>* 新建 CorsConfig 类<br/><br/>![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)<br/><br/><br/><br/>* 代码如下<br/><br/>不用改动，直接用，别忘了加上==@Configuration==注解<br/><br/>```java<br/>@Configuration<br/>public class CorsConfig implements WebMvcConfigurer {<br/><br/>    @Override<br/>    public void addCorsMappings(CorsRegistry registry) {<br/>        registry.addMapping(\"/**\")<br/>                .allowedOriginPatterns(\"*\")<br/>                .allowedHeaders(CorsConfiguration.ALL)<br/>                .allowedMethods(CorsConfiguration.ALL)<br/>                .allowCredentials(true)<br/>                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 9. 添加雪花算法工具类<br/><br/>雪花算法，用来生成唯一 ID<br/><br/><br/><br/>* 新建 SnowFlake 工具类<br/><br/>![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)<br/><br/><br/><br/>* 代码如下<br/><br/>别忘了加上 @Component 注解<br/><br/>```java<br/>@Component<br/>public class SnowFlake {<br/>    /**<br/>     * 起始的时间戳<br/>     */<br/>    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00<br/><br/>    /**<br/>     * 每一部分占用的位数<br/>     */<br/>    private final static long SEQUENCE_BIT = 12; //序列号占用的位数<br/>    private final static long MACHINE_BIT = 5;   //机器标识占用的位数<br/>    private final static long DATACENTER_BIT = 5;//数据中心占用的位数<br/><br/>    /**<br/>     * 每一部分的最大值<br/>     */<br/>    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L &lt;&lt; DATACENTER_BIT);<br/>    private final static long MAX_MACHINE_NUM = -1L ^ (-1L &lt;&lt; MACHINE_BIT);<br/>    private final static long MAX_SEQUENCE = -1L ^ (-1L &lt;&lt; SEQUENCE_BIT);<br/><br/>    /**<br/>     * 每一部分向左的位移<br/>     */<br/>    private final static long MACHINE_LEFT = SEQUENCE_BIT;<br/>    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;<br/>    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;<br/><br/>    private long datacenterId = 1;  //数据中心<br/>    private long machineId = 1;     //机器标识<br/>    private long sequence = 0L; //序列号<br/>    private long lastStmp = -1L;//上一次时间戳<br/><br/>    public SnowFlake() {<br/>    }<br/><br/>    public SnowFlake(long datacenterId, long machineId) {<br/>        if (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; 0) {<br/>            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");<br/>        }<br/>        if (machineId &gt; MAX_MACHINE_NUM || machineId &lt; 0) {<br/>            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");<br/>        }<br/>        this.datacenterId = datacenterId;<br/>        this.machineId = machineId;<br/>    }<br/><br/>    /**<br/>     * 产生下一个ID<br/>     *<br/>     * @return<br/>     */<br/>    public synchronized long nextId() {<br/>        long currStmp = getNewstmp();<br/>        if (currStmp &lt; lastStmp) {<br/>            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");<br/>        }<br/><br/>        if (currStmp == lastStmp) {<br/>            //相同毫秒内，序列号自增<br/>            sequence = (sequence + 1) &amp; MAX_SEQUENCE;<br/>            //同一毫秒的序列数已经达到最大<br/>            if (sequence == 0L) {<br/>                currStmp = getNextMill();<br/>            }<br/>        } else {<br/>            //不同毫秒内，序列号置为0<br/>            sequence = 0L;<br/>        }<br/><br/>        lastStmp = currStmp;<br/><br/>        return (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT //时间戳部分<br/>                | datacenterId &lt;&lt; DATACENTER_LEFT       //数据中心部分<br/>                | machineId &lt;&lt; MACHINE_LEFT             //机器标识部分<br/>                | sequence;                             //序列号部分<br/>    }<br/><br/>    private long getNextMill() {<br/>        long mill = getNewstmp();<br/>        while (mill &lt;= lastStmp) {<br/>            mill = getNewstmp();<br/>        }<br/>        return mill;<br/>    }<br/><br/>    private long getNewstmp() {<br/>        return System.currentTimeMillis();<br/>    }<br/><br/>    // public static void main(String[] args) throws ParseException {<br/>    //     // 时间戳<br/>    //     // System.out.println(System.currentTimeMillis());<br/>    //     // System.out.println(new Date().getTime());<br/>    //     //<br/>    //     // String dateTime = \"2021-01-01 08:00:00\";<br/>    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");<br/>    //     // System.out.println(sdf.parse(dateTime).getTime());<br/>    //<br/>    //     SnowFlake snowFlake = new SnowFlake(1, 1);<br/>    //<br/>    //     long start = System.currentTimeMillis();<br/>    //     for (int i = 0; i &lt; 10; i++) {<br/>    //         System.out.println(snowFlake.nextId());<br/>    //         System.out.println(System.currentTimeMillis() - start);<br/>    //     }<br/>    // }<br/><br/>}<br/>```<br/><br/><br/><br/><br/><br/>### 10. 添加 AOP<br/><br/>AOP 用来打印接口日志，方便后期调试<br/><br/><br/><br/>* Maven 中引入 fastjson，因为 我们的类中要用<br/><br/>```xml<br/> &lt;!--fastjson--&gt;<br/>&lt;dependency&gt;<br/>  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br/>  &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br/>  &lt;version&gt;1.2.70&lt;/version&gt;<br/>&lt;/dependency&gt;<br/>```<br/><br/><br/><br/>* Maven 引入 AOP<br/><br/>```xml<br/>&lt;!--导入aop--&gt;<br/>&lt;dependency&gt;<br/>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br/>  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;<br/>&lt;/dependency&gt;<br/>```<br/><br/><br/><br/>* 添加 RequestContext 工具类<br/><br/>这个是后期为了打印 WebSocket 日志的<br/><br/>![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)<br/><br/>```java<br/>public class RequestContext implements Serializable {<br/>    private static ThreadLocal&lt;String&gt; remoteAddr = new ThreadLocal&lt;&gt;();<br/><br/>    public static String getRemoteAddr() {<br/>        return remoteAddr.get();<br/>    }<br/><br/>    public static void setRemoteAddr(String remoteAddr) {<br/>        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 新建 aspect 包，并新建 LogAspect 类<br/><br/>![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)<br/><br/><br/><br/>**LogAspect 代码如下:**<br/><br/>切点的代码，我们要依据项目修改<br/><br/>![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)<br/><br/>```java<br/>@Aspect<br/>@Component<br/>public class LogAspect {<br/>    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);<br/><br/>    @Resource<br/>    private SnowFlake snowFlake;<br/><br/>    /** 定义一个切点 */<br/>    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")<br/>    public void controllerPointcut() {}<br/><br/>    // @Resource<br/>    // private SnowFlake snowFlake;<br/><br/>    @Before(\"controllerPointcut()\")<br/>    public void doBefore(JoinPoint joinPoint) throws Throwable {<br/><br/>        // 增加日志流水号<br/>        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));<br/><br/>        // 开始打印请求日志<br/>        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br/>        HttpServletRequest request = attributes.getRequest();<br/>        Signature signature = joinPoint.getSignature();<br/>        String name = signature.getName();<br/><br/>        // 打印请求信息<br/>        LOG.info(\"------------- 开始 -------------\");<br/>        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());<br/>        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);<br/>        LOG.info(\"远程地址: {}\", request.getRemoteAddr());<br/><br/>        RequestContext.setRemoteAddr(getRemoteIp(request));<br/><br/>        // 拿到所有的参数<br/>        Object[] args = joinPoint.getArgs();<br/>        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));<br/><br/>        Object[] arguments  = new Object[args.length];<br/>        for (int i = 0; i &lt; args.length; i++) {<br/>            if (args[i] instanceof ServletRequest<br/>                    || args[i] instanceof ServletResponse<br/>                    || args[i] instanceof MultipartFile) {<br/>                continue;<br/>            }<br/>            arguments[i] = args[i];<br/>        }<br/>        // 排除字段，敏感字段或太长的字段不显示<br/>        String[] excludeProperties = {\"password\", \"file\"};<br/>        PropertyPreFilters filters = new PropertyPreFilters();<br/>        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();<br/>        excludefilter.addExcludes(excludeProperties);<br/>        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));<br/>    }<br/><br/>    @Around(\"controllerPointcut()\")<br/>    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {<br/>        long startTime = System.currentTimeMillis();<br/>        Object result = proceedingJoinPoint.proceed();<br/>        // 排除字段，敏感字段或太长的字段不显示<br/>        String[] excludeProperties = {\"password\", \"file\"};<br/>        PropertyPreFilters filters = new PropertyPreFilters();<br/>        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();<br/>        excludefilter.addExcludes(excludeProperties);<br/>        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));<br/>        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);<br/>        return result;<br/>    }<br/><br/>    /**<br/>     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP<br/>     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突<br/>     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径<br/>     * @param request<br/>     * @return<br/>     */<br/>    public String getRemoteIp(HttpServletRequest request) {<br/>        String ip = request.getHeader(\"x-forwarded-for\");<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getHeader(\"Proxy-Client-IP\");<br/>        }<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getHeader(\"WL-Proxy-Client-IP\");<br/>        }<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getRemoteAddr();<br/>        }<br/>        return ip;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 11. 解决前后端 Long 精度丢失问题<br/><br/>我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失<br/><br/><br/><br/>* 配置文件新增 JacksonConfig 类<br/><br/>![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)<br/><br/><br/><br/>* 代码如下<br/><br/>```java<br/>@Configuration<br/>public class JacksonConfig {<br/><br/>    @Bean<br/>    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {<br/>        ObjectMapper objectMapper = builder.createXmlMapper(false).build();<br/>        SimpleModule simpleModule = new SimpleModule();<br/>        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br/>        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br/>        objectMapper.registerModule(simpleModule);<br/>        return objectMapper;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 12. 新建 req resp 包<br/><br/>我们要将请求与返回包装<br/><br/>![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)<br/><br/><br/><br/>### 13. CommonResp<br/><br/>为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp<br/><br/>![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)<br/><br/>**代码如下：**<br/><br/>```java<br/>@Data<br/>@AllArgsConstructor<br/>@NoArgsConstructor<br/>public class CommonResp&lt;T&gt; {<br/>    /**<br/>     * 返回是否成功<br/>     */<br/>    private boolean isSuccess=true;<br/><br/>    /**<br/>     * 返回失败时，返回的错误信息<br/>     */<br/>    private String message;<br/><br/>    /**<br/>     * 返回成功的时候，返回的内容<br/>     */<br/>    private T content;<br/>}<br/>```<br/><br/><br/><br/>### 14. 自定义异常<br/><br/>* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`<br/><br/>![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)<br/><br/><br/><br/>* `BusinessException`代码<br/><br/>```java<br/>public class BusinessException extends RuntimeException{<br/>    private BusinessExceptionCode code;<br/><br/>    public BusinessException (BusinessExceptionCode code) {<br/>        /**<br/>         * 父类有个成员变量  private String desc<br/>         * 需要为这个成员变量赋值<br/>         */<br/>        super(code.getDesc());<br/>        this.code = code;<br/>    }<br/><br/>    public BusinessExceptionCode getCode() {<br/>        return code;<br/>    }<br/><br/>    public void setCode(BusinessExceptionCode code) {<br/>        this.code = code;<br/>    }<br/><br/>    /**<br/>     * 不写入堆栈信息，提高性能<br/>     */<br/>    @Override<br/>    public Throwable fillInStackTrace() {<br/>        return this;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* `BusinessExceptionCode`代码<br/><br/>```java<br/>public enum BusinessExceptionCode {<br/>    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),<br/>    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),<br/>    VOTE_REPEAT(\"您已点赞过\"),<br/>    ;<br/><br/>    private String desc;<br/><br/>    BusinessExceptionCode(String desc) {<br/>        this.desc = desc;<br/>    }<br/><br/>    public String getDesc() {<br/>        return desc;<br/>    }<br/><br/>    public void setDesc(String desc) {<br/>        this.desc = desc;<br/>    }<br/>}<br/>```<br/><br/><br/><br/><br/><br/>### 13. 统一异常处理<br/><br/>我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp<br/><br/><br/><br/>* 新建 ControllerExceptionHandler 类<br/><br/>![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)<br/><br/><br/><br/>* 代码如下<br/><br/>logger 要根据项目改一下<br/><br/>```java<br/>/**<br/> * 统一异常处理、数据预处理等<br/> * 该类用于捕获系统弹出的异常<br/> * 将异常包装成一个 CommonResp<br/> * 从而方便前端调用，显示错误信息<br/> */<br/>@ControllerAdvice<br/>public class ControllerExceptionHandler {<br/>    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = BindException.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(BindException e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());<br/>        return commonResp;<br/>    }<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = BusinessException.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(BusinessException e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(e.getCode().getDesc());<br/>        return commonResp;<br/>    }<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = Exception.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(Exception e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.error(\"系统异常：\", e);<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(\"系统出现异常，请联系管理员\");<br/>        return commonResp;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 14. 添加日志记录 logback<br/><br/>* 在 resource 下，新建logback-spring.xml 文件<br/><br/>![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)<br/><br/>* 写入内容<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br/>&lt;configuration&gt;<br/>    &lt;!-- 修改一下路径--&gt;<br/>    &lt;property name=\"PATH\" value=\"./log\"&gt;&lt;/property&gt;<br/><br/>    &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;<br/>        &lt;encoder&gt;<br/>            &lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n&lt;/Pattern&gt;<br/>            &lt;!--&lt;Pattern&gt;%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n&lt;/Pattern&gt;--&gt;<br/>        &lt;/encoder&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br/>        &lt;file&gt;${PATH}/trace.log&lt;/file&gt;<br/>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br/>            &lt;FileNamePattern&gt;${PATH}/trace.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;<br/>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br/>                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;<br/>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br/>        &lt;/rollingPolicy&gt;<br/>        &lt;layout&gt;<br/>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;<br/>        &lt;/layout&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br/>        &lt;file&gt;${PATH}/error.log&lt;/file&gt;<br/>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br/>            &lt;FileNamePattern&gt;${PATH}/error.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;<br/>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br/>                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;<br/>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br/>        &lt;/rollingPolicy&gt;<br/>        &lt;layout&gt;<br/>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;<br/>        &lt;/layout&gt;<br/>        &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;<br/>            &lt;level&gt;ERROR&lt;/level&gt;<br/>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br/>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br/>        &lt;/filter&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;root level=\"ERROR\"&gt;<br/>        &lt;appender-ref ref=\"ERROR_FILE\" /&gt;<br/>    &lt;/root&gt;<br/><br/>    &lt;root level=\"TRACE\"&gt;<br/>        &lt;appender-ref ref=\"TRACE_FILE\" /&gt;<br/>    &lt;/root&gt;<br/><br/>    &lt;root level=\"INFO\"&gt;<br/>        &lt;appender-ref ref=\"STDOUT\" /&gt;<br/>    &lt;/root&gt;<br/>&lt;/configuration&gt;<br/><br/>```<br/><br/><br/><br/>### 15. 自定义 banner<br/><br/>resources 下新建 banner.txt<br/><br/>![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)<br/><br/><br/><br/>里面放上自定义 banner<br/><br/>```txt<br/> ********     **     *******     *******         ********<br/>/**/////     ****   /**////**   **/////**       //////** <br/>/**         **//**  /**   /**  **     //**           **  <br/>/*******   **  //** /*******  /**      /**          **   <br/>/**////   **********/**///**  /**      /**         **    <br/>/**      /**//////**/**  //** //**     **         **     <br/>/**      /**     /**/**   //** //*******   ***** ********<br/>//       //      // //     //   ///////   ///// //////// <br/>```<br/><br/><br/><br/><br/></p>","success":true}
2021-04-16 00:57:10.221 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：12 ms -------------
2021-04-16 00:58:21.144 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:58:21.146 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:58:21.146 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:58:21.147 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:58:21.148 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:58:21.156 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:58:21.157 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：13 ms -------------
2021-04-16 00:58:22.616 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:58:22.617 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:58:22.617 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:58:22.617 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:58:22.618 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:58:22.624 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:58:22.624 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：8 ms -------------
2021-04-16 00:58:24.258 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:58:24.258 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:58:24.258 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:58:24.258 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:58:24.258 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:58:24.258 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:58:24.259 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:58:24.259 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:58:24.259 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:58:24.259 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:58:24.264 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:58:24.264 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:58:24.266 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<p><br/># 完整项目搭建流程<br/><br/>虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。<br/><br/>这次将创建的整个流程记录下来，方便以后的项目搭建。<br/><br/>要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==<br/><br/>如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了<br/><br/><br/><br/>## 数据库<br/><br/>一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限<br/><br/><br/><br/>### 1. **连接 admin**<br/><br/>只有 admin 有所有权限<br/><br/>我的数据库 admin 的账户名和密码是：<br/><br/>**账户：**admin<br/><br/>**密码：**123<br/><br/>![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)<br/><br/><br/><br/>### 2. **新建数据库**<br/><br/>其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号<br/><br/>![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)<br/><br/>### 3. **为这个数据库，专门建一个用户**<br/><br/>开发环境中，就将密码和用户名设置成一样的，这样不会忘记<br/><br/>host 设置为 localhost<br/><br/>![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)<br/><br/><br/><br/>### 4. **为这个用户，授予对应数据库的全部权限**<br/><br/>![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)<br/><br/>![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)<br/><br/>### 5. **对当前用户，建立连接**<br/><br/>![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)<br/><br/><br/><br/><br/><br/>## 后端<br/><br/>关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。<br/><br/>### 1. 新建 SpringBoot 项目<br/><br/>* 点击 `SpringInitiallizr`，新建项目<br/><br/>![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)<br/><br/>* 选择默认依赖的包<br/><br/>![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)<br/><br/>![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)<br/><br/>![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)<br/><br/>* 选择存放路径<br/><br/>![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)<br/><br/>* 新建完成后，项目目录如下<br/><br/>![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)<br/><br/><br/><br/>### 2. 更改启动类位置<br/><br/>* 新建 config 包，将启动类放进去<br/><br/>![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)<br/><br/><br/><br/>* 为启动类添加注解<br/><br/>注解内的信息，是项目名称<br/><br/>```java<br/>@ComponentScan(\"weixindemo\")<br/>```<br/><br/>![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)<br/><br/><br/><br/>### 3. IDEA 数据库配置<br/><br/>* IDEA 连接数据库<br/><br/>![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)<br/><br/>![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)<br/><br/><br/><br/>* 添加 sql 脚本<br/><br/>新建 sql 文件夹，建立`all.sql`文件<br/><br/>![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)<br/><br/><br/><br/>我们在 sql 脚本中添加测试用数据，并执行<br/><br/>```sql<br/><br/># 测试表<br/>drop table if exists `test`;<br/>create table `test` (<br/>  `id` bigint not null comment 'id',<br/>  `name` varchar(50) comment '名称',<br/>  `password` varchar(50) comment '密码',<br/>  primary key (`id`)<br/>) engine=innodb default charset=utf8mb4 comment='测试';<br/><br/>insert into `test` (id, name, password) values (1, '测试', 'password');       <br/>```<br/><br/>可以看到，数据库已建立<br/><br/>![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)<br/><br/><br/><br/>### 4. 配置 MyBatis<br/><br/>* 在 `resource`文件夹下，新建 `mapper`文件夹<br/><br/>这是用来存放 MyBatis 的实现的<br/><br/>![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)<br/><br/><br/><br/>* 新建 pojo 包<br/><br/>pojo 包用来存放实体类<br/><br/>![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)<br/><br/><br/><br/>* 在项目下，新建 mapper 包，用来存放接口<br/><br/>![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)<br/><br/><br/><br/>* 将配置文件后缀改为`.yml`<br/><br/>我个人习惯使用`.yml`进行位置<br/><br/>![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)<br/><br/><br/><br/>* 添加 `Mybatis`配置<br/><br/>这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改<br/><br/>```yml<br/>spring:<br/>  datasource:<br/>    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&amp;characterEncoding=utf-8<br/>    username: weixindemo<br/>    password: weixindemo<br/>    driver-class-name: com.mysql.cj.jdbc.Driver<br/>    <br/>    <br/># 整合Mybatis<br/>mybatis:<br/>  # ** 表示在mapper下不管有多少文件夹，都可以全部识别<br/>  mapper-locations: classpath:/mapper/**/*.xml<br/>  type-aliases-package: weixindemo.pojo<br/>  #  打印sql相关的日志信息<br/>  configuration:<br/>    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<br/>```<br/><br/>![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)<br/><br/><br/><br/>* 添加端口配置<br/><br/>因为 vue 也是用的8080端口，我们不能和它重了<br/><br/>```yml<br/>server:<br/>  port: 8880<br/>```<br/><br/><br/><br/>* 启动类添加`mapper`接口扫描路径<br/><br/>```java<br/>@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描<br/>```<br/><br/>![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)<br/><br/><br/><br/>### 5. MVC 包建立<br/><br/>我们还要建立 ==service==，==util==，==controller==包<br/><br/>![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)<br/><br/>![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)<br/><br/><br/><br/>### 5. 测试 Mybatis 配置<br/><br/>配置到这一步，要对之前的配置，进行一个测试<br/><br/>* pojo 中，新建 Test 实体类<br/><br/>![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)<br/><br/>```java<br/>@Data<br/>@AllArgsConstructor<br/>@NoArgsConstructor<br/>public class Test {<br/>    private Integer id;<br/>    private String name;<br/>}<br/>```<br/><br/><br/><br/>* mapper 包中，新建 TestMapper 接口<br/><br/>![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)<br/><br/>```java<br/>@Repository<br/>@Mapper<br/>public interface TestMapper {<br/>    List&lt;Test&gt; getList();<br/>}<br/>```<br/><br/><br/><br/>* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现<br/><br/>  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)<br/><br/>具体内容，要根据实际项目修改<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;<br/>&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"<br/>    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;<br/><br/>&lt;!--namespace要和接口的位置和名字对应--&gt;<br/>&lt;mapper namespace=\"weixindemo.mapper.TestMapper\"&gt;<br/><br/>    &lt;select id=\"getList\" resultType=\"weixindemo.pojo.Test\"&gt;<br/>        select * from test<br/>    &lt;/select&gt;<br/><br/>&lt;/mapper&gt;<br/>```<br/><br/>![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)<br/><br/><br/><br/>* 在 service 包下，新建 TestService<br/><br/>![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)<br/><br/>别忘了加上 @Service 注解<br/><br/>```java<br/>@Service<br/>public class TestService {<br/><br/>    @Autowired<br/>    private TestMapper mapper;<br/><br/>    public List&lt;Test&gt; getList() {<br/>        return mapper.getList();<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 在 controller包下，新建 TestController<br/><br/>![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)<br/><br/>```java<br/>@RestController<br/>public class TestController {<br/><br/>    @Autowired<br/>    private TestService testService;<br/>    <br/><br/>    @RequestMapping(\"/test/list\")<br/>    public List&lt;Test&gt; list() {<br/>        return testService.getList();<br/>    }<br/><br/>}<br/>```<br/><br/><br/><br/>* 重启项目<br/><br/><br/><br/>* 新建 http 文件，编写 http 测试脚本，执行<br/><br/>![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)<br/><br/>```http<br/>GET http://localhost:8880/test/list<br/>Accept: application/json<br/><br/>###<br/>```<br/><br/><br/><br/>最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作<br/><br/>![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)<br/><br/><br/><br/>### 6. MyBatis 代码生成器<br/><br/>我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的<br/><br/><br/><br/>* 导入 Maven 依赖<br/><br/>注意，==是放在`plugiuns`下面的==<br/><br/>```xml<br/>&lt;!-- mybatis generator 自动生成代码插件 --&gt;<br/>            &lt;plugin&gt;<br/>                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br/>                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;<br/>                &lt;version&gt;1.4.0&lt;/version&gt;<br/>                &lt;configuration&gt;<br/>                    &lt;configurationFile&gt;src/main/resources/generator/generator-config.xml&lt;/configurationFile&gt;<br/>                    &lt;overwrite&gt;true&lt;/overwrite&gt;<br/>                    &lt;verbose&gt;true&lt;/verbose&gt;<br/>                &lt;/configuration&gt;<br/>                &lt;dependencies&gt;<br/>                    &lt;dependency&gt;<br/>                        &lt;groupId&gt;mysql&lt;/groupId&gt;<br/>                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br/>                        &lt;version&gt;8.0.22&lt;/version&gt;<br/>                    &lt;/dependency&gt;<br/>                &lt;/dependencies&gt;<br/>            &lt;/plugin&gt;<br/>```<br/><br/><br/><br/>* 建立代生成器位置<br/><br/>pom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`<br/><br/>```xml<br/>&lt;configurationFile&gt;<br/>  src/main/resources/generator/generator-config.xml<br/>&lt;/configurationFile&gt;<br/>```<br/><br/>![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)<br/><br/><br/><br/>* 代码生成器代码<br/><br/>从`jdbcConnection`开始，别忘了==根据项目进行修改==<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br/>&lt;!DOCTYPE generatorConfiguration<br/>        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"<br/>        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;<br/><br/>&lt;generatorConfiguration&gt;<br/>    &lt;context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\"&gt;<br/><br/>        &lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;<br/>        &lt;property name=\"autoDelimitKeywords\" value=\"true\"/&gt;<br/>        &lt;property name=\"beginningDelimiter\" value=\"`\"/&gt;<br/>        &lt;property name=\"endingDelimiter\" value=\"`\"/&gt;<br/><br/>        &lt;!--覆盖生成XML文件--&gt;<br/>        &lt;plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" /&gt;<br/>        &lt;!-- 生成的实体类添加toString()方法 --&gt;<br/>        &lt;plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/&gt;<br/><br/>        &lt;!-- 不生成注释 --&gt;<br/>        &lt;commentGenerator&gt;<br/>            &lt;property name=\"suppressAllComments\" value=\"true\"/&gt;<br/>        &lt;/commentGenerator&gt;<br/><br/>        &lt;jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"<br/>                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"<br/>                        userId=\"wiki\"<br/>                        password=\"123456\"&gt;<br/>        &lt;/jdbcConnection&gt;<br/><br/>        &lt;!-- domain类的位置 --&gt;<br/>        &lt;javaModelGenerator targetProject=\"src/main/java\"<br/>                            targetPackage=\"top.faroz.pojo\"/&gt;<br/><br/>        &lt;!-- mapper xml的位置 --&gt;<br/>        &lt;sqlMapGenerator targetProject=\"src/main/resources\"<br/>                         targetPackage=\"mapper\"/&gt;<br/><br/>        &lt;!-- mapper类的位置 --&gt;<br/>        &lt;javaClientGenerator targetProject=\"src/main/java\"<br/>                             targetPackage=\"top.faroz.mapper\"<br/>                             type=\"XMLMAPPER\"/&gt;<br/><br/>        &lt;table tableName=\"demo\" domainObjectName=\"Demo\"/&gt;<br/>        &lt;!--&lt;table tableName=\"ebook\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"category\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"doc\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"content\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"user\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"ebook_snapshot\"/&gt;--&gt;<br/>    &lt;/context&gt;<br/>&lt;/generatorConfiguration&gt;<br/>```<br/><br/><br/><br/>* 新建一个maven启动项<br/><br/>![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)<br/><br/>![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)<br/><br/>```bash<br/>mybatis-generator:generate -e<br/>```<br/><br/>![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)<br/><br/><br/><br/>### 7. 测试代码生成器<br/><br/>代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表<br/><br/><br/><br/>* all.sql 添加 demo 表的增加 SQL 语句，并执行<br/><br/>```sql<br/># demo列表<br/>drop table if exists `demo`;<br/>create table `demo` (<br/>    `id` bigint not null comment 'id',<br/>    `name` varchar(50) comment '名称',<br/>    primary key (`id`)<br/>) engine=innodb default charset =utf8mb4 comment '测试';<br/><br/>insert into `demo` (id,name) values(2,'测试2');<br/>```<br/><br/><br/><br/>* 在代码生成器最后的部分，填上要生成的表名<br/><br/>![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)<br/><br/><br/><br/>* 执行<br/><br/>![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)<br/><br/><br/><br/>* 执行成功，会生成 4 个新文件<br/><br/>![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)<br/><br/><br/><br/>* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码<br/><br/>```java<br/>@RestController<br/>public class DemoController {<br/><br/>    @Autowired<br/>    private DemoService demoService;<br/><br/>    @RequestMapping(\"/demo/list\")<br/>    public List&lt;Demo&gt; list() {<br/>        return demoService.getList();<br/>    }<br/>}<br/>```<br/><br/>```java<br/>@Service<br/>public class DemoService {<br/><br/>    @Resource<br/>    private DemoMapper demoMapper;<br/><br/>    public List&lt;Demo&gt; getList() {<br/>        List&lt;Demo&gt; list = demoMapper.selectByExample(null);<br/>        return list;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 添加 demo 的 http 测试脚本<br/><br/>```http<br/>GET http://localhost:8880/demo/list<br/>Accept: application/json<br/><br/>###<br/>```<br/><br/>测试成功，说明我们用代码生成器生成的代码没有问题<br/><br/>![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)<br/><br/><br/><br/>### 8. 解决前后端跨域问题<br/><br/>虽然现在还没有构建前端项目，但是后面，会出现跨域问题<br/><br/><br/><br/>* 新建 CorsConfig 类<br/><br/>![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)<br/><br/><br/><br/>* 代码如下<br/><br/>不用改动，直接用，别忘了加上==@Configuration==注解<br/><br/>```java<br/>@Configuration<br/>public class CorsConfig implements WebMvcConfigurer {<br/><br/>    @Override<br/>    public void addCorsMappings(CorsRegistry registry) {<br/>        registry.addMapping(\"/**\")<br/>                .allowedOriginPatterns(\"*\")<br/>                .allowedHeaders(CorsConfiguration.ALL)<br/>                .allowedMethods(CorsConfiguration.ALL)<br/>                .allowCredentials(true)<br/>                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 9. 添加雪花算法工具类<br/><br/>雪花算法，用来生成唯一 ID<br/><br/><br/><br/>* 新建 SnowFlake 工具类<br/><br/>![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)<br/><br/><br/><br/>* 代码如下<br/><br/>别忘了加上 @Component 注解<br/><br/>```java<br/>@Component<br/>public class SnowFlake {<br/>    /**<br/>     * 起始的时间戳<br/>     */<br/>    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00<br/><br/>    /**<br/>     * 每一部分占用的位数<br/>     */<br/>    private final static long SEQUENCE_BIT = 12; //序列号占用的位数<br/>    private final static long MACHINE_BIT = 5;   //机器标识占用的位数<br/>    private final static long DATACENTER_BIT = 5;//数据中心占用的位数<br/><br/>    /**<br/>     * 每一部分的最大值<br/>     */<br/>    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L &lt;&lt; DATACENTER_BIT);<br/>    private final static long MAX_MACHINE_NUM = -1L ^ (-1L &lt;&lt; MACHINE_BIT);<br/>    private final static long MAX_SEQUENCE = -1L ^ (-1L &lt;&lt; SEQUENCE_BIT);<br/><br/>    /**<br/>     * 每一部分向左的位移<br/>     */<br/>    private final static long MACHINE_LEFT = SEQUENCE_BIT;<br/>    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;<br/>    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;<br/><br/>    private long datacenterId = 1;  //数据中心<br/>    private long machineId = 1;     //机器标识<br/>    private long sequence = 0L; //序列号<br/>    private long lastStmp = -1L;//上一次时间戳<br/><br/>    public SnowFlake() {<br/>    }<br/><br/>    public SnowFlake(long datacenterId, long machineId) {<br/>        if (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; 0) {<br/>            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");<br/>        }<br/>        if (machineId &gt; MAX_MACHINE_NUM || machineId &lt; 0) {<br/>            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");<br/>        }<br/>        this.datacenterId = datacenterId;<br/>        this.machineId = machineId;<br/>    }<br/><br/>    /**<br/>     * 产生下一个ID<br/>     *<br/>     * @return<br/>     */<br/>    public synchronized long nextId() {<br/>        long currStmp = getNewstmp();<br/>        if (currStmp &lt; lastStmp) {<br/>            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");<br/>        }<br/><br/>        if (currStmp == lastStmp) {<br/>            //相同毫秒内，序列号自增<br/>            sequence = (sequence + 1) &amp; MAX_SEQUENCE;<br/>            //同一毫秒的序列数已经达到最大<br/>            if (sequence == 0L) {<br/>                currStmp = getNextMill();<br/>            }<br/>        } else {<br/>            //不同毫秒内，序列号置为0<br/>            sequence = 0L;<br/>        }<br/><br/>        lastStmp = currStmp;<br/><br/>        return (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT //时间戳部分<br/>                | datacenterId &lt;&lt; DATACENTER_LEFT       //数据中心部分<br/>                | machineId &lt;&lt; MACHINE_LEFT             //机器标识部分<br/>                | sequence;                             //序列号部分<br/>    }<br/><br/>    private long getNextMill() {<br/>        long mill = getNewstmp();<br/>        while (mill &lt;= lastStmp) {<br/>            mill = getNewstmp();<br/>        }<br/>        return mill;<br/>    }<br/><br/>    private long getNewstmp() {<br/>        return System.currentTimeMillis();<br/>    }<br/><br/>    // public static void main(String[] args) throws ParseException {<br/>    //     // 时间戳<br/>    //     // System.out.println(System.currentTimeMillis());<br/>    //     // System.out.println(new Date().getTime());<br/>    //     //<br/>    //     // String dateTime = \"2021-01-01 08:00:00\";<br/>    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");<br/>    //     // System.out.println(sdf.parse(dateTime).getTime());<br/>    //<br/>    //     SnowFlake snowFlake = new SnowFlake(1, 1);<br/>    //<br/>    //     long start = System.currentTimeMillis();<br/>    //     for (int i = 0; i &lt; 10; i++) {<br/>    //         System.out.println(snowFlake.nextId());<br/>    //         System.out.println(System.currentTimeMillis() - start);<br/>    //     }<br/>    // }<br/><br/>}<br/>```<br/><br/><br/><br/><br/><br/>### 10. 添加 AOP<br/><br/>AOP 用来打印接口日志，方便后期调试<br/><br/><br/><br/>* Maven 中引入 fastjson，因为 我们的类中要用<br/><br/>```xml<br/> &lt;!--fastjson--&gt;<br/>&lt;dependency&gt;<br/>  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br/>  &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br/>  &lt;version&gt;1.2.70&lt;/version&gt;<br/>&lt;/dependency&gt;<br/>```<br/><br/><br/><br/>* Maven 引入 AOP<br/><br/>```xml<br/>&lt;!--导入aop--&gt;<br/>&lt;dependency&gt;<br/>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br/>  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;<br/>&lt;/dependency&gt;<br/>```<br/><br/><br/><br/>* 添加 RequestContext 工具类<br/><br/>这个是后期为了打印 WebSocket 日志的<br/><br/>![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)<br/><br/>```java<br/>public class RequestContext implements Serializable {<br/>    private static ThreadLocal&lt;String&gt; remoteAddr = new ThreadLocal&lt;&gt;();<br/><br/>    public static String getRemoteAddr() {<br/>        return remoteAddr.get();<br/>    }<br/><br/>    public static void setRemoteAddr(String remoteAddr) {<br/>        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 新建 aspect 包，并新建 LogAspect 类<br/><br/>![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)<br/><br/><br/><br/>**LogAspect 代码如下:**<br/><br/>切点的代码，我们要依据项目修改<br/><br/>![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)<br/><br/>```java<br/>@Aspect<br/>@Component<br/>public class LogAspect {<br/>    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);<br/><br/>    @Resource<br/>    private SnowFlake snowFlake;<br/><br/>    /** 定义一个切点 */<br/>    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")<br/>    public void controllerPointcut() {}<br/><br/>    // @Resource<br/>    // private SnowFlake snowFlake;<br/><br/>    @Before(\"controllerPointcut()\")<br/>    public void doBefore(JoinPoint joinPoint) throws Throwable {<br/><br/>        // 增加日志流水号<br/>        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));<br/><br/>        // 开始打印请求日志<br/>        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br/>        HttpServletRequest request = attributes.getRequest();<br/>        Signature signature = joinPoint.getSignature();<br/>        String name = signature.getName();<br/><br/>        // 打印请求信息<br/>        LOG.info(\"------------- 开始 -------------\");<br/>        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());<br/>        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);<br/>        LOG.info(\"远程地址: {}\", request.getRemoteAddr());<br/><br/>        RequestContext.setRemoteAddr(getRemoteIp(request));<br/><br/>        // 拿到所有的参数<br/>        Object[] args = joinPoint.getArgs();<br/>        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));<br/><br/>        Object[] arguments  = new Object[args.length];<br/>        for (int i = 0; i &lt; args.length; i++) {<br/>            if (args[i] instanceof ServletRequest<br/>                    || args[i] instanceof ServletResponse<br/>                    || args[i] instanceof MultipartFile) {<br/>                continue;<br/>            }<br/>            arguments[i] = args[i];<br/>        }<br/>        // 排除字段，敏感字段或太长的字段不显示<br/>        String[] excludeProperties = {\"password\", \"file\"};<br/>        PropertyPreFilters filters = new PropertyPreFilters();<br/>        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();<br/>        excludefilter.addExcludes(excludeProperties);<br/>        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));<br/>    }<br/><br/>    @Around(\"controllerPointcut()\")<br/>    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {<br/>        long startTime = System.currentTimeMillis();<br/>        Object result = proceedingJoinPoint.proceed();<br/>        // 排除字段，敏感字段或太长的字段不显示<br/>        String[] excludeProperties = {\"password\", \"file\"};<br/>        PropertyPreFilters filters = new PropertyPreFilters();<br/>        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();<br/>        excludefilter.addExcludes(excludeProperties);<br/>        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));<br/>        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);<br/>        return result;<br/>    }<br/><br/>    /**<br/>     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP<br/>     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突<br/>     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径<br/>     * @param request<br/>     * @return<br/>     */<br/>    public String getRemoteIp(HttpServletRequest request) {<br/>        String ip = request.getHeader(\"x-forwarded-for\");<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getHeader(\"Proxy-Client-IP\");<br/>        }<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getHeader(\"WL-Proxy-Client-IP\");<br/>        }<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getRemoteAddr();<br/>        }<br/>        return ip;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 11. 解决前后端 Long 精度丢失问题<br/><br/>我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失<br/><br/><br/><br/>* 配置文件新增 JacksonConfig 类<br/><br/>![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)<br/><br/><br/><br/>* 代码如下<br/><br/>```java<br/>@Configuration<br/>public class JacksonConfig {<br/><br/>    @Bean<br/>    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {<br/>        ObjectMapper objectMapper = builder.createXmlMapper(false).build();<br/>        SimpleModule simpleModule = new SimpleModule();<br/>        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br/>        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br/>        objectMapper.registerModule(simpleModule);<br/>        return objectMapper;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 12. 新建 req resp 包<br/><br/>我们要将请求与返回包装<br/><br/>![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)<br/><br/><br/><br/>### 13. CommonResp<br/><br/>为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp<br/><br/>![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)<br/><br/>**代码如下：**<br/><br/>```java<br/>@Data<br/>@AllArgsConstructor<br/>@NoArgsConstructor<br/>public class CommonResp&lt;T&gt; {<br/>    /**<br/>     * 返回是否成功<br/>     */<br/>    private boolean isSuccess=true;<br/><br/>    /**<br/>     * 返回失败时，返回的错误信息<br/>     */<br/>    private String message;<br/><br/>    /**<br/>     * 返回成功的时候，返回的内容<br/>     */<br/>    private T content;<br/>}<br/>```<br/><br/><br/><br/>### 14. 自定义异常<br/><br/>* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`<br/><br/>![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)<br/><br/><br/><br/>* `BusinessException`代码<br/><br/>```java<br/>public class BusinessException extends RuntimeException{<br/>    private BusinessExceptionCode code;<br/><br/>    public BusinessException (BusinessExceptionCode code) {<br/>        /**<br/>         * 父类有个成员变量  private String desc<br/>         * 需要为这个成员变量赋值<br/>         */<br/>        super(code.getDesc());<br/>        this.code = code;<br/>    }<br/><br/>    public BusinessExceptionCode getCode() {<br/>        return code;<br/>    }<br/><br/>    public void setCode(BusinessExceptionCode code) {<br/>        this.code = code;<br/>    }<br/><br/>    /**<br/>     * 不写入堆栈信息，提高性能<br/>     */<br/>    @Override<br/>    public Throwable fillInStackTrace() {<br/>        return this;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* `BusinessExceptionCode`代码<br/><br/>```java<br/>public enum BusinessExceptionCode {<br/>    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),<br/>    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),<br/>    VOTE_REPEAT(\"您已点赞过\"),<br/>    ;<br/><br/>    private String desc;<br/><br/>    BusinessExceptionCode(String desc) {<br/>        this.desc = desc;<br/>    }<br/><br/>    public String getDesc() {<br/>        return desc;<br/>    }<br/><br/>    public void setDesc(String desc) {<br/>        this.desc = desc;<br/>    }<br/>}<br/>```<br/><br/><br/><br/><br/><br/>### 13. 统一异常处理<br/><br/>我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp<br/><br/><br/><br/>* 新建 ControllerExceptionHandler 类<br/><br/>![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)<br/><br/><br/><br/>* 代码如下<br/><br/>logger 要根据项目改一下<br/><br/>```java<br/>/**<br/> * 统一异常处理、数据预处理等<br/> * 该类用于捕获系统弹出的异常<br/> * 将异常包装成一个 CommonResp<br/> * 从而方便前端调用，显示错误信息<br/> */<br/>@ControllerAdvice<br/>public class ControllerExceptionHandler {<br/>    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = BindException.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(BindException e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());<br/>        return commonResp;<br/>    }<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = BusinessException.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(BusinessException e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(e.getCode().getDesc());<br/>        return commonResp;<br/>    }<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = Exception.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(Exception e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.error(\"系统异常：\", e);<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(\"系统出现异常，请联系管理员\");<br/>        return commonResp;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 14. 添加日志记录 logback<br/><br/>* 在 resource 下，新建logback-spring.xml 文件<br/><br/>![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)<br/><br/>* 写入内容<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br/>&lt;configuration&gt;<br/>    &lt;!-- 修改一下路径--&gt;<br/>    &lt;property name=\"PATH\" value=\"./log\"&gt;&lt;/property&gt;<br/><br/>    &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;<br/>        &lt;encoder&gt;<br/>            &lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n&lt;/Pattern&gt;<br/>            &lt;!--&lt;Pattern&gt;%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n&lt;/Pattern&gt;--&gt;<br/>        &lt;/encoder&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br/>        &lt;file&gt;${PATH}/trace.log&lt;/file&gt;<br/>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br/>            &lt;FileNamePattern&gt;${PATH}/trace.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;<br/>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br/>                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;<br/>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br/>        &lt;/rollingPolicy&gt;<br/>        &lt;layout&gt;<br/>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;<br/>        &lt;/layout&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br/>        &lt;file&gt;${PATH}/error.log&lt;/file&gt;<br/>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br/>            &lt;FileNamePattern&gt;${PATH}/error.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;<br/>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br/>                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;<br/>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br/>        &lt;/rollingPolicy&gt;<br/>        &lt;layout&gt;<br/>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;<br/>        &lt;/layout&gt;<br/>        &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;<br/>            &lt;level&gt;ERROR&lt;/level&gt;<br/>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br/>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br/>        &lt;/filter&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;root level=\"ERROR\"&gt;<br/>        &lt;appender-ref ref=\"ERROR_FILE\" /&gt;<br/>    &lt;/root&gt;<br/><br/>    &lt;root level=\"TRACE\"&gt;<br/>        &lt;appender-ref ref=\"TRACE_FILE\" /&gt;<br/>    &lt;/root&gt;<br/><br/>    &lt;root level=\"INFO\"&gt;<br/>        &lt;appender-ref ref=\"STDOUT\" /&gt;<br/>    &lt;/root&gt;<br/>&lt;/configuration&gt;<br/><br/>```<br/><br/><br/><br/>### 15. 自定义 banner<br/><br/>resources 下新建 banner.txt<br/><br/>![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)<br/><br/><br/><br/>里面放上自定义 banner<br/><br/>```txt<br/> ********     **     *******     *******         ********<br/>/**/////     ****   /**////**   **/////**       //////** <br/>/**         **//**  /**   /**  **     //**           **  <br/>/*******   **  //** /*******  /**      /**          **   <br/>/**////   **********/**///**  /**      /**         **    <br/>/**      /**//////**/**  //** //**     **         **     <br/>/**      /**     /**/**   //** //*******   ***** ********<br/>//       //      // //     //   ///////   ///// //////// <br/>```<br/><br/><br/><br/><br/></p>","success":true}
2021-04-16 00:58:24.271 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：13 ms -------------
2021-04-16 00:58:35.293 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 00:58:35.436 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
2021-04-16 00:59:19.238 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:59:19.238 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:59:19.241 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:59:19.240 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:59:19.242 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:59:19.244 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:59:19.245 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:59:19.244 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:59:19.245 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:59:19.245 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:59:19.249 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:59:19.249 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：11 ms -------------
2021-04-16 00:59:19.253 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"<p><br/># 完整项目搭建流程<br/><br/>虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。<br/><br/>这次将创建的整个流程记录下来，方便以后的项目搭建。<br/><br/>要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==<br/><br/>如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了<br/><br/><br/><br/>## 数据库<br/><br/>一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限<br/><br/><br/><br/>### 1. **连接 admin**<br/><br/>只有 admin 有所有权限<br/><br/>我的数据库 admin 的账户名和密码是：<br/><br/>**账户：**admin<br/><br/>**密码：**123<br/><br/>![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)<br/><br/><br/><br/>### 2. **新建数据库**<br/><br/>其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号<br/><br/>![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)<br/><br/>### 3. **为这个数据库，专门建一个用户**<br/><br/>开发环境中，就将密码和用户名设置成一样的，这样不会忘记<br/><br/>host 设置为 localhost<br/><br/>![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)<br/><br/><br/><br/>### 4. **为这个用户，授予对应数据库的全部权限**<br/><br/>![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)<br/><br/>![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)<br/><br/>### 5. **对当前用户，建立连接**<br/><br/>![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)<br/><br/><br/><br/><br/><br/>## 后端<br/><br/>关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。<br/><br/>### 1. 新建 SpringBoot 项目<br/><br/>* 点击 `SpringInitiallizr`，新建项目<br/><br/>![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)<br/><br/>* 选择默认依赖的包<br/><br/>![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)<br/><br/>![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)<br/><br/>![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)<br/><br/>* 选择存放路径<br/><br/>![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)<br/><br/>* 新建完成后，项目目录如下<br/><br/>![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)<br/><br/><br/><br/>### 2. 更改启动类位置<br/><br/>* 新建 config 包，将启动类放进去<br/><br/>![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)<br/><br/><br/><br/>* 为启动类添加注解<br/><br/>注解内的信息，是项目名称<br/><br/>```java<br/>@ComponentScan(\"weixindemo\")<br/>```<br/><br/>![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)<br/><br/><br/><br/>### 3. IDEA 数据库配置<br/><br/>* IDEA 连接数据库<br/><br/>![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)<br/><br/>![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)<br/><br/><br/><br/>* 添加 sql 脚本<br/><br/>新建 sql 文件夹，建立`all.sql`文件<br/><br/>![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)<br/><br/><br/><br/>我们在 sql 脚本中添加测试用数据，并执行<br/><br/>```sql<br/><br/># 测试表<br/>drop table if exists `test`;<br/>create table `test` (<br/>  `id` bigint not null comment 'id',<br/>  `name` varchar(50) comment '名称',<br/>  `password` varchar(50) comment '密码',<br/>  primary key (`id`)<br/>) engine=innodb default charset=utf8mb4 comment='测试';<br/><br/>insert into `test` (id, name, password) values (1, '测试', 'password');       <br/>```<br/><br/>可以看到，数据库已建立<br/><br/>![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)<br/><br/><br/><br/>### 4. 配置 MyBatis<br/><br/>* 在 `resource`文件夹下，新建 `mapper`文件夹<br/><br/>这是用来存放 MyBatis 的实现的<br/><br/>![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)<br/><br/><br/><br/>* 新建 pojo 包<br/><br/>pojo 包用来存放实体类<br/><br/>![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)<br/><br/><br/><br/>* 在项目下，新建 mapper 包，用来存放接口<br/><br/>![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)<br/><br/><br/><br/>* 将配置文件后缀改为`.yml`<br/><br/>我个人习惯使用`.yml`进行位置<br/><br/>![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)<br/><br/><br/><br/>* 添加 `Mybatis`配置<br/><br/>这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改<br/><br/>```yml<br/>spring:<br/>  datasource:<br/>    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&amp;characterEncoding=utf-8<br/>    username: weixindemo<br/>    password: weixindemo<br/>    driver-class-name: com.mysql.cj.jdbc.Driver<br/>    <br/>    <br/># 整合Mybatis<br/>mybatis:<br/>  # ** 表示在mapper下不管有多少文件夹，都可以全部识别<br/>  mapper-locations: classpath:/mapper/**/*.xml<br/>  type-aliases-package: weixindemo.pojo<br/>  #  打印sql相关的日志信息<br/>  configuration:<br/>    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<br/>```<br/><br/>![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)<br/><br/><br/><br/>* 添加端口配置<br/><br/>因为 vue 也是用的8080端口，我们不能和它重了<br/><br/>```yml<br/>server:<br/>  port: 8880<br/>```<br/><br/><br/><br/>* 启动类添加`mapper`接口扫描路径<br/><br/>```java<br/>@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描<br/>```<br/><br/>![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)<br/><br/><br/><br/>### 5. MVC 包建立<br/><br/>我们还要建立 ==service==，==util==，==controller==包<br/><br/>![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)<br/><br/>![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)<br/><br/><br/><br/>### 5. 测试 Mybatis 配置<br/><br/>配置到这一步，要对之前的配置，进行一个测试<br/><br/>* pojo 中，新建 Test 实体类<br/><br/>![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)<br/><br/>```java<br/>@Data<br/>@AllArgsConstructor<br/>@NoArgsConstructor<br/>public class Test {<br/>    private Integer id;<br/>    private String name;<br/>}<br/>```<br/><br/><br/><br/>* mapper 包中，新建 TestMapper 接口<br/><br/>![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)<br/><br/>```java<br/>@Repository<br/>@Mapper<br/>public interface TestMapper {<br/>    List&lt;Test&gt; getList();<br/>}<br/>```<br/><br/><br/><br/>* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现<br/><br/>  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)<br/><br/>具体内容，要根据实际项目修改<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;<br/>&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"<br/>    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;<br/><br/>&lt;!--namespace要和接口的位置和名字对应--&gt;<br/>&lt;mapper namespace=\"weixindemo.mapper.TestMapper\"&gt;<br/><br/>    &lt;select id=\"getList\" resultType=\"weixindemo.pojo.Test\"&gt;<br/>        select * from test<br/>    &lt;/select&gt;<br/><br/>&lt;/mapper&gt;<br/>```<br/><br/>![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)<br/><br/><br/><br/>* 在 service 包下，新建 TestService<br/><br/>![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)<br/><br/>别忘了加上 @Service 注解<br/><br/>```java<br/>@Service<br/>public class TestService {<br/><br/>    @Autowired<br/>    private TestMapper mapper;<br/><br/>    public List&lt;Test&gt; getList() {<br/>        return mapper.getList();<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 在 controller包下，新建 TestController<br/><br/>![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)<br/><br/>```java<br/>@RestController<br/>public class TestController {<br/><br/>    @Autowired<br/>    private TestService testService;<br/>    <br/><br/>    @RequestMapping(\"/test/list\")<br/>    public List&lt;Test&gt; list() {<br/>        return testService.getList();<br/>    }<br/><br/>}<br/>```<br/><br/><br/><br/>* 重启项目<br/><br/><br/><br/>* 新建 http 文件，编写 http 测试脚本，执行<br/><br/>![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)<br/><br/>```http<br/>GET http://localhost:8880/test/list<br/>Accept: application/json<br/><br/>###<br/>```<br/><br/><br/><br/>最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作<br/><br/>![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)<br/><br/><br/><br/>### 6. MyBatis 代码生成器<br/><br/>我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的<br/><br/><br/><br/>* 导入 Maven 依赖<br/><br/>注意，==是放在`plugiuns`下面的==<br/><br/>```xml<br/>&lt;!-- mybatis generator 自动生成代码插件 --&gt;<br/>            &lt;plugin&gt;<br/>                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br/>                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;<br/>                &lt;version&gt;1.4.0&lt;/version&gt;<br/>                &lt;configuration&gt;<br/>                    &lt;configurationFile&gt;src/main/resources/generator/generator-config.xml&lt;/configurationFile&gt;<br/>                    &lt;overwrite&gt;true&lt;/overwrite&gt;<br/>                    &lt;verbose&gt;true&lt;/verbose&gt;<br/>                &lt;/configuration&gt;<br/>                &lt;dependencies&gt;<br/>                    &lt;dependency&gt;<br/>                        &lt;groupId&gt;mysql&lt;/groupId&gt;<br/>                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br/>                        &lt;version&gt;8.0.22&lt;/version&gt;<br/>                    &lt;/dependency&gt;<br/>                &lt;/dependencies&gt;<br/>            &lt;/plugin&gt;<br/>```<br/><br/><br/><br/>* 建立代生成器位置<br/><br/>pom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml`<br/><br/>```xml<br/>&lt;configurationFile&gt;<br/>  src/main/resources/generator/generator-config.xml<br/>&lt;/configurationFile&gt;<br/>```<br/><br/>![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)<br/><br/><br/><br/>* 代码生成器代码<br/><br/>从`jdbcConnection`开始，别忘了==根据项目进行修改==<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br/>&lt;!DOCTYPE generatorConfiguration<br/>        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"<br/>        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;<br/><br/>&lt;generatorConfiguration&gt;<br/>    &lt;context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\"&gt;<br/><br/>        &lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;<br/>        &lt;property name=\"autoDelimitKeywords\" value=\"true\"/&gt;<br/>        &lt;property name=\"beginningDelimiter\" value=\"`\"/&gt;<br/>        &lt;property name=\"endingDelimiter\" value=\"`\"/&gt;<br/><br/>        &lt;!--覆盖生成XML文件--&gt;<br/>        &lt;plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" /&gt;<br/>        &lt;!-- 生成的实体类添加toString()方法 --&gt;<br/>        &lt;plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/&gt;<br/><br/>        &lt;!-- 不生成注释 --&gt;<br/>        &lt;commentGenerator&gt;<br/>            &lt;property name=\"suppressAllComments\" value=\"true\"/&gt;<br/>        &lt;/commentGenerator&gt;<br/><br/>        &lt;jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"<br/>                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"<br/>                        userId=\"wiki\"<br/>                        password=\"123456\"&gt;<br/>        &lt;/jdbcConnection&gt;<br/><br/>        &lt;!-- domain类的位置 --&gt;<br/>        &lt;javaModelGenerator targetProject=\"src/main/java\"<br/>                            targetPackage=\"top.faroz.pojo\"/&gt;<br/><br/>        &lt;!-- mapper xml的位置 --&gt;<br/>        &lt;sqlMapGenerator targetProject=\"src/main/resources\"<br/>                         targetPackage=\"mapper\"/&gt;<br/><br/>        &lt;!-- mapper类的位置 --&gt;<br/>        &lt;javaClientGenerator targetProject=\"src/main/java\"<br/>                             targetPackage=\"top.faroz.mapper\"<br/>                             type=\"XMLMAPPER\"/&gt;<br/><br/>        &lt;table tableName=\"demo\" domainObjectName=\"Demo\"/&gt;<br/>        &lt;!--&lt;table tableName=\"ebook\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"category\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"doc\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"content\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"user\"/&gt;--&gt;<br/>        &lt;!--&lt;table tableName=\"ebook_snapshot\"/&gt;--&gt;<br/>    &lt;/context&gt;<br/>&lt;/generatorConfiguration&gt;<br/>```<br/><br/><br/><br/>* 新建一个maven启动项<br/><br/>![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)<br/><br/>![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)<br/><br/>```bash<br/>mybatis-generator:generate -e<br/>```<br/><br/>![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)<br/><br/><br/><br/>### 7. 测试代码生成器<br/><br/>代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表<br/><br/><br/><br/>* all.sql 添加 demo 表的增加 SQL 语句，并执行<br/><br/>```sql<br/># demo列表<br/>drop table if exists `demo`;<br/>create table `demo` (<br/>    `id` bigint not null comment 'id',<br/>    `name` varchar(50) comment '名称',<br/>    primary key (`id`)<br/>) engine=innodb default charset =utf8mb4 comment '测试';<br/><br/>insert into `demo` (id,name) values(2,'测试2');<br/>```<br/><br/><br/><br/>* 在代码生成器最后的部分，填上要生成的表名<br/><br/>![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)<br/><br/><br/><br/>* 执行<br/><br/>![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)<br/><br/><br/><br/>* 执行成功，会生成 4 个新文件<br/><br/>![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)<br/><br/><br/><br/>* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码<br/><br/>```java<br/>@RestController<br/>public class DemoController {<br/><br/>    @Autowired<br/>    private DemoService demoService;<br/><br/>    @RequestMapping(\"/demo/list\")<br/>    public List&lt;Demo&gt; list() {<br/>        return demoService.getList();<br/>    }<br/>}<br/>```<br/><br/>```java<br/>@Service<br/>public class DemoService {<br/><br/>    @Resource<br/>    private DemoMapper demoMapper;<br/><br/>    public List&lt;Demo&gt; getList() {<br/>        List&lt;Demo&gt; list = demoMapper.selectByExample(null);<br/>        return list;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 添加 demo 的 http 测试脚本<br/><br/>```http<br/>GET http://localhost:8880/demo/list<br/>Accept: application/json<br/><br/>###<br/>```<br/><br/>测试成功，说明我们用代码生成器生成的代码没有问题<br/><br/>![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)<br/><br/><br/><br/>### 8. 解决前后端跨域问题<br/><br/>虽然现在还没有构建前端项目，但是后面，会出现跨域问题<br/><br/><br/><br/>* 新建 CorsConfig 类<br/><br/>![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)<br/><br/><br/><br/>* 代码如下<br/><br/>不用改动，直接用，别忘了加上==@Configuration==注解<br/><br/>```java<br/>@Configuration<br/>public class CorsConfig implements WebMvcConfigurer {<br/><br/>    @Override<br/>    public void addCorsMappings(CorsRegistry registry) {<br/>        registry.addMapping(\"/**\")<br/>                .allowedOriginPatterns(\"*\")<br/>                .allowedHeaders(CorsConfiguration.ALL)<br/>                .allowedMethods(CorsConfiguration.ALL)<br/>                .allowCredentials(true)<br/>                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 9. 添加雪花算法工具类<br/><br/>雪花算法，用来生成唯一 ID<br/><br/><br/><br/>* 新建 SnowFlake 工具类<br/><br/>![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)<br/><br/><br/><br/>* 代码如下<br/><br/>别忘了加上 @Component 注解<br/><br/>```java<br/>@Component<br/>public class SnowFlake {<br/>    /**<br/>     * 起始的时间戳<br/>     */<br/>    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00<br/><br/>    /**<br/>     * 每一部分占用的位数<br/>     */<br/>    private final static long SEQUENCE_BIT = 12; //序列号占用的位数<br/>    private final static long MACHINE_BIT = 5;   //机器标识占用的位数<br/>    private final static long DATACENTER_BIT = 5;//数据中心占用的位数<br/><br/>    /**<br/>     * 每一部分的最大值<br/>     */<br/>    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L &lt;&lt; DATACENTER_BIT);<br/>    private final static long MAX_MACHINE_NUM = -1L ^ (-1L &lt;&lt; MACHINE_BIT);<br/>    private final static long MAX_SEQUENCE = -1L ^ (-1L &lt;&lt; SEQUENCE_BIT);<br/><br/>    /**<br/>     * 每一部分向左的位移<br/>     */<br/>    private final static long MACHINE_LEFT = SEQUENCE_BIT;<br/>    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;<br/>    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;<br/><br/>    private long datacenterId = 1;  //数据中心<br/>    private long machineId = 1;     //机器标识<br/>    private long sequence = 0L; //序列号<br/>    private long lastStmp = -1L;//上一次时间戳<br/><br/>    public SnowFlake() {<br/>    }<br/><br/>    public SnowFlake(long datacenterId, long machineId) {<br/>        if (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; 0) {<br/>            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");<br/>        }<br/>        if (machineId &gt; MAX_MACHINE_NUM || machineId &lt; 0) {<br/>            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");<br/>        }<br/>        this.datacenterId = datacenterId;<br/>        this.machineId = machineId;<br/>    }<br/><br/>    /**<br/>     * 产生下一个ID<br/>     *<br/>     * @return<br/>     */<br/>    public synchronized long nextId() {<br/>        long currStmp = getNewstmp();<br/>        if (currStmp &lt; lastStmp) {<br/>            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");<br/>        }<br/><br/>        if (currStmp == lastStmp) {<br/>            //相同毫秒内，序列号自增<br/>            sequence = (sequence + 1) &amp; MAX_SEQUENCE;<br/>            //同一毫秒的序列数已经达到最大<br/>            if (sequence == 0L) {<br/>                currStmp = getNextMill();<br/>            }<br/>        } else {<br/>            //不同毫秒内，序列号置为0<br/>            sequence = 0L;<br/>        }<br/><br/>        lastStmp = currStmp;<br/><br/>        return (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT //时间戳部分<br/>                | datacenterId &lt;&lt; DATACENTER_LEFT       //数据中心部分<br/>                | machineId &lt;&lt; MACHINE_LEFT             //机器标识部分<br/>                | sequence;                             //序列号部分<br/>    }<br/><br/>    private long getNextMill() {<br/>        long mill = getNewstmp();<br/>        while (mill &lt;= lastStmp) {<br/>            mill = getNewstmp();<br/>        }<br/>        return mill;<br/>    }<br/><br/>    private long getNewstmp() {<br/>        return System.currentTimeMillis();<br/>    }<br/><br/>    // public static void main(String[] args) throws ParseException {<br/>    //     // 时间戳<br/>    //     // System.out.println(System.currentTimeMillis());<br/>    //     // System.out.println(new Date().getTime());<br/>    //     //<br/>    //     // String dateTime = \"2021-01-01 08:00:00\";<br/>    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");<br/>    //     // System.out.println(sdf.parse(dateTime).getTime());<br/>    //<br/>    //     SnowFlake snowFlake = new SnowFlake(1, 1);<br/>    //<br/>    //     long start = System.currentTimeMillis();<br/>    //     for (int i = 0; i &lt; 10; i++) {<br/>    //         System.out.println(snowFlake.nextId());<br/>    //         System.out.println(System.currentTimeMillis() - start);<br/>    //     }<br/>    // }<br/><br/>}<br/>```<br/><br/><br/><br/><br/><br/>### 10. 添加 AOP<br/><br/>AOP 用来打印接口日志，方便后期调试<br/><br/><br/><br/>* Maven 中引入 fastjson，因为 我们的类中要用<br/><br/>```xml<br/> &lt;!--fastjson--&gt;<br/>&lt;dependency&gt;<br/>  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br/>  &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br/>  &lt;version&gt;1.2.70&lt;/version&gt;<br/>&lt;/dependency&gt;<br/>```<br/><br/><br/><br/>* Maven 引入 AOP<br/><br/>```xml<br/>&lt;!--导入aop--&gt;<br/>&lt;dependency&gt;<br/>  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br/>  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;<br/>&lt;/dependency&gt;<br/>```<br/><br/><br/><br/>* 添加 RequestContext 工具类<br/><br/>这个是后期为了打印 WebSocket 日志的<br/><br/>![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)<br/><br/>```java<br/>public class RequestContext implements Serializable {<br/>    private static ThreadLocal&lt;String&gt; remoteAddr = new ThreadLocal&lt;&gt;();<br/><br/>    public static String getRemoteAddr() {<br/>        return remoteAddr.get();<br/>    }<br/><br/>    public static void setRemoteAddr(String remoteAddr) {<br/>        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* 新建 aspect 包，并新建 LogAspect 类<br/><br/>![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)<br/><br/><br/><br/>**LogAspect 代码如下:**<br/><br/>切点的代码，我们要依据项目修改<br/><br/>![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)<br/><br/>```java<br/>@Aspect<br/>@Component<br/>public class LogAspect {<br/>    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);<br/><br/>    @Resource<br/>    private SnowFlake snowFlake;<br/><br/>    /** 定义一个切点 */<br/>    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")<br/>    public void controllerPointcut() {}<br/><br/>    // @Resource<br/>    // private SnowFlake snowFlake;<br/><br/>    @Before(\"controllerPointcut()\")<br/>    public void doBefore(JoinPoint joinPoint) throws Throwable {<br/><br/>        // 增加日志流水号<br/>        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));<br/><br/>        // 开始打印请求日志<br/>        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br/>        HttpServletRequest request = attributes.getRequest();<br/>        Signature signature = joinPoint.getSignature();<br/>        String name = signature.getName();<br/><br/>        // 打印请求信息<br/>        LOG.info(\"------------- 开始 -------------\");<br/>        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());<br/>        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);<br/>        LOG.info(\"远程地址: {}\", request.getRemoteAddr());<br/><br/>        RequestContext.setRemoteAddr(getRemoteIp(request));<br/><br/>        // 拿到所有的参数<br/>        Object[] args = joinPoint.getArgs();<br/>        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));<br/><br/>        Object[] arguments  = new Object[args.length];<br/>        for (int i = 0; i &lt; args.length; i++) {<br/>            if (args[i] instanceof ServletRequest<br/>                    || args[i] instanceof ServletResponse<br/>                    || args[i] instanceof MultipartFile) {<br/>                continue;<br/>            }<br/>            arguments[i] = args[i];<br/>        }<br/>        // 排除字段，敏感字段或太长的字段不显示<br/>        String[] excludeProperties = {\"password\", \"file\"};<br/>        PropertyPreFilters filters = new PropertyPreFilters();<br/>        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();<br/>        excludefilter.addExcludes(excludeProperties);<br/>        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));<br/>    }<br/><br/>    @Around(\"controllerPointcut()\")<br/>    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {<br/>        long startTime = System.currentTimeMillis();<br/>        Object result = proceedingJoinPoint.proceed();<br/>        // 排除字段，敏感字段或太长的字段不显示<br/>        String[] excludeProperties = {\"password\", \"file\"};<br/>        PropertyPreFilters filters = new PropertyPreFilters();<br/>        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();<br/>        excludefilter.addExcludes(excludeProperties);<br/>        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));<br/>        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);<br/>        return result;<br/>    }<br/><br/>    /**<br/>     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP<br/>     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突<br/>     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径<br/>     * @param request<br/>     * @return<br/>     */<br/>    public String getRemoteIp(HttpServletRequest request) {<br/>        String ip = request.getHeader(\"x-forwarded-for\");<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getHeader(\"Proxy-Client-IP\");<br/>        }<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getHeader(\"WL-Proxy-Client-IP\");<br/>        }<br/>        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {<br/>            ip = request.getRemoteAddr();<br/>        }<br/>        return ip;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 11. 解决前后端 Long 精度丢失问题<br/><br/>我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失<br/><br/><br/><br/>* 配置文件新增 JacksonConfig 类<br/><br/>![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)<br/><br/><br/><br/>* 代码如下<br/><br/>```java<br/>@Configuration<br/>public class JacksonConfig {<br/><br/>    @Bean<br/>    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {<br/>        ObjectMapper objectMapper = builder.createXmlMapper(false).build();<br/>        SimpleModule simpleModule = new SimpleModule();<br/>        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br/>        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br/>        objectMapper.registerModule(simpleModule);<br/>        return objectMapper;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 12. 新建 req resp 包<br/><br/>我们要将请求与返回包装<br/><br/>![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)<br/><br/><br/><br/>### 13. CommonResp<br/><br/>为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp<br/><br/>![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)<br/><br/>**代码如下：**<br/><br/>```java<br/>@Data<br/>@AllArgsConstructor<br/>@NoArgsConstructor<br/>public class CommonResp&lt;T&gt; {<br/>    /**<br/>     * 返回是否成功<br/>     */<br/>    private boolean isSuccess=true;<br/><br/>    /**<br/>     * 返回失败时，返回的错误信息<br/>     */<br/>    private String message;<br/><br/>    /**<br/>     * 返回成功的时候，返回的内容<br/>     */<br/>    private T content;<br/>}<br/>```<br/><br/><br/><br/>### 14. 自定义异常<br/><br/>* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`<br/><br/>![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)<br/><br/><br/><br/>* `BusinessException`代码<br/><br/>```java<br/>public class BusinessException extends RuntimeException{<br/>    private BusinessExceptionCode code;<br/><br/>    public BusinessException (BusinessExceptionCode code) {<br/>        /**<br/>         * 父类有个成员变量  private String desc<br/>         * 需要为这个成员变量赋值<br/>         */<br/>        super(code.getDesc());<br/>        this.code = code;<br/>    }<br/><br/>    public BusinessExceptionCode getCode() {<br/>        return code;<br/>    }<br/><br/>    public void setCode(BusinessExceptionCode code) {<br/>        this.code = code;<br/>    }<br/><br/>    /**<br/>     * 不写入堆栈信息，提高性能<br/>     */<br/>    @Override<br/>    public Throwable fillInStackTrace() {<br/>        return this;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>* `BusinessExceptionCode`代码<br/><br/>```java<br/>public enum BusinessExceptionCode {<br/>    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),<br/>    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),<br/>    VOTE_REPEAT(\"您已点赞过\"),<br/>    ;<br/><br/>    private String desc;<br/><br/>    BusinessExceptionCode(String desc) {<br/>        this.desc = desc;<br/>    }<br/><br/>    public String getDesc() {<br/>        return desc;<br/>    }<br/><br/>    public void setDesc(String desc) {<br/>        this.desc = desc;<br/>    }<br/>}<br/>```<br/><br/><br/><br/><br/><br/>### 13. 统一异常处理<br/><br/>我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp<br/><br/><br/><br/>* 新建 ControllerExceptionHandler 类<br/><br/>![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)<br/><br/><br/><br/>* 代码如下<br/><br/>logger 要根据项目改一下<br/><br/>```java<br/>/**<br/> * 统一异常处理、数据预处理等<br/> * 该类用于捕获系统弹出的异常<br/> * 将异常包装成一个 CommonResp<br/> * 从而方便前端调用，显示错误信息<br/> */<br/>@ControllerAdvice<br/>public class ControllerExceptionHandler {<br/>    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = BindException.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(BindException e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());<br/>        return commonResp;<br/>    }<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = BusinessException.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(BusinessException e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(e.getCode().getDesc());<br/>        return commonResp;<br/>    }<br/><br/>    /**<br/>     * 校验异常统一处理<br/>     * @param e<br/>     * @return<br/>     */<br/>    @ExceptionHandler(value = Exception.class)<br/>    @ResponseBody<br/>    public CommonResp validExceptionHandler(Exception e) {<br/>        CommonResp commonResp = new CommonResp();<br/>        LOG.error(\"系统异常：\", e);<br/>        commonResp.setSuccess(false);<br/>        commonResp.setMessage(\"系统出现异常，请联系管理员\");<br/>        return commonResp;<br/>    }<br/>}<br/>```<br/><br/><br/><br/>### 14. 添加日志记录 logback<br/><br/>* 在 resource 下，新建logback-spring.xml 文件<br/><br/>![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)<br/><br/>* 写入内容<br/><br/>```xml<br/>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br/>&lt;configuration&gt;<br/>    &lt;!-- 修改一下路径--&gt;<br/>    &lt;property name=\"PATH\" value=\"./log\"&gt;&lt;/property&gt;<br/><br/>    &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;<br/>        &lt;encoder&gt;<br/>            &lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n&lt;/Pattern&gt;<br/>            &lt;!--&lt;Pattern&gt;%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n&lt;/Pattern&gt;--&gt;<br/>        &lt;/encoder&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br/>        &lt;file&gt;${PATH}/trace.log&lt;/file&gt;<br/>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br/>            &lt;FileNamePattern&gt;${PATH}/trace.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;<br/>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br/>                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;<br/>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br/>        &lt;/rollingPolicy&gt;<br/>        &lt;layout&gt;<br/>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;<br/>        &lt;/layout&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;<br/>        &lt;file&gt;${PATH}/error.log&lt;/file&gt;<br/>        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;<br/>            &lt;FileNamePattern&gt;${PATH}/error.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;<br/>            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;<br/>                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;<br/>            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;<br/>        &lt;/rollingPolicy&gt;<br/>        &lt;layout&gt;<br/>            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;<br/>        &lt;/layout&gt;<br/>        &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;<br/>            &lt;level&gt;ERROR&lt;/level&gt;<br/>            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;<br/>            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;<br/>        &lt;/filter&gt;<br/>    &lt;/appender&gt;<br/><br/>    &lt;root level=\"ERROR\"&gt;<br/>        &lt;appender-ref ref=\"ERROR_FILE\" /&gt;<br/>    &lt;/root&gt;<br/><br/>    &lt;root level=\"TRACE\"&gt;<br/>        &lt;appender-ref ref=\"TRACE_FILE\" /&gt;<br/>    &lt;/root&gt;<br/><br/>    &lt;root level=\"INFO\"&gt;<br/>        &lt;appender-ref ref=\"STDOUT\" /&gt;<br/>    &lt;/root&gt;<br/>&lt;/configuration&gt;<br/><br/>```<br/><br/><br/><br/>### 15. 自定义 banner<br/><br/>resources 下新建 banner.txt<br/><br/>![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)<br/><br/><br/><br/>里面放上自定义 banner<br/><br/>```txt<br/> ********     **     *******     *******         ********<br/>/**/////     ****   /**////**   **/////**       //////** <br/>/**         **//**  /**   /**  **     //**           **  <br/>/*******   **  //** /*******  /**      /**          **   <br/>/**////   **********/**///**  /**      /**         **    <br/>/**      /**//////**/**  //** //**     **         **     <br/>/**      /**     /**/**   //** //*******   ***** ********<br/>//       //      // //     //   ///////   ///// //////// <br/>```<br/><br/><br/><br/><br/></p>","success":true}
2021-04-16 00:59:19.260 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：22 ms -------------
2021-04-16 00:59:31.174 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:59:31.175 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/save POST
2021-04-16 00:59:31.176 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.save
2021-04-16 00:59:31.176 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:59:31.178 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"content":"# 完整项目搭建流程虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。这次将创建的整个流程记录下来，方便以后的项目搭建。要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了## 数据库一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限### 1. **连接 admin**只有 admin 有所有权限我的数据库 admin 的账户名和密码是：**账户：**admin**密码：**123![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)### 2. **新建数据库**其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)### 3. **为这个数据库，专门建一个用户**开发环境中，就将密码和用户名设置成一样的，这样不会忘记host 设置为 localhost![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)### 4. **为这个用户，授予对应数据库的全部权限**![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)### 5. **对当前用户，建立连接**![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)## 后端关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。### 1. 新建 SpringBoot 项目* 点击 `SpringInitiallizr`，新建项目![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)* 选择默认依赖的包![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)* 选择存放路径![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)* 新建完成后，项目目录如下![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)### 2. 更改启动类位置* 新建 config 包，将启动类放进去![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)* 为启动类添加注解注解内的信息，是项目名称```java@ComponentScan(\"weixindemo\")```![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)### 3. IDEA 数据库配置* IDEA 连接数据库![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)* 添加 sql 脚本新建 sql 文件夹，建立`all.sql`文件![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)我们在 sql 脚本中添加测试用数据，并执行```sql# 测试表drop table if exists `test`;create table `test` (  `id` bigint not null comment 'id',  `name` varchar(50) comment '名称',  `password` varchar(50) comment '密码',  primary key (`id`)) engine=innodb default charset=utf8mb4 comment='测试';insert into `test` (id, name, password) values (1, '测试', 'password');       ```可以看到，数据库已建立![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)### 4. 配置 MyBatis* 在 `resource`文件夹下，新建 `mapper`文件夹这是用来存放 MyBatis 的实现的![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)* 新建 pojo 包pojo 包用来存放实体类![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)* 在项目下，新建 mapper 包，用来存放接口![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)* 将配置文件后缀改为`.yml`我个人习惯使用`.yml`进行位置![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)* 添加 `Mybatis`配置这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改```ymlspring:  datasource:    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&amp;characterEncoding=utf-8    username: weixindemo    password: weixindemo    driver-class-name: com.mysql.cj.jdbc.Driver        # 整合Mybatismybatis:  # ** 表示在mapper下不管有多少文件夹，都可以全部识别  mapper-locations: classpath:/mapper/**/*.xml  type-aliases-package: weixindemo.pojo  #  打印sql相关的日志信息  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl```![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)* 添加端口配置因为 vue 也是用的8080端口，我们不能和它重了```ymlserver:  port: 8880```* 启动类添加`mapper`接口扫描路径```java@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描```![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)### 5. MVC 包建立我们还要建立 ==service==，==util==，==controller==包![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)### 5. 测试 Mybatis 配置配置到这一步，要对之前的配置，进行一个测试* pojo 中，新建 Test 实体类![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)```java@Data@AllArgsConstructor@NoArgsConstructorpublic class Test {    private Integer id;    private String name;}```* mapper 包中，新建 TestMapper 接口![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)```java@Repository@Mapperpublic interface TestMapper {    List&lt;Test&gt; getList();}```* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)具体内容，要根据实际项目修改```xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;!--namespace要和接口的位置和名字对应--&gt;&lt;mapper namespace=\"weixindemo.mapper.TestMapper\"&gt;    &lt;select id=\"getList\" resultType=\"weixindemo.pojo.Test\"&gt;        select * from test    &lt;/select&gt;&lt;/mapper&gt;```![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)* 在 service 包下，新建 TestService![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)别忘了加上 @Service 注解```java@Servicepublic class TestService {    @Autowired    private TestMapper mapper;    public List&lt;Test&gt; getList() {        return mapper.getList();    }}```* 在 controller包下，新建 TestController![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)```java@RestControllerpublic class TestController {    @Autowired    private TestService testService;        @RequestMapping(\"/test/list\")    public List&lt;Test&gt; list() {        return testService.getList();    }}```* 重启项目* 新建 http 文件，编写 http 测试脚本，执行![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)```httpGET http://localhost:8880/test/listAccept: application/json###```最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)### 6. MyBatis 代码生成器我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的* 导入 Maven 依赖注意，==是放在`plugiuns`下面的==```xml&lt;!-- mybatis generator 自动生成代码插件 --&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;1.4.0&lt;/version&gt;                &lt;configuration&gt;                    &lt;configurationFile&gt;src/main/resources/generator/generator-config.xml&lt;/configurationFile&gt;                    &lt;overwrite&gt;true&lt;/overwrite&gt;                    &lt;verbose&gt;true&lt;/verbose&gt;                &lt;/configuration&gt;                &lt;dependencies&gt;                    &lt;dependency&gt;                        &lt;groupId&gt;mysql&lt;/groupId&gt;                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;                        &lt;version&gt;8.0.22&lt;/version&gt;                    &lt;/dependency&gt;                &lt;/dependencies&gt;            &lt;/plugin&gt;```* 建立代生成器位置pom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml````xml&lt;configurationFile&gt;  src/main/resources/generator/generator-config.xml&lt;/configurationFile&gt;```![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)* 代码生成器代码从`jdbcConnection`开始，别忘了==根据项目进行修改==```xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;&lt;generatorConfiguration&gt;    &lt;context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\"&gt;        &lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;        &lt;property name=\"autoDelimitKeywords\" value=\"true\"/&gt;        &lt;property name=\"beginningDelimiter\" value=\"`\"/&gt;        &lt;property name=\"endingDelimiter\" value=\"`\"/&gt;        &lt;!--覆盖生成XML文件--&gt;        &lt;plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" /&gt;        &lt;!-- 生成的实体类添加toString()方法 --&gt;        &lt;plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/&gt;        &lt;!-- 不生成注释 --&gt;        &lt;commentGenerator&gt;            &lt;property name=\"suppressAllComments\" value=\"true\"/&gt;        &lt;/commentGenerator&gt;        &lt;jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"                        userId=\"wiki\"                        password=\"123456\"&gt;        &lt;/jdbcConnection&gt;        &lt;!-- domain类的位置 --&gt;        &lt;javaModelGenerator targetProject=\"src/main/java\"                            targetPackage=\"top.faroz.pojo\"/&gt;        &lt;!-- mapper xml的位置 --&gt;        &lt;sqlMapGenerator targetProject=\"src/main/resources\"                         targetPackage=\"mapper\"/&gt;        &lt;!-- mapper类的位置 --&gt;        &lt;javaClientGenerator targetProject=\"src/main/java\"                             targetPackage=\"top.faroz.mapper\"                             type=\"XMLMAPPER\"/&gt;        &lt;table tableName=\"demo\" domainObjectName=\"Demo\"/&gt;        &lt;!--&lt;table tableName=\"ebook\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"category\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"doc\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"content\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"user\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"ebook_snapshot\"/&gt;--&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;```* 新建一个maven启动项![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)```bashmybatis-generator:generate -e```![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)### 7. 测试代码生成器代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表* all.sql 添加 demo 表的增加 SQL 语句，并执行```sql# demo列表drop table if exists `demo`;create table `demo` (    `id` bigint not null comment 'id',    `name` varchar(50) comment '名称',    primary key (`id`)) engine=innodb default charset =utf8mb4 comment '测试';insert into `demo` (id,name) values(2,'测试2');```* 在代码生成器最后的部分，填上要生成的表名![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)* 执行![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)* 执行成功，会生成 4 个新文件![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码```java@RestControllerpublic class DemoController {    @Autowired    private DemoService demoService;    @RequestMapping(\"/demo/list\")    public List&lt;Demo&gt; list() {        return demoService.getList();    }}``````java@Servicepublic class DemoService {    @Resource    private DemoMapper demoMapper;    public List&lt;Demo&gt; getList() {        List&lt;Demo&gt; list = demoMapper.selectByExample(null);        return list;    }}```* 添加 demo 的 http 测试脚本```httpGET http://localhost:8880/demo/listAccept: application/json###```测试成功，说明我们用代码生成器生成的代码没有问题![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)### 8. 解决前后端跨域问题虽然现在还没有构建前端项目，但是后面，会出现跨域问题* 新建 CorsConfig 类![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)* 代码如下不用改动，直接用，别忘了加上==@Configuration==注解```java@Configurationpublic class CorsConfig implements WebMvcConfigurer {    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping(\"/**\")                .allowedOriginPatterns(\"*\")                .allowedHeaders(CorsConfiguration.ALL)                .allowedMethods(CorsConfiguration.ALL)                .allowCredentials(true)                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）    }}```### 9. 添加雪花算法工具类雪花算法，用来生成唯一 ID* 新建 SnowFlake 工具类![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)* 代码如下别忘了加上 @Component 注解```java@Componentpublic class SnowFlake {    /**     * 起始的时间戳     */    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00    /**     * 每一部分占用的位数     */    private final static long SEQUENCE_BIT = 12; //序列号占用的位数    private final static long MACHINE_BIT = 5;   //机器标识占用的位数    private final static long DATACENTER_BIT = 5;//数据中心占用的位数    /**     * 每一部分的最大值     */    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L &lt;&lt; DATACENTER_BIT);    private final static long MAX_MACHINE_NUM = -1L ^ (-1L &lt;&lt; MACHINE_BIT);    private final static long MAX_SEQUENCE = -1L ^ (-1L &lt;&lt; SEQUENCE_BIT);    /**     * 每一部分向左的位移     */    private final static long MACHINE_LEFT = SEQUENCE_BIT;    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;    private long datacenterId = 1;  //数据中心    private long machineId = 1;     //机器标识    private long sequence = 0L; //序列号    private long lastStmp = -1L;//上一次时间戳    public SnowFlake() {    }    public SnowFlake(long datacenterId, long machineId) {        if (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; 0) {            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");        }        if (machineId &gt; MAX_MACHINE_NUM || machineId &lt; 0) {            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");        }        this.datacenterId = datacenterId;        this.machineId = machineId;    }    /**     * 产生下一个ID     *     * @return     */    public synchronized long nextId() {        long currStmp = getNewstmp();        if (currStmp &lt; lastStmp) {            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");        }        if (currStmp == lastStmp) {            //相同毫秒内，序列号自增            sequence = (sequence + 1) &amp; MAX_SEQUENCE;            //同一毫秒的序列数已经达到最大            if (sequence == 0L) {                currStmp = getNextMill();            }        } else {            //不同毫秒内，序列号置为0            sequence = 0L;        }        lastStmp = currStmp;        return (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT //时间戳部分                | datacenterId &lt;&lt; DATACENTER_LEFT       //数据中心部分                | machineId &lt;&lt; MACHINE_LEFT             //机器标识部分                | sequence;                             //序列号部分    }    private long getNextMill() {        long mill = getNewstmp();        while (mill &lt;= lastStmp) {            mill = getNewstmp();        }        return mill;    }    private long getNewstmp() {        return System.currentTimeMillis();    }    // public static void main(String[] args) throws ParseException {    //     // 时间戳    //     // System.out.println(System.currentTimeMillis());    //     // System.out.println(new Date().getTime());    //     //    //     // String dateTime = \"2021-01-01 08:00:00\";    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");    //     // System.out.println(sdf.parse(dateTime).getTime());    //    //     SnowFlake snowFlake = new SnowFlake(1, 1);    //    //     long start = System.currentTimeMillis();    //     for (int i = 0; i &lt; 10; i++) {    //         System.out.println(snowFlake.nextId());    //         System.out.println(System.currentTimeMillis() - start);    //     }    // }}```### 10. 添加 AOPAOP 用来打印接口日志，方便后期调试* Maven 中引入 fastjson，因为 我们的类中要用```xml &lt;!--fastjson--&gt;&lt;dependency&gt;  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  &lt;version&gt;1.2.70&lt;/version&gt;&lt;/dependency&gt;```* Maven 引入 AOP```xml&lt;!--导入aop--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;&lt;/dependency&gt;```* 添加 RequestContext 工具类这个是后期为了打印 WebSocket 日志的![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)```javapublic class RequestContext implements Serializable {    private static ThreadLocal&lt;String&gt; remoteAddr = new ThreadLocal&lt;&gt;();    public static String getRemoteAddr() {        return remoteAddr.get();    }    public static void setRemoteAddr(String remoteAddr) {        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);    }}```* 新建 aspect 包，并新建 LogAspect 类![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)**LogAspect 代码如下:**切点的代码，我们要依据项目修改![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)```java@Aspect@Componentpublic class LogAspect {    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);    @Resource    private SnowFlake snowFlake;    /** 定义一个切点 */    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")    public void controllerPointcut() {}    // @Resource    // private SnowFlake snowFlake;    @Before(\"controllerPointcut()\")    public void doBefore(JoinPoint joinPoint) throws Throwable {        // 增加日志流水号        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));        // 开始打印请求日志        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        HttpServletRequest request = attributes.getRequest();        Signature signature = joinPoint.getSignature();        String name = signature.getName();        // 打印请求信息        LOG.info(\"------------- 开始 -------------\");        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);        LOG.info(\"远程地址: {}\", request.getRemoteAddr());        RequestContext.setRemoteAddr(getRemoteIp(request));        // 拿到所有的参数        Object[] args = joinPoint.getArgs();        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));        Object[] arguments  = new Object[args.length];        for (int i = 0; i &lt; args.length; i++) {            if (args[i] instanceof ServletRequest                    || args[i] instanceof ServletResponse                    || args[i] instanceof MultipartFile) {                continue;            }            arguments[i] = args[i];        }        // 排除字段，敏感字段或太长的字段不显示        String[] excludeProperties = {\"password\", \"file\"};        PropertyPreFilters filters = new PropertyPreFilters();        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();        excludefilter.addExcludes(excludeProperties);        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));    }    @Around(\"controllerPointcut()\")    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {        long startTime = System.currentTimeMillis();        Object result = proceedingJoinPoint.proceed();        // 排除字段，敏感字段或太长的字段不显示        String[] excludeProperties = {\"password\", \"file\"};        PropertyPreFilters filters = new PropertyPreFilters();        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();        excludefilter.addExcludes(excludeProperties);        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);        return result;    }    /**     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径     * @param request     * @return     */    public String getRemoteIp(HttpServletRequest request) {        String ip = request.getHeader(\"x-forwarded-for\");        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {            ip = request.getHeader(\"Proxy-Client-IP\");        }        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {            ip = request.getHeader(\"WL-Proxy-Client-IP\");        }        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {            ip = request.getRemoteAddr();        }        return ip;    }}```### 11. 解决前后端 Long 精度丢失问题我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失* 配置文件新增 JacksonConfig 类![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)* 代码如下```java@Configurationpublic class JacksonConfig {    @Bean    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {        ObjectMapper objectMapper = builder.createXmlMapper(false).build();        SimpleModule simpleModule = new SimpleModule();        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);        objectMapper.registerModule(simpleModule);        return objectMapper;    }}```### 12. 新建 req resp 包我们要将请求与返回包装![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)### 13. CommonResp为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)**代码如下：**```java@Data@AllArgsConstructor@NoArgsConstructorpublic class CommonResp&lt;T&gt; {    /**     * 返回是否成功     */    private boolean isSuccess=true;    /**     * 返回失败时，返回的错误信息     */    private String message;    /**     * 返回成功的时候，返回的内容     */    private T content;}```### 14. 自定义异常* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)* `BusinessException`代码```javapublic class BusinessException extends RuntimeException{    private BusinessExceptionCode code;    public BusinessException (BusinessExceptionCode code) {        /**         * 父类有个成员变量  private String desc         * 需要为这个成员变量赋值         */        super(code.getDesc());        this.code = code;    }    public BusinessExceptionCode getCode() {        return code;    }    public void setCode(BusinessExceptionCode code) {        this.code = code;    }    /**     * 不写入堆栈信息，提高性能     */    @Override    public Throwable fillInStackTrace() {        return this;    }}```* `BusinessExceptionCode`代码```javapublic enum BusinessExceptionCode {    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),    VOTE_REPEAT(\"您已点赞过\"),    ;    private String desc;    BusinessExceptionCode(String desc) {        this.desc = desc;    }    public String getDesc() {        return desc;    }    public void setDesc(String desc) {        this.desc = desc;    }}```### 13. 统一异常处理我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp* 新建 ControllerExceptionHandler 类![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)* 代码如下logger 要根据项目改一下```java/** * 统一异常处理、数据预处理等 * 该类用于捕获系统弹出的异常 * 将异常包装成一个 CommonResp * 从而方便前端调用，显示错误信息 */@ControllerAdvicepublic class ControllerExceptionHandler {    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);    /**     * 校验异常统一处理     * @param e     * @return     */    @ExceptionHandler(value = BindException.class)    @ResponseBody    public CommonResp validExceptionHandler(BindException e) {        CommonResp commonResp = new CommonResp();        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());        commonResp.setSuccess(false);        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());        return commonResp;    }    /**     * 校验异常统一处理     * @param e     * @return     */    @ExceptionHandler(value = BusinessException.class)    @ResponseBody    public CommonResp validExceptionHandler(BusinessException e) {        CommonResp commonResp = new CommonResp();        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());        commonResp.setSuccess(false);        commonResp.setMessage(e.getCode().getDesc());        return commonResp;    }    /**     * 校验异常统一处理     * @param e     * @return     */    @ExceptionHandler(value = Exception.class)    @ResponseBody    public CommonResp validExceptionHandler(Exception e) {        CommonResp commonResp = new CommonResp();        LOG.error(\"系统异常：\", e);        commonResp.setSuccess(false);        commonResp.setMessage(\"系统出现异常，请联系管理员\");        return commonResp;    }}```### 14. 添加日志记录 logback* 在 resource 下，新建logback-spring.xml 文件![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)* 写入内容```xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration&gt;    &lt;!-- 修改一下路径--&gt;    &lt;property name=\"PATH\" value=\"./log\"&gt;&lt;/property&gt;    &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;        &lt;encoder&gt;            &lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n&lt;/Pattern&gt;            &lt;!--&lt;Pattern&gt;%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n&lt;/Pattern&gt;--&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;        &lt;file&gt;${PATH}/trace.log&lt;/file&gt;        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;            &lt;FileNamePattern&gt;${PATH}/trace.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;layout&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;        &lt;/layout&gt;    &lt;/appender&gt;    &lt;appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;        &lt;file&gt;${PATH}/error.log&lt;/file&gt;        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;            &lt;FileNamePattern&gt;${PATH}/error.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;layout&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;        &lt;/layout&gt;        &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;            &lt;level&gt;ERROR&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;    &lt;/appender&gt;    &lt;root level=\"ERROR\"&gt;        &lt;appender-ref ref=\"ERROR_FILE\" /&gt;    &lt;/root&gt;    &lt;root level=\"TRACE\"&gt;        &lt;appender-ref ref=\"TRACE_FILE\" /&gt;    &lt;/root&gt;    &lt;root level=\"INFO\"&gt;        &lt;appender-ref ref=\"STDOUT\" /&gt;    &lt;/root&gt;&lt;/configuration&gt;```### 15. 自定义 bannerresources 下新建 banner.txt![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)里面放上自定义 banner```txt ********     **     *******     *******         ********/**/////     ****   /**////**   **/////**       //////** /**         **//**  /**   /**  **     //**           **  /*******   **  //** /*******  /**      /**          **   /**////   **********/**///**  /**      /**         **    /**      /**//////**/**  //** //**     **         **     /**      /**     /**/**   //** //*******   ***** ********//       //      // //     //   ///////   ///// //////// ```","description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0}]
2021-04-16 00:59:31.208 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"id":1},"success":true}
2021-04-16 00:59:31.209 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：35 ms -------------
2021-04-16 00:59:36.071 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:59:36.071 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:59:36.072 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:59:36.072 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:59:36.072 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:59:36.077 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:59:36.077 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:59:37.101 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:59:37.102 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 00:59:37.102 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:59:37.102 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 00:59:37.102 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 00:59:37.102 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 00:59:37.102 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:59:37.102 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:59:37.102 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:59:37.103 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 00:59:37.104 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 00:59:37.105 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 00:59:37.108 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。这次将创建的整个流程记录下来，方便以后的项目搭建。要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了## 数据库一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限### 1. **连接 admin**只有 admin 有所有权限我的数据库 admin 的账户名和密码是：**账户：**admin**密码：**123![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)### 2. **新建数据库**其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)### 3. **为这个数据库，专门建一个用户**开发环境中，就将密码和用户名设置成一样的，这样不会忘记host 设置为 localhost![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)### 4. **为这个用户，授予对应数据库的全部权限**![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)### 5. **对当前用户，建立连接**![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)## 后端关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。### 1. 新建 SpringBoot 项目* 点击 `SpringInitiallizr`，新建项目![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)* 选择默认依赖的包![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)* 选择存放路径![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)* 新建完成后，项目目录如下![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)### 2. 更改启动类位置* 新建 config 包，将启动类放进去![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)* 为启动类添加注解注解内的信息，是项目名称```java@ComponentScan(\"weixindemo\")```![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)### 3. IDEA 数据库配置* IDEA 连接数据库![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)* 添加 sql 脚本新建 sql 文件夹，建立`all.sql`文件![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)我们在 sql 脚本中添加测试用数据，并执行```sql# 测试表drop table if exists `test`;create table `test` (  `id` bigint not null comment 'id',  `name` varchar(50) comment '名称',  `password` varchar(50) comment '密码',  primary key (`id`)) engine=innodb default charset=utf8mb4 comment='测试';insert into `test` (id, name, password) values (1, '测试', 'password');       ```可以看到，数据库已建立![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)### 4. 配置 MyBatis* 在 `resource`文件夹下，新建 `mapper`文件夹这是用来存放 MyBatis 的实现的![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)* 新建 pojo 包pojo 包用来存放实体类![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)* 在项目下，新建 mapper 包，用来存放接口![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)* 将配置文件后缀改为`.yml`我个人习惯使用`.yml`进行位置![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)* 添加 `Mybatis`配置这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改```ymlspring:  datasource:    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&amp;characterEncoding=utf-8    username: weixindemo    password: weixindemo    driver-class-name: com.mysql.cj.jdbc.Driver        # 整合Mybatismybatis:  # ** 表示在mapper下不管有多少文件夹，都可以全部识别  mapper-locations: classpath:/mapper/**/*.xml  type-aliases-package: weixindemo.pojo  #  打印sql相关的日志信息  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl```![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)* 添加端口配置因为 vue 也是用的8080端口，我们不能和它重了```ymlserver:  port: 8880```* 启动类添加`mapper`接口扫描路径```java@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描```![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)### 5. MVC 包建立我们还要建立 ==service==，==util==，==controller==包![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)### 5. 测试 Mybatis 配置配置到这一步，要对之前的配置，进行一个测试* pojo 中，新建 Test 实体类![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)```java@Data@AllArgsConstructor@NoArgsConstructorpublic class Test {    private Integer id;    private String name;}```* mapper 包中，新建 TestMapper 接口![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)```java@Repository@Mapperpublic interface TestMapper {    List&lt;Test&gt; getList();}```* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)具体内容，要根据实际项目修改```xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;!--namespace要和接口的位置和名字对应--&gt;&lt;mapper namespace=\"weixindemo.mapper.TestMapper\"&gt;    &lt;select id=\"getList\" resultType=\"weixindemo.pojo.Test\"&gt;        select * from test    &lt;/select&gt;&lt;/mapper&gt;```![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)* 在 service 包下，新建 TestService![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)别忘了加上 @Service 注解```java@Servicepublic class TestService {    @Autowired    private TestMapper mapper;    public List&lt;Test&gt; getList() {        return mapper.getList();    }}```* 在 controller包下，新建 TestController![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)```java@RestControllerpublic class TestController {    @Autowired    private TestService testService;        @RequestMapping(\"/test/list\")    public List&lt;Test&gt; list() {        return testService.getList();    }}```* 重启项目* 新建 http 文件，编写 http 测试脚本，执行![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)```httpGET http://localhost:8880/test/listAccept: application/json###```最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)### 6. MyBatis 代码生成器我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的* 导入 Maven 依赖注意，==是放在`plugiuns`下面的==```xml&lt;!-- mybatis generator 自动生成代码插件 --&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;1.4.0&lt;/version&gt;                &lt;configuration&gt;                    &lt;configurationFile&gt;src/main/resources/generator/generator-config.xml&lt;/configurationFile&gt;                    &lt;overwrite&gt;true&lt;/overwrite&gt;                    &lt;verbose&gt;true&lt;/verbose&gt;                &lt;/configuration&gt;                &lt;dependencies&gt;                    &lt;dependency&gt;                        &lt;groupId&gt;mysql&lt;/groupId&gt;                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;                        &lt;version&gt;8.0.22&lt;/version&gt;                    &lt;/dependency&gt;                &lt;/dependencies&gt;            &lt;/plugin&gt;```* 建立代生成器位置pom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml````xml&lt;configurationFile&gt;  src/main/resources/generator/generator-config.xml&lt;/configurationFile&gt;```![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)* 代码生成器代码从`jdbcConnection`开始，别忘了==根据项目进行修改==```xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;&lt;generatorConfiguration&gt;    &lt;context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\"&gt;        &lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;        &lt;property name=\"autoDelimitKeywords\" value=\"true\"/&gt;        &lt;property name=\"beginningDelimiter\" value=\"`\"/&gt;        &lt;property name=\"endingDelimiter\" value=\"`\"/&gt;        &lt;!--覆盖生成XML文件--&gt;        &lt;plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" /&gt;        &lt;!-- 生成的实体类添加toString()方法 --&gt;        &lt;plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/&gt;        &lt;!-- 不生成注释 --&gt;        &lt;commentGenerator&gt;            &lt;property name=\"suppressAllComments\" value=\"true\"/&gt;        &lt;/commentGenerator&gt;        &lt;jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"                        userId=\"wiki\"                        password=\"123456\"&gt;        &lt;/jdbcConnection&gt;        &lt;!-- domain类的位置 --&gt;        &lt;javaModelGenerator targetProject=\"src/main/java\"                            targetPackage=\"top.faroz.pojo\"/&gt;        &lt;!-- mapper xml的位置 --&gt;        &lt;sqlMapGenerator targetProject=\"src/main/resources\"                         targetPackage=\"mapper\"/&gt;        &lt;!-- mapper类的位置 --&gt;        &lt;javaClientGenerator targetProject=\"src/main/java\"                             targetPackage=\"top.faroz.mapper\"                             type=\"XMLMAPPER\"/&gt;        &lt;table tableName=\"demo\" domainObjectName=\"Demo\"/&gt;        &lt;!--&lt;table tableName=\"ebook\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"category\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"doc\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"content\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"user\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"ebook_snapshot\"/&gt;--&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;```* 新建一个maven启动项![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)```bashmybatis-generator:generate -e```![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)### 7. 测试代码生成器代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表* all.sql 添加 demo 表的增加 SQL 语句，并执行```sql# demo列表drop table if exists `demo`;create table `demo` (    `id` bigint not null comment 'id',    `name` varchar(50) comment '名称',    primary key (`id`)) engine=innodb default charset =utf8mb4 comment '测试';insert into `demo` (id,name) values(2,'测试2');```* 在代码生成器最后的部分，填上要生成的表名![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)* 执行![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)* 执行成功，会生成 4 个新文件![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码```java@RestControllerpublic class DemoController {    @Autowired    private DemoService demoService;    @RequestMapping(\"/demo/list\")    public List&lt;Demo&gt; list() {        return demoService.getList();    }}``````java@Servicepublic class DemoService {    @Resource    private DemoMapper demoMapper;    public List&lt;Demo&gt; getList() {        List&lt;Demo&gt; list = demoMapper.selectByExample(null);        return list;    }}```* 添加 demo 的 http 测试脚本```httpGET http://localhost:8880/demo/listAccept: application/json###```测试成功，说明我们用代码生成器生成的代码没有问题![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)### 8. 解决前后端跨域问题虽然现在还没有构建前端项目，但是后面，会出现跨域问题* 新建 CorsConfig 类![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)* 代码如下不用改动，直接用，别忘了加上==@Configuration==注解```java@Configurationpublic class CorsConfig implements WebMvcConfigurer {    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping(\"/**\")                .allowedOriginPatterns(\"*\")                .allowedHeaders(CorsConfiguration.ALL)                .allowedMethods(CorsConfiguration.ALL)                .allowCredentials(true)                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）    }}```### 9. 添加雪花算法工具类雪花算法，用来生成唯一 ID* 新建 SnowFlake 工具类![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)* 代码如下别忘了加上 @Component 注解```java@Componentpublic class SnowFlake {    /**     * 起始的时间戳     */    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00    /**     * 每一部分占用的位数     */    private final static long SEQUENCE_BIT = 12; //序列号占用的位数    private final static long MACHINE_BIT = 5;   //机器标识占用的位数    private final static long DATACENTER_BIT = 5;//数据中心占用的位数    /**     * 每一部分的最大值     */    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L &lt;&lt; DATACENTER_BIT);    private final static long MAX_MACHINE_NUM = -1L ^ (-1L &lt;&lt; MACHINE_BIT);    private final static long MAX_SEQUENCE = -1L ^ (-1L &lt;&lt; SEQUENCE_BIT);    /**     * 每一部分向左的位移     */    private final static long MACHINE_LEFT = SEQUENCE_BIT;    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;    private long datacenterId = 1;  //数据中心    private long machineId = 1;     //机器标识    private long sequence = 0L; //序列号    private long lastStmp = -1L;//上一次时间戳    public SnowFlake() {    }    public SnowFlake(long datacenterId, long machineId) {        if (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; 0) {            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");        }        if (machineId &gt; MAX_MACHINE_NUM || machineId &lt; 0) {            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");        }        this.datacenterId = datacenterId;        this.machineId = machineId;    }    /**     * 产生下一个ID     *     * @return     */    public synchronized long nextId() {        long currStmp = getNewstmp();        if (currStmp &lt; lastStmp) {            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");        }        if (currStmp == lastStmp) {            //相同毫秒内，序列号自增            sequence = (sequence + 1) &amp; MAX_SEQUENCE;            //同一毫秒的序列数已经达到最大            if (sequence == 0L) {                currStmp = getNextMill();            }        } else {            //不同毫秒内，序列号置为0            sequence = 0L;        }        lastStmp = currStmp;        return (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT //时间戳部分                | datacenterId &lt;&lt; DATACENTER_LEFT       //数据中心部分                | machineId &lt;&lt; MACHINE_LEFT             //机器标识部分                | sequence;                             //序列号部分    }    private long getNextMill() {        long mill = getNewstmp();        while (mill &lt;= lastStmp) {            mill = getNewstmp();        }        return mill;    }    private long getNewstmp() {        return System.currentTimeMillis();    }    // public static void main(String[] args) throws ParseException {    //     // 时间戳    //     // System.out.println(System.currentTimeMillis());    //     // System.out.println(new Date().getTime());    //     //    //     // String dateTime = \"2021-01-01 08:00:00\";    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");    //     // System.out.println(sdf.parse(dateTime).getTime());    //    //     SnowFlake snowFlake = new SnowFlake(1, 1);    //    //     long start = System.currentTimeMillis();    //     for (int i = 0; i &lt; 10; i++) {    //         System.out.println(snowFlake.nextId());    //         System.out.println(System.currentTimeMillis() - start);    //     }    // }}```### 10. 添加 AOPAOP 用来打印接口日志，方便后期调试* Maven 中引入 fastjson，因为 我们的类中要用```xml &lt;!--fastjson--&gt;&lt;dependency&gt;  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  &lt;version&gt;1.2.70&lt;/version&gt;&lt;/dependency&gt;```* Maven 引入 AOP```xml&lt;!--导入aop--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;&lt;/dependency&gt;```* 添加 RequestContext 工具类这个是后期为了打印 WebSocket 日志的![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)```javapublic class RequestContext implements Serializable {    private static ThreadLocal&lt;String&gt; remoteAddr = new ThreadLocal&lt;&gt;();    public static String getRemoteAddr() {        return remoteAddr.get();    }    public static void setRemoteAddr(String remoteAddr) {        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);    }}```* 新建 aspect 包，并新建 LogAspect 类![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)**LogAspect 代码如下:**切点的代码，我们要依据项目修改![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)```java@Aspect@Componentpublic class LogAspect {    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);    @Resource    private SnowFlake snowFlake;    /** 定义一个切点 */    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")    public void controllerPointcut() {}    // @Resource    // private SnowFlake snowFlake;    @Before(\"controllerPointcut()\")    public void doBefore(JoinPoint joinPoint) throws Throwable {        // 增加日志流水号        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));        // 开始打印请求日志        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        HttpServletRequest request = attributes.getRequest();        Signature signature = joinPoint.getSignature();        String name = signature.getName();        // 打印请求信息        LOG.info(\"------------- 开始 -------------\");        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);        LOG.info(\"远程地址: {}\", request.getRemoteAddr());        RequestContext.setRemoteAddr(getRemoteIp(request));        // 拿到所有的参数        Object[] args = joinPoint.getArgs();        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));        Object[] arguments  = new Object[args.length];        for (int i = 0; i &lt; args.length; i++) {            if (args[i] instanceof ServletRequest                    || args[i] instanceof ServletResponse                    || args[i] instanceof MultipartFile) {                continue;            }            arguments[i] = args[i];        }        // 排除字段，敏感字段或太长的字段不显示        String[] excludeProperties = {\"password\", \"file\"};        PropertyPreFilters filters = new PropertyPreFilters();        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();        excludefilter.addExcludes(excludeProperties);        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));    }    @Around(\"controllerPointcut()\")    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {        long startTime = System.currentTimeMillis();        Object result = proceedingJoinPoint.proceed();        // 排除字段，敏感字段或太长的字段不显示        String[] excludeProperties = {\"password\", \"file\"};        PropertyPreFilters filters = new PropertyPreFilters();        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();        excludefilter.addExcludes(excludeProperties);        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);        return result;    }    /**     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径     * @param request     * @return     */    public String getRemoteIp(HttpServletRequest request) {        String ip = request.getHeader(\"x-forwarded-for\");        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {            ip = request.getHeader(\"Proxy-Client-IP\");        }        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {            ip = request.getHeader(\"WL-Proxy-Client-IP\");        }        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {            ip = request.getRemoteAddr();        }        return ip;    }}```### 11. 解决前后端 Long 精度丢失问题我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失* 配置文件新增 JacksonConfig 类![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)* 代码如下```java@Configurationpublic class JacksonConfig {    @Bean    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {        ObjectMapper objectMapper = builder.createXmlMapper(false).build();        SimpleModule simpleModule = new SimpleModule();        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);        objectMapper.registerModule(simpleModule);        return objectMapper;    }}```### 12. 新建 req resp 包我们要将请求与返回包装![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)### 13. CommonResp为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)**代码如下：**```java@Data@AllArgsConstructor@NoArgsConstructorpublic class CommonResp&lt;T&gt; {    /**     * 返回是否成功     */    private boolean isSuccess=true;    /**     * 返回失败时，返回的错误信息     */    private String message;    /**     * 返回成功的时候，返回的内容     */    private T content;}```### 14. 自定义异常* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)* `BusinessException`代码```javapublic class BusinessException extends RuntimeException{    private BusinessExceptionCode code;    public BusinessException (BusinessExceptionCode code) {        /**         * 父类有个成员变量  private String desc         * 需要为这个成员变量赋值         */        super(code.getDesc());        this.code = code;    }    public BusinessExceptionCode getCode() {        return code;    }    public void setCode(BusinessExceptionCode code) {        this.code = code;    }    /**     * 不写入堆栈信息，提高性能     */    @Override    public Throwable fillInStackTrace() {        return this;    }}```* `BusinessExceptionCode`代码```javapublic enum BusinessExceptionCode {    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),    VOTE_REPEAT(\"您已点赞过\"),    ;    private String desc;    BusinessExceptionCode(String desc) {        this.desc = desc;    }    public String getDesc() {        return desc;    }    public void setDesc(String desc) {        this.desc = desc;    }}```### 13. 统一异常处理我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp* 新建 ControllerExceptionHandler 类![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)* 代码如下logger 要根据项目改一下```java/** * 统一异常处理、数据预处理等 * 该类用于捕获系统弹出的异常 * 将异常包装成一个 CommonResp * 从而方便前端调用，显示错误信息 */@ControllerAdvicepublic class ControllerExceptionHandler {    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);    /**     * 校验异常统一处理     * @param e     * @return     */    @ExceptionHandler(value = BindException.class)    @ResponseBody    public CommonResp validExceptionHandler(BindException e) {        CommonResp commonResp = new CommonResp();        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());        commonResp.setSuccess(false);        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());        return commonResp;    }    /**     * 校验异常统一处理     * @param e     * @return     */    @ExceptionHandler(value = BusinessException.class)    @ResponseBody    public CommonResp validExceptionHandler(BusinessException e) {        CommonResp commonResp = new CommonResp();        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());        commonResp.setSuccess(false);        commonResp.setMessage(e.getCode().getDesc());        return commonResp;    }    /**     * 校验异常统一处理     * @param e     * @return     */    @ExceptionHandler(value = Exception.class)    @ResponseBody    public CommonResp validExceptionHandler(Exception e) {        CommonResp commonResp = new CommonResp();        LOG.error(\"系统异常：\", e);        commonResp.setSuccess(false);        commonResp.setMessage(\"系统出现异常，请联系管理员\");        return commonResp;    }}```### 14. 添加日志记录 logback* 在 resource 下，新建logback-spring.xml 文件![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)* 写入内容```xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration&gt;    &lt;!-- 修改一下路径--&gt;    &lt;property name=\"PATH\" value=\"./log\"&gt;&lt;/property&gt;    &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;        &lt;encoder&gt;            &lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n&lt;/Pattern&gt;            &lt;!--&lt;Pattern&gt;%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n&lt;/Pattern&gt;--&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;        &lt;file&gt;${PATH}/trace.log&lt;/file&gt;        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;            &lt;FileNamePattern&gt;${PATH}/trace.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;layout&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;        &lt;/layout&gt;    &lt;/appender&gt;    &lt;appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;        &lt;file&gt;${PATH}/error.log&lt;/file&gt;        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;            &lt;FileNamePattern&gt;${PATH}/error.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;layout&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;        &lt;/layout&gt;        &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;            &lt;level&gt;ERROR&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;    &lt;/appender&gt;    &lt;root level=\"ERROR\"&gt;        &lt;appender-ref ref=\"ERROR_FILE\" /&gt;    &lt;/root&gt;    &lt;root level=\"TRACE\"&gt;        &lt;appender-ref ref=\"TRACE_FILE\" /&gt;    &lt;/root&gt;    &lt;root level=\"INFO\"&gt;        &lt;appender-ref ref=\"STDOUT\" /&gt;    &lt;/root&gt;&lt;/configuration&gt;```### 15. 自定义 bannerresources 下新建 banner.txt![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)里面放上自定义 banner```txt ********     **     *******     *******         ********/**/////     ****   /**////**   **/////**       //////** /**         **//**  /**   /**  **     //**           **  /*******   **  //** /*******  /**      /**          **   /**////   **********/**///**  /**      /**         **    /**      /**//////**/**  //** //**     **         **     /**      /**     /**/**   //** //*******   ***** ********//       //      // //     //   ///////   ///// //////// ```","success":true}
2021-04-16 00:59:37.110 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：9 ms -------------
2021-04-16 00:59:45.524 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:59:45.524 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:59:45.525 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:59:45.525 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:59:45.525 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:59:45.533 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:59:45.533 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：9 ms -------------
2021-04-16 00:59:46.124 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:59:46.124 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:59:46.125 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:59:46.125 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:59:46.125 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 00:59:46.130 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:59:46.130 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 00:59:48.568 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:59:48.568 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:59:48.569 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:59:48.569 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:59:48.569 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:59:48.575 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:59:48.575 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 00:59:48.933 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 00:59:48.933 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 00:59:48.934 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 00:59:48.934 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 00:59:48.935 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 00:59:48.939 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 00:59:48.939 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 01:00:05.605 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:05.605 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find/1 GET
2021-04-16 01:00:05.606 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.find
2021-04-16 01:00:05.606 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:05.606 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 01:00:05.606 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:05.607 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/find-content/1 GET
2021-04-16 01:00:05.607 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.findContent
2021-04-16 01:00:05.608 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:05.608 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},"success":true}
2021-04-16 01:00:05.608 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [1]
2021-04-16 01:00:05.608 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：3 ms -------------
2021-04-16 01:00:05.613 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":"# 完整项目搭建流程虽说 SpringBoot 相较于 SSM 框架，大大减轻了配置的繁琐，但是，要整合 MyBatis ，统一异常处理，Vue等一系列东西，还是要费一番劲的。这次将创建的整个流程记录下来，方便以后的项目搭建。要搭建一个完成的前后端分离项目，分为这么几个部分：==数据库、后端、前端==如果是为微信小程序搭建一个后端服务，那就只要看到==数据库、后端==就可以了## 数据库一般在新建项目的时候，我们会选择专门为这个项目新建一个用户，并为这个用户，赋予只属于这一个项目的所有权限### 1. **连接 admin**只有 admin 有所有权限我的数据库 admin 的账户名和密码是：**账户：**admin**密码：**123![image-20210411002100312](https://gitee.com/faro/images/raw/master/img/20210411003334.png)### 2. **新建数据库**其字符类型一定要选择==utf8mb4==，这才是真正的 utf8，支持表情符号![image-20210411002304858](https://gitee.com/faro/images/raw/master/img/20210411002304.png)### 3. **为这个数据库，专门建一个用户**开发环境中，就将密码和用户名设置成一样的，这样不会忘记host 设置为 localhost![image-20210411002742750](https://gitee.com/faro/images/raw/master/img/20210411002742.png)### 4. **为这个用户，授予对应数据库的全部权限**![image-20210411003034426](https://gitee.com/faro/images/raw/master/img/20210411003034.png)![image-20210411002821790](https://gitee.com/faro/images/raw/master/img/20210414201958.png)### 5. **对当前用户，建立连接**![image-20210411002945727](https://gitee.com/faro/images/raw/master/img/20210411002945.png)## 后端关于 Maven、tomcat 的下载配置，这里就不费笔墨去讲解了。如有需要，可以自行百度查找。### 1. 新建 SpringBoot 项目* 点击 `SpringInitiallizr`，新建项目![image-20210414200239335](https://gitee.com/faro/images/raw/master/img/20210414200239.png)* 选择默认依赖的包![image-20210414200420395](https://gitee.com/faro/images/raw/master/img/20210414200420.png)![image-20210414200533694](https://gitee.com/faro/images/raw/master/img/20210414200533.png)![image-20210414200611051](https://gitee.com/faro/images/raw/master/img/20210414200611.png)* 选择存放路径![image-20210414200656633](https://gitee.com/faro/images/raw/master/img/20210414200656.png)* 新建完成后，项目目录如下![image-20210414200752152](https://gitee.com/faro/images/raw/master/img/20210414200752.png)### 2. 更改启动类位置* 新建 config 包，将启动类放进去![image-20210414201018806](https://gitee.com/faro/images/raw/master/img/20210414201018.png)* 为启动类添加注解注解内的信息，是项目名称```java@ComponentScan(\"weixindemo\")```![image-20210414201210978](https://gitee.com/faro/images/raw/master/img/20210414201211.png)### 3. IDEA 数据库配置* IDEA 连接数据库![image-20210414220153821](https://gitee.com/faro/images/raw/master/img/20210414220153.png)![image-20210414221502868](https://gitee.com/faro/images/raw/master/img/20210414221502.png)* 添加 sql 脚本新建 sql 文件夹，建立`all.sql`文件![image-20210414221647283](https://gitee.com/faro/images/raw/master/img/20210414221647.png)我们在 sql 脚本中添加测试用数据，并执行```sql# 测试表drop table if exists `test`;create table `test` (  `id` bigint not null comment 'id',  `name` varchar(50) comment '名称',  `password` varchar(50) comment '密码',  primary key (`id`)) engine=innodb default charset=utf8mb4 comment='测试';insert into `test` (id, name, password) values (1, '测试', 'password');       ```可以看到，数据库已建立![image-20210415000115932](https://gitee.com/faro/images/raw/master/img/20210415000131.png)### 4. 配置 MyBatis* 在 `resource`文件夹下，新建 `mapper`文件夹这是用来存放 MyBatis 的实现的![image-20210414201459632](https://gitee.com/faro/images/raw/master/img/20210414201459.png)* 新建 pojo 包pojo 包用来存放实体类![image-20210415000316772](https://gitee.com/faro/images/raw/master/img/20210415000316.png)* 在项目下，新建 mapper 包，用来存放接口![image-20210415000711989](https://gitee.com/faro/images/raw/master/img/20210415000712.png)* 将配置文件后缀改为`.yml`我个人习惯使用`.yml`进行位置![image-20210414201610045](https://gitee.com/faro/images/raw/master/img/20210414201610.png)* 添加 `Mybatis`配置这里，要添加数据源，和 MyBatis 的配置，部分地方，要根据实际项目，进行修改```ymlspring:  datasource:    url: jdbc:mysql://localhost:3306/weixindemo?useUnicode=true&amp;characterEncoding=utf-8    username: weixindemo    password: weixindemo    driver-class-name: com.mysql.cj.jdbc.Driver        # 整合Mybatismybatis:  # ** 表示在mapper下不管有多少文件夹，都可以全部识别  mapper-locations: classpath:/mapper/**/*.xml  type-aliases-package: weixindemo.pojo  #  打印sql相关的日志信息  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl```![image-20210415000535841](https://gitee.com/faro/images/raw/master/img/20210415000535.png)* 添加端口配置因为 vue 也是用的8080端口，我们不能和它重了```ymlserver:  port: 8880```* 启动类添加`mapper`接口扫描路径```java@MapperScan(\"weixindemo.mapper\") //mybatis mapper接口扫描```![image-20210415000824262](https://gitee.com/faro/images/raw/master/img/20210415000824.png)### 5. MVC 包建立我们还要建立 ==service==，==util==，==controller==包![image-20210415001226689](https://gitee.com/faro/images/raw/master/img/20210415001226.png)![image-20210415001237989](https://gitee.com/faro/images/raw/master/img/20210415001238.png)### 5. 测试 Mybatis 配置配置到这一步，要对之前的配置，进行一个测试* pojo 中，新建 Test 实体类![image-20210415001028711](https://gitee.com/faro/images/raw/master/img/20210415001028.png)```java@Data@AllArgsConstructor@NoArgsConstructorpublic class Test {    private Integer id;    private String name;}```* mapper 包中，新建 TestMapper 接口![image-20210415001403532](https://gitee.com/faro/images/raw/master/img/20210415001420.png)```java@Repository@Mapperpublic interface TestMapper {    List&lt;Test&gt; getList();}```* resources 下的 mapper 文件夹中，增加 TestMapper.xml 实现  ![image-20210415002153386](https://gitee.com/faro/images/raw/master/img/20210415002153.png)具体内容，要根据实际项目修改```xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;!--namespace要和接口的位置和名字对应--&gt;&lt;mapper namespace=\"weixindemo.mapper.TestMapper\"&gt;    &lt;select id=\"getList\" resultType=\"weixindemo.pojo.Test\"&gt;        select * from test    &lt;/select&gt;&lt;/mapper&gt;```![image-20210415002240288](https://gitee.com/faro/images/raw/master/img/20210415002240.png)* 在 service 包下，新建 TestService![](https://gitee.com/faro/images/raw/master/img/20210415002439.png)别忘了加上 @Service 注解```java@Servicepublic class TestService {    @Autowired    private TestMapper mapper;    public List&lt;Test&gt; getList() {        return mapper.getList();    }}```* 在 controller包下，新建 TestController![image-20210415002611361](https://gitee.com/faro/images/raw/master/img/20210415002611.png)```java@RestControllerpublic class TestController {    @Autowired    private TestService testService;        @RequestMapping(\"/test/list\")    public List&lt;Test&gt; list() {        return testService.getList();    }}```* 重启项目* 新建 http 文件，编写 http 测试脚本，执行![image-20210415002803589](https://gitee.com/faro/images/raw/master/img/20210415002803.png)```httpGET http://localhost:8880/test/listAccept: application/json###```最后成功从接口中获取数据库中的数据，说明我们之前配置的都没有错误，可以进行下面的操作![image-20210415003021769](https://gitee.com/faro/images/raw/master/img/20210415003021.png)### 6. MyBatis 代码生成器我们不可能去写所有持久层的实现，业务中，这部分都是自动生成的* 导入 Maven 依赖注意，==是放在`plugiuns`下面的==```xml&lt;!-- mybatis generator 自动生成代码插件 --&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;1.4.0&lt;/version&gt;                &lt;configuration&gt;                    &lt;configurationFile&gt;src/main/resources/generator/generator-config.xml&lt;/configurationFile&gt;                    &lt;overwrite&gt;true&lt;/overwrite&gt;                    &lt;verbose&gt;true&lt;/verbose&gt;                &lt;/configuration&gt;                &lt;dependencies&gt;                    &lt;dependency&gt;                        &lt;groupId&gt;mysql&lt;/groupId&gt;                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;                        &lt;version&gt;8.0.22&lt;/version&gt;                    &lt;/dependency&gt;                &lt;/dependencies&gt;            &lt;/plugin&gt;```* 建立代生成器位置pom文件中，显示了要创建的代码生成器的位置`src/main/resources/generator/generator-config.xml````xml&lt;configurationFile&gt;  src/main/resources/generator/generator-config.xml&lt;/configurationFile&gt;```![image-20210323131202189](https://gitee.com/faro/images/raw/master/img/20210323131202.png)* 代码生成器代码从`jdbcConnection`开始，别忘了==根据项目进行修改==```xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\"&gt;&lt;generatorConfiguration&gt;    &lt;context id=\"Mysql\" targetRuntime=\"MyBatis3\" defaultModelType=\"flat\"&gt;        &lt;!-- 自动检查关键字，为关键字增加反引号 --&gt;        &lt;property name=\"autoDelimitKeywords\" value=\"true\"/&gt;        &lt;property name=\"beginningDelimiter\" value=\"`\"/&gt;        &lt;property name=\"endingDelimiter\" value=\"`\"/&gt;        &lt;!--覆盖生成XML文件--&gt;        &lt;plugin type=\"org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\" /&gt;        &lt;!-- 生成的实体类添加toString()方法 --&gt;        &lt;plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/&gt;        &lt;!-- 不生成注释 --&gt;        &lt;commentGenerator&gt;            &lt;property name=\"suppressAllComments\" value=\"true\"/&gt;        &lt;/commentGenerator&gt;        &lt;jdbcConnection driverClass=\"com.mysql.cj.jdbc.Driver\"                        connectionURL=\"jdbc:mysql://localhost:3306/wiki?useUnicode=true&amp;characterEncoding=utf-8\"                        userId=\"wiki\"                        password=\"123456\"&gt;        &lt;/jdbcConnection&gt;        &lt;!-- domain类的位置 --&gt;        &lt;javaModelGenerator targetProject=\"src/main/java\"                            targetPackage=\"top.faroz.pojo\"/&gt;        &lt;!-- mapper xml的位置 --&gt;        &lt;sqlMapGenerator targetProject=\"src/main/resources\"                         targetPackage=\"mapper\"/&gt;        &lt;!-- mapper类的位置 --&gt;        &lt;javaClientGenerator targetProject=\"src/main/java\"                             targetPackage=\"top.faroz.mapper\"                             type=\"XMLMAPPER\"/&gt;        &lt;table tableName=\"demo\" domainObjectName=\"Demo\"/&gt;        &lt;!--&lt;table tableName=\"ebook\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"category\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"doc\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"content\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"user\"/&gt;--&gt;        &lt;!--&lt;table tableName=\"ebook_snapshot\"/&gt;--&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;```* 新建一个maven启动项![image-20210411015300856](https://gitee.com/faro/images/raw/master/img/20210411015300.png)![image-20210411015346116](https://gitee.com/faro/images/raw/master/img/20210411015346.png)```bashmybatis-generator:generate -e```![image-20210411015516818](https://gitee.com/faro/images/raw/master/img/20210411015516.png)### 7. 测试代码生成器代码生成器的工作原理，是从数据库中取出表信息，然后根据表信息，去构造持久层代码，所以，我们要再去建一个表* all.sql 添加 demo 表的增加 SQL 语句，并执行```sql# demo列表drop table if exists `demo`;create table `demo` (    `id` bigint not null comment 'id',    `name` varchar(50) comment '名称',    primary key (`id`)) engine=innodb default charset =utf8mb4 comment '测试';insert into `demo` (id,name) values(2,'测试2');```* 在代码生成器最后的部分，填上要生成的表名![image-20210415012438872](https://gitee.com/faro/images/raw/master/img/20210415012439.png)* 执行![image-20210415012552449](https://gitee.com/faro/images/raw/master/img/20210415012552.png)* 执行成功，会生成 4 个新文件![image-20210415012630004](https://gitee.com/faro/images/raw/master/img/20210415012630.png)* 我们模仿 Test，去写 Demo的 Service 和 Controller 代码```java@RestControllerpublic class DemoController {    @Autowired    private DemoService demoService;    @RequestMapping(\"/demo/list\")    public List&lt;Demo&gt; list() {        return demoService.getList();    }}``````java@Servicepublic class DemoService {    @Resource    private DemoMapper demoMapper;    public List&lt;Demo&gt; getList() {        List&lt;Demo&gt; list = demoMapper.selectByExample(null);        return list;    }}```* 添加 demo 的 http 测试脚本```httpGET http://localhost:8880/demo/listAccept: application/json###```测试成功，说明我们用代码生成器生成的代码没有问题![image-20210415013323695](https://gitee.com/faro/images/raw/master/img/20210415013323.png)### 8. 解决前后端跨域问题虽然现在还没有构建前端项目，但是后面，会出现跨域问题* 新建 CorsConfig 类![image-20210415013643183](https://gitee.com/faro/images/raw/master/img/20210415013643.png)* 代码如下不用改动，直接用，别忘了加上==@Configuration==注解```java@Configurationpublic class CorsConfig implements WebMvcConfigurer {    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping(\"/**\")                .allowedOriginPatterns(\"*\")                .allowedHeaders(CorsConfiguration.ALL)                .allowedMethods(CorsConfiguration.ALL)                .allowCredentials(true)                .maxAge(3600); // 1小时内不需要再预检（发OPTIONS请求）    }}```### 9. 添加雪花算法工具类雪花算法，用来生成唯一 ID* 新建 SnowFlake 工具类![image-20210415014504164](https://gitee.com/faro/images/raw/master/img/20210415014504.png)* 代码如下别忘了加上 @Component 注解```java@Componentpublic class SnowFlake {    /**     * 起始的时间戳     */    private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00    /**     * 每一部分占用的位数     */    private final static long SEQUENCE_BIT = 12; //序列号占用的位数    private final static long MACHINE_BIT = 5;   //机器标识占用的位数    private final static long DATACENTER_BIT = 5;//数据中心占用的位数    /**     * 每一部分的最大值     */    private final static long MAX_DATACENTER_NUM = -1L ^ (-1L &lt;&lt; DATACENTER_BIT);    private final static long MAX_MACHINE_NUM = -1L ^ (-1L &lt;&lt; MACHINE_BIT);    private final static long MAX_SEQUENCE = -1L ^ (-1L &lt;&lt; SEQUENCE_BIT);    /**     * 每一部分向左的位移     */    private final static long MACHINE_LEFT = SEQUENCE_BIT;    private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;    private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;    private long datacenterId = 1;  //数据中心    private long machineId = 1;     //机器标识    private long sequence = 0L; //序列号    private long lastStmp = -1L;//上一次时间戳    public SnowFlake() {    }    public SnowFlake(long datacenterId, long machineId) {        if (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; 0) {            throw new IllegalArgumentException(\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\");        }        if (machineId &gt; MAX_MACHINE_NUM || machineId &lt; 0) {            throw new IllegalArgumentException(\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\");        }        this.datacenterId = datacenterId;        this.machineId = machineId;    }    /**     * 产生下一个ID     *     * @return     */    public synchronized long nextId() {        long currStmp = getNewstmp();        if (currStmp &lt; lastStmp) {            throw new RuntimeException(\"Clock moved backwards.  Refusing to generate id\");        }        if (currStmp == lastStmp) {            //相同毫秒内，序列号自增            sequence = (sequence + 1) &amp; MAX_SEQUENCE;            //同一毫秒的序列数已经达到最大            if (sequence == 0L) {                currStmp = getNextMill();            }        } else {            //不同毫秒内，序列号置为0            sequence = 0L;        }        lastStmp = currStmp;        return (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT //时间戳部分                | datacenterId &lt;&lt; DATACENTER_LEFT       //数据中心部分                | machineId &lt;&lt; MACHINE_LEFT             //机器标识部分                | sequence;                             //序列号部分    }    private long getNextMill() {        long mill = getNewstmp();        while (mill &lt;= lastStmp) {            mill = getNewstmp();        }        return mill;    }    private long getNewstmp() {        return System.currentTimeMillis();    }    // public static void main(String[] args) throws ParseException {    //     // 时间戳    //     // System.out.println(System.currentTimeMillis());    //     // System.out.println(new Date().getTime());    //     //    //     // String dateTime = \"2021-01-01 08:00:00\";    //     // SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");    //     // System.out.println(sdf.parse(dateTime).getTime());    //    //     SnowFlake snowFlake = new SnowFlake(1, 1);    //    //     long start = System.currentTimeMillis();    //     for (int i = 0; i &lt; 10; i++) {    //         System.out.println(snowFlake.nextId());    //         System.out.println(System.currentTimeMillis() - start);    //     }    // }}```### 10. 添加 AOPAOP 用来打印接口日志，方便后期调试* Maven 中引入 fastjson，因为 我们的类中要用```xml &lt;!--fastjson--&gt;&lt;dependency&gt;  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  &lt;version&gt;1.2.70&lt;/version&gt;&lt;/dependency&gt;```* Maven 引入 AOP```xml&lt;!--导入aop--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;&lt;/dependency&gt;```* 添加 RequestContext 工具类这个是后期为了打印 WebSocket 日志的![image-20210415014912415](https://gitee.com/faro/images/raw/master/img/20210415014912.png)```javapublic class RequestContext implements Serializable {    private static ThreadLocal&lt;String&gt; remoteAddr = new ThreadLocal&lt;&gt;();    public static String getRemoteAddr() {        return remoteAddr.get();    }    public static void setRemoteAddr(String remoteAddr) {        weixindemo.util.RequestContext.remoteAddr.set(remoteAddr);    }}```* 新建 aspect 包，并新建 LogAspect 类![image-20210415013942484](https://gitee.com/faro/images/raw/master/img/20210415013942.png)**LogAspect 代码如下:**切点的代码，我们要依据项目修改![image-20210415015319943](https://gitee.com/faro/images/raw/master/img/20210415015320.png)```java@Aspect@Componentpublic class LogAspect {    private final static Logger LOG = LoggerFactory.getLogger(weixindemo.aspect.LogAspect.class);    @Resource    private SnowFlake snowFlake;    /** 定义一个切点 */    @Pointcut(\"execution(public * weixindemo.controller..*Controller.*(..))\")    public void controllerPointcut() {}    // @Resource    // private SnowFlake snowFlake;    @Before(\"controllerPointcut()\")    public void doBefore(JoinPoint joinPoint) throws Throwable {        // 增加日志流水号        MDC.put(\"LOG_ID\", String.valueOf(snowFlake.nextId()));        // 开始打印请求日志        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        HttpServletRequest request = attributes.getRequest();        Signature signature = joinPoint.getSignature();        String name = signature.getName();        // 打印请求信息        LOG.info(\"------------- 开始 -------------\");        LOG.info(\"请求地址: {} {}\", request.getRequestURL().toString(), request.getMethod());        LOG.info(\"类名方法: {}.{}\", signature.getDeclaringTypeName(), name);        LOG.info(\"远程地址: {}\", request.getRemoteAddr());        RequestContext.setRemoteAddr(getRemoteIp(request));        // 拿到所有的参数        Object[] args = joinPoint.getArgs();        // LOG.info(\"请求参数: {}\", JSONObject.toJSONString(args));        Object[] arguments  = new Object[args.length];        for (int i = 0; i &lt; args.length; i++) {            if (args[i] instanceof ServletRequest                    || args[i] instanceof ServletResponse                    || args[i] instanceof MultipartFile) {                continue;            }            arguments[i] = args[i];        }        // 排除字段，敏感字段或太长的字段不显示        String[] excludeProperties = {\"password\", \"file\"};        PropertyPreFilters filters = new PropertyPreFilters();        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();        excludefilter.addExcludes(excludeProperties);        LOG.info(\"请求参数: {}\", JSONObject.toJSONString(arguments, excludefilter));    }    @Around(\"controllerPointcut()\")    public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {        long startTime = System.currentTimeMillis();        Object result = proceedingJoinPoint.proceed();        // 排除字段，敏感字段或太长的字段不显示        String[] excludeProperties = {\"password\", \"file\"};        PropertyPreFilters filters = new PropertyPreFilters();        PropertyPreFilters.MySimplePropertyPreFilter excludefilter = filters.addFilter();        excludefilter.addExcludes(excludeProperties);        LOG.info(\"返回结果: {}\", JSONObject.toJSONString(result, excludefilter));        LOG.info(\"------------- 结束 耗时：{} ms -------------\", System.currentTimeMillis() - startTime);        return result;    }    /**     * 使用nginx做反向代理，需要用该方法才能取到真实的远程IP     * 当我们发布上线后，因为前端、后端都是用80端口，会冲突     * 所以用户访问的时候，需要先去访问 nginx，然后，让 nginx 去反向代理，找我们要访问的路径     * @param request     * @return     */    public String getRemoteIp(HttpServletRequest request) {        String ip = request.getHeader(\"x-forwarded-for\");        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {            ip = request.getHeader(\"Proxy-Client-IP\");        }        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {            ip = request.getHeader(\"WL-Proxy-Client-IP\");        }        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {            ip = request.getRemoteAddr();        }        return ip;    }}```### 11. 解决前后端 Long 精度丢失问题我们后期会用到 MD5 加密，到时候后端传到前端的时候，因为 javascript number 的精度问题，会出现数据丢失* 配置文件新增 JacksonConfig 类![image-20210415020223600](https://gitee.com/faro/images/raw/master/img/20210415020223.png)* 代码如下```java@Configurationpublic class JacksonConfig {    @Bean    public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {        ObjectMapper objectMapper = builder.createXmlMapper(false).build();        SimpleModule simpleModule = new SimpleModule();        // simpleModule.addSerializer(Long.class, ToStringSerializer.instance);        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);        objectMapper.registerModule(simpleModule);        return objectMapper;    }}```### 12. 新建 req resp 包我们要将请求与返回包装![image-20210415020648707](https://gitee.com/faro/images/raw/master/img/20210415020648.png)### 13. CommonResp为了方便前端调用，后端的 resp，我们写一个统一的返回 CommonResp![image-20210415020805724](https://gitee.com/faro/images/raw/master/img/20210415020805.png)**代码如下：**```java@Data@AllArgsConstructor@NoArgsConstructorpublic class CommonResp&lt;T&gt; {    /**     * 返回是否成功     */    private boolean isSuccess=true;    /**     * 返回失败时，返回的错误信息     */    private String message;    /**     * 返回成功的时候，返回的内容     */    private T content;}```### 14. 自定义异常* 新建异常类`BusinessException`和异常信息枚举`BusinessExceptionCode`![image-20210415021357196](https://gitee.com/faro/images/raw/master/img/20210415021357.png)* `BusinessException`代码```javapublic class BusinessException extends RuntimeException{    private BusinessExceptionCode code;    public BusinessException (BusinessExceptionCode code) {        /**         * 父类有个成员变量  private String desc         * 需要为这个成员变量赋值         */        super(code.getDesc());        this.code = code;    }    public BusinessExceptionCode getCode() {        return code;    }    public void setCode(BusinessExceptionCode code) {        this.code = code;    }    /**     * 不写入堆栈信息，提高性能     */    @Override    public Throwable fillInStackTrace() {        return this;    }}```* `BusinessExceptionCode`代码```javapublic enum BusinessExceptionCode {    USER_LOGIN_NAME_EXIST(\"登录名已存在\"),    LOGIN_USER_ERROR(\"用户名不存在或密码错误\"),    VOTE_REPEAT(\"您已点赞过\"),    ;    private String desc;    BusinessExceptionCode(String desc) {        this.desc = desc;    }    public String getDesc() {        return desc;    }    public void setDesc(String desc) {        this.desc = desc;    }}```### 13. 统一异常处理我们所有异常，都通过这个类来捕获，并生成一个返回错误信息的 CommonResp* 新建 ControllerExceptionHandler 类![](https://gitee.com/faro/images/raw/master/img/20210415020947.png)* 代码如下logger 要根据项目改一下```java/** * 统一异常处理、数据预处理等 * 该类用于捕获系统弹出的异常 * 将异常包装成一个 CommonResp * 从而方便前端调用，显示错误信息 */@ControllerAdvicepublic class ControllerExceptionHandler {    private static final Logger LOG = LoggerFactory.getLogger(top.faroz.controller.ControllerExceptionHandler.class);    /**     * 校验异常统一处理     * @param e     * @return     */    @ExceptionHandler(value = BindException.class)    @ResponseBody    public CommonResp validExceptionHandler(BindException e) {        CommonResp commonResp = new CommonResp();        LOG.warn(\"参数校验失败：{}\", e.getBindingResult().getAllErrors().get(0).getDefaultMessage());        commonResp.setSuccess(false);        commonResp.setMessage(e.getBindingResult().getAllErrors().get(0).getDefaultMessage());        return commonResp;    }    /**     * 校验异常统一处理     * @param e     * @return     */    @ExceptionHandler(value = BusinessException.class)    @ResponseBody    public CommonResp validExceptionHandler(BusinessException e) {        CommonResp commonResp = new CommonResp();        LOG.warn(\"业务异常：{}\", e.getCode().getDesc());        commonResp.setSuccess(false);        commonResp.setMessage(e.getCode().getDesc());        return commonResp;    }    /**     * 校验异常统一处理     * @param e     * @return     */    @ExceptionHandler(value = Exception.class)    @ResponseBody    public CommonResp validExceptionHandler(Exception e) {        CommonResp commonResp = new CommonResp();        LOG.error(\"系统异常：\", e);        commonResp.setSuccess(false);        commonResp.setMessage(\"系统出现异常，请联系管理员\");        return commonResp;    }}```### 14. 添加日志记录 logback* 在 resource 下，新建logback-spring.xml 文件![image-20210411004947139](https://gitee.com/faro/images/raw/master/img/20210411004947.png)* 写入内容```xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration&gt;    &lt;!-- 修改一下路径--&gt;    &lt;property name=\"PATH\" value=\"./log\"&gt;&lt;/property&gt;    &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;        &lt;encoder&gt;            &lt;Pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %blue(%-50logger{50}:%-4line) %thread %msg%n&lt;/Pattern&gt;            &lt;!--&lt;Pattern&gt;%d{ss.SSS} %highlight(%-5level) %blue(%-30logger{30}:%-4line) %thread %green(%-18X{LOG_ID}) %msg%n&lt;/Pattern&gt;--&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;appender name=\"TRACE_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;        &lt;file&gt;${PATH}/trace.log&lt;/file&gt;        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;            &lt;FileNamePattern&gt;${PATH}/trace.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;layout&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;        &lt;/layout&gt;    &lt;/appender&gt;    &lt;appender name=\"ERROR_FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;        &lt;file&gt;${PATH}/error.log&lt;/file&gt;        &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;            &lt;FileNamePattern&gt;${PATH}/error.%d{yyyy-MM-dd}.%i.log&lt;/FileNamePattern&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;        &lt;layout&gt;            &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %-50logger{50}:%-4line %green(%-18X{LOG_ID}) %msg%n&lt;/pattern&gt;        &lt;/layout&gt;        &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"&gt;            &lt;level&gt;ERROR&lt;/level&gt;            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;        &lt;/filter&gt;    &lt;/appender&gt;    &lt;root level=\"ERROR\"&gt;        &lt;appender-ref ref=\"ERROR_FILE\" /&gt;    &lt;/root&gt;    &lt;root level=\"TRACE\"&gt;        &lt;appender-ref ref=\"TRACE_FILE\" /&gt;    &lt;/root&gt;    &lt;root level=\"INFO\"&gt;        &lt;appender-ref ref=\"STDOUT\" /&gt;    &lt;/root&gt;&lt;/configuration&gt;```### 15. 自定义 bannerresources 下新建 banner.txt![image-20210415023847796](https://gitee.com/faro/images/raw/master/img/20210415023847.png)里面放上自定义 banner```txt ********     **     *******     *******         ********/**/////     ****   /**////**   **/////**       //////** /**         **//**  /**   /**  **     //**           **  /*******   **  //** /*******  /**      /**          **   /**////   **********/**///**  /**      /**         **    /**      /**//////**/**  //** //**     **         **     /**      /**     /**/**   //** //*******   ***** ********//       //      // //     //   ///////   ///// //////// ```","success":true}
2021-04-16 01:00:05.618 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：12 ms -------------
2021-04-16 01:00:25.280 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:25.281 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 01:00:25.281 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 01:00:25.282 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:25.282 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 01:00:25.288 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 01:00:25.289 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：9 ms -------------
2021-04-16 01:00:25.769 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:25.769 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 01:00:25.769 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 01:00:25.769 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:25.769 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 01:00:25.774 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 01:00:25.774 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 01:00:31.572 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:31.573 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 01:00:31.573 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 01:00:31.573 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:31.573 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 01:00:31.577 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 01:00:31.577 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 01:00:31.843 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:31.844 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 01:00:31.844 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 01:00:31.844 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:31.844 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 01:00:31.847 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 01:00:31.847 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 01:00:32.670 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:32.670 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 01:00:32.670 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 01:00:32.671 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:32.671 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 01:00:32.675 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 01:00:32.675 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 01:00:32.904 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:32.904 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 01:00:32.904 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 01:00:32.905 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:32.905 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 01:00:32.908 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 01:00:32.909 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 01:00:34.544 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:34.544 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 01:00:34.545 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 01:00:34.545 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:34.545 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 01:00:34.554 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 01:00:34.554 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：10 ms -------------
2021-04-16 01:00:34.880 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:34.880 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 01:00:34.880 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 01:00:34.880 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:34.881 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 01:00:34.885 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 01:00:34.885 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 01:00:37.586 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:37.586 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 01:00:37.586 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 01:00:37.587 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:37.587 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":2,"size":4}]
2021-04-16 01:00:37.592 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0},{"description":"卡里古拉文章链接","docCount":0,"id":36754863593492480,"name":"卡里古拉","viewCount":0,"voteCount":0},{"description":" python,2天就够了","docCount":0,"id":36776384114331648,"name":"2天学会python","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 01:00:37.592 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 01:00:44.077 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:44.077 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 01:00:44.078 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 01:00:44.078 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:44.079 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":4}]
2021-04-16 01:00:44.083 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 01:00:44.084 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：7 ms -------------
2021-04-16 01:00:47.471 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:47.472 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 01:00:47.472 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 01:00:47.472 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:47.472 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 01:00:47.477 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 01:00:47.477 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：6 ms -------------
2021-04-16 01:00:47.988 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:47.988 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/user/list GET
2021-04-16 01:00:47.988 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.UserController.list
2021-04-16 01:00:47.988 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:47.989 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":1000}]
2021-04-16 01:00:47.992 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"id":2,"loginName":"admin","name":"管理员"},{"id":37798874252972032,"loginName":"guest","name":"一般用户"}],"total":2},"success":true}
2021-04-16 01:00:47.992 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 01:00:48.754 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:48.754 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 01:00:48.754 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 01:00:48.755 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:48.755 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 01:00:48.759 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 01:00:48.759 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：5 ms -------------
2021-04-16 01:00:49.304 INFO  blog.aspect.LogAspect                             :55   [32m                  [0;39m ------------- 开始 -------------
2021-04-16 01:00:49.305 INFO  blog.aspect.LogAspect                             :56   [32m                  [0;39m 请求地址: http://127.0.0.1:8880/doc/list GET
2021-04-16 01:00:49.305 INFO  blog.aspect.LogAspect                             :57   [32m                  [0;39m 类名方法: blog.controller.DocController.list
2021-04-16 01:00:49.305 INFO  blog.aspect.LogAspect                             :58   [32m                  [0;39m 远程地址: 127.0.0.1
2021-04-16 01:00:49.305 INFO  blog.aspect.LogAspect                             :80   [32m                  [0;39m 请求参数: [{"page":1,"size":5}]
2021-04-16 01:00:49.308 INFO  blog.aspect.LogAspect                             :92   [32m                  [0;39m 返回结果: {"content":{"list":[{"description":"零基础入门 Java 开发，企业级应用开发最佳首选框架","docCount":0,"id":1,"name":"Spring Boot 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Vue 开发，企业级应用开发最佳首选框架","docCount":0,"id":2,"name":"Vue 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Python 开发，企业级应用开发最佳首选框架","docCount":0,"id":3,"name":"Python 入门教程","viewCount":0,"voteCount":0},{"description":"零基础入门 Mysql 开发，企业级应用开发最佳首选框架","docCount":0,"id":4,"name":"Mysql 入门教程","viewCount":0,"voteCount":0},{"description":"c++真的很容易，不会有人不会吧？","docCount":0,"id":5,"name":"21 天学会C++","viewCount":0,"voteCount":0}],"total":7},"success":true}
2021-04-16 01:00:49.308 INFO  blog.aspect.LogAspect                             :93   [32m                  [0;39m ------------- 结束 耗时：4 ms -------------
2021-04-16 01:03:35.540 INFO  io.lettuce.core.protocol.ConnectionWatchdog       :171  [32m                  [0;39m Reconnecting, last destination was r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com/47.103.172.100:6379
2021-04-16 01:03:35.611 INFO  io.lettuce.core.protocol.ReconnectionHandler      :164  [32m                  [0;39m Reconnected to r-uf6ljbcdaxobsifyctpd.redis.rds.aliyuncs.com:6379
